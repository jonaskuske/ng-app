{"version":3,"sources":["webpack:///node_modules/@ngxs/hmr-plugin/__ivy_ngcc__/fesm2015/ngxs-hmr-plugin.js.pre-build-optimizer.js"],"names":["__webpack_require__","r","__webpack_exports__","d","HmrBeforeDestroyAction","HmrInitAction","hmr","hmrIsReloaded","tslib__WEBPACK_IMPORTED_MODULE_0__","_angular_core__WEBPACK_IMPORTED_MODULE_1__","_ngxs_store_internals__WEBPACK_IMPORTED_MODULE_2__","_ngxs_store__WEBPACK_IMPORTED_MODULE_3__","_ngxs_store_operators__WEBPACK_IMPORTED_MODULE_4__","[object Object]","payload","this","type","HmrStateContextFactory","module","store","injector","get","k","undefined","Error","dispatch","actions","getState","snapshot","setState","val","Object","a","reset","patchState","currentState","newState","assign","HmrOptionBuilder","deferTime","autoClearLogs","console","clear","HmrLifecycle","ngAppModule","bootstrap","storage","context","options","hmrAfterOnInit","moduleHmrInit","getModuleHmrInitCallback","bind","stateEventLoop","ctx","state","hmrNgxsStoreOnInit","createStateContext","hmrNgxsStoreBeforeOnDestroy","callback","hasData","appBootstrapped$","state$","select","subscribe","eventId","storeEventId","clearInterval","window","setTimeout","unsubscribe","HmrManager","optionsBuilder","applicationRef","ngModule","g","e","bootstrapFn","tick","b","set","lifecycle","createLifecycle","pop","clearLogs","removeOldHosts","cloneHostsBeforeDestroy","removeNgStyles","destroy","instance","removableList","components","map","component","location","nativeElement","componentNode","newNode","document","createElement","tagName","parentNode","currentDisplay","style","display","insertBefore","removeChild","_a","forEach","removeOldHost","head","Array","from","querySelectorAll","filter","innerText","includes","HmrStorage","_snapshot","keys","length","webpackModule","hot","error","NGXS_HMR_LIFECYCLE_STATUS","hmrReloaded","accept","data","manager","hmrModule","beforeModuleBootstrap","dispose","value","beforeModuleOnDestroy","createNewModule"],"mappings":"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","file":"ngxs-hmr-plugin-es2015.93e98974faf45ef720f3.js","sourcesContent":["import { __awaiter } from 'tslib';\nimport { ApplicationRef } from '@angular/core';\nimport { NgxsBootstrapper, InitialState } from '@ngxs/store/internals';\nimport { Store } from '@ngxs/store';\nimport { isStateOperator } from '@ngxs/store/operators';\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass HmrInitAction {\r\n    /**\r\n     * @param {?} payload\r\n     */\r\n    constructor(payload) {\r\n        this.payload = payload;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    static get type() {\r\n        // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n        return '@@HMR_INIT';\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    HmrInitAction.prototype.payload;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass HmrBeforeDestroyAction {\r\n    /**\r\n     * @param {?} payload\r\n     */\r\n    constructor(payload) {\r\n        this.payload = payload;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    static get type() {\r\n        // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n        return '@@HMR_BEFORE_DESTROY';\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    HmrBeforeDestroyAction.prototype.payload;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T, S\r\n */\r\nclass HmrStateContextFactory {\r\n    /**\r\n     * @param {?} module\r\n     */\r\n    constructor(module) {\r\n        /** @type {?} */\r\n        const store = module.injector.get(Store, undefined);\r\n        if (!store) {\r\n            throw new Error('Store not found, maybe you forgot to import the NgxsModule');\r\n        }\r\n        this.store = store;\r\n    }\r\n    /**\r\n     * \\@description\r\n     * must be taken out into  \\@ngxs/store/internals\r\n     * @return {?}\r\n     */\r\n    createStateContext() {\r\n        return {\r\n            dispatch: (/**\r\n             * @param {?} actions\r\n             * @return {?}\r\n             */\r\n            actions => (/** @type {?} */ (this.store)).dispatch(actions)),\r\n            getState: (/**\r\n             * @return {?}\r\n             */\r\n            () => (/** @type {?} */ ((/** @type {?} */ (this.store)).snapshot()))),\r\n            setState: (/**\r\n             * @param {?} val\r\n             * @return {?}\r\n             */\r\n            val => {\r\n                if (isStateOperator(val)) {\r\n                    /** @type {?} */\r\n                    const currentState = (/** @type {?} */ (this.store)).snapshot();\r\n                    val = val(currentState);\r\n                }\r\n                (/** @type {?} */ (this.store)).reset(val);\r\n                return (/** @type {?} */ (val));\r\n            }),\r\n            patchState: (/**\r\n             * @param {?} val\r\n             * @return {?}\r\n             */\r\n            val => {\r\n                /** @type {?} */\r\n                const currentState = (/** @type {?} */ (this.store)).snapshot();\r\n                /** @type {?} */\r\n                const newState = Object.assign({}, currentState, ((/** @type {?} */ (val))));\r\n                (/** @type {?} */ (this.store)).reset(newState);\r\n                return newState;\r\n            })\r\n        };\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    HmrStateContextFactory.prototype.store;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass HmrOptionBuilder {\r\n    /**\r\n     * @param {?} __0\r\n     */\r\n    constructor({ deferTime, autoClearLogs }) {\r\n        this.deferTime = deferTime || 100;\r\n        this.autoClearLogs = autoClearLogs === undefined ? true : autoClearLogs;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    clearLogs() {\r\n        if (this.autoClearLogs) {\r\n            console.clear();\r\n        }\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    HmrOptionBuilder.prototype.deferTime;\r\n    /** @type {?} */\r\n    HmrOptionBuilder.prototype.autoClearLogs;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T, S\r\n */\r\nclass HmrLifecycle {\r\n    /**\r\n     * @param {?} ngAppModule\r\n     * @param {?} bootstrap\r\n     * @param {?} storage\r\n     * @param {?} context\r\n     * @param {?} options\r\n     */\r\n    constructor(ngAppModule, bootstrap, storage, context, options) {\r\n        this.ngAppModule = ngAppModule;\r\n        this.bootstrap = bootstrap;\r\n        this.storage = storage;\r\n        this.context = context;\r\n        this.options = options;\r\n    }\r\n    /**\r\n     * @param {?} hmrAfterOnInit\r\n     * @return {?}\r\n     */\r\n    hmrNgxsStoreOnInit(hmrAfterOnInit) {\r\n        /** @type {?} */\r\n        let moduleHmrInit = this.getModuleHmrInitCallback();\r\n        moduleHmrInit = moduleHmrInit.bind(this.ngAppModule);\r\n        this.stateEventLoop((/**\r\n         * @param {?} ctx\r\n         * @param {?} state\r\n         * @return {?}\r\n         */\r\n        (ctx, state) => {\r\n            moduleHmrInit(ctx, state);\r\n            hmrAfterOnInit(ctx, state);\r\n        }));\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    getModuleHmrInitCallback() {\r\n        if (typeof this.ngAppModule.hmrNgxsStoreOnInit === 'function') {\r\n            return this.ngAppModule.hmrNgxsStoreOnInit;\r\n        }\r\n        return (/**\r\n         * @param {?} ctx\r\n         * @param {?} state\r\n         * @return {?}\r\n         */\r\n        function defaultModuleHmrInit(ctx, state) {\r\n            ctx.patchState(state);\r\n        });\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    hmrNgxsStoreBeforeOnDestroy() {\r\n        /** @type {?} */\r\n        let state = {};\r\n        /** @type {?} */\r\n        const ctx = this.context.createStateContext();\r\n        if (typeof this.ngAppModule.hmrNgxsStoreBeforeOnDestroy === 'function') {\r\n            state = this.ngAppModule.hmrNgxsStoreBeforeOnDestroy(ctx);\r\n        }\r\n        else {\r\n            state = ctx.getState();\r\n        }\r\n        ctx.dispatch(new HmrBeforeDestroyAction(state));\r\n        return state;\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    stateEventLoop(callback) {\r\n        if (!this.storage.hasData())\r\n            return;\r\n        /** @type {?} */\r\n        const appBootstrapped$ = this.bootstrap.appBootstrapped$;\r\n        /** @type {?} */\r\n        const state$ = this.context.store.select((/**\r\n         * @param {?} state\r\n         * @return {?}\r\n         */\r\n        state => state));\r\n        appBootstrapped$.subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            /** @type {?} */\r\n            let eventId;\r\n            /** @type {?} */\r\n            const storeEventId = state$.subscribe((/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                // setTimeout used for zone detection after set hmr state\r\n                clearInterval(eventId);\r\n                eventId = window.setTimeout((/**\r\n                 * @return {?}\r\n                 */\r\n                () => {\r\n                    // close check on the message queue\r\n                    storeEventId.unsubscribe();\r\n                    // if events are no longer running on the call stack,\r\n                    // then we can update the state\r\n                    callback(this.context.createStateContext(), (/** @type {?} */ (this.storage.snapshot)));\r\n                }), this.options.deferTime);\r\n            }));\r\n        }));\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HmrLifecycle.prototype.ngAppModule;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HmrLifecycle.prototype.bootstrap;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HmrLifecycle.prototype.storage;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HmrLifecycle.prototype.context;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HmrLifecycle.prototype.options;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T, S\r\n */\r\nclass HmrManager {\r\n    /**\r\n     * @param {?} options\r\n     * @param {?} storage\r\n     */\r\n    constructor(options, storage) {\r\n        this.storage = storage;\r\n        this.optionsBuilder = new HmrOptionBuilder(options);\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    get applicationRef() {\r\n        return this.ngModule.injector.get(ApplicationRef);\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    get bootstrap() {\r\n        return this.ngModule.injector.get(NgxsBootstrapper);\r\n    }\r\n    /**\r\n     * @param {?} bootstrapFn\r\n     * @param {?} tick\r\n     * @return {?}\r\n     */\r\n    hmrModule(bootstrapFn, tick) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            InitialState.set(this.storage.snapshot);\r\n            this.ngModule = yield bootstrapFn();\r\n            this.context = new HmrStateContextFactory(this.ngModule);\r\n            this.lifecycle = this.createLifecycle();\r\n            tick();\r\n            InitialState.pop();\r\n            return this.ngModule;\r\n        });\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    beforeModuleBootstrap() {\r\n        this.lifecycle.hmrNgxsStoreOnInit((/**\r\n         * @param {?} ctx\r\n         * @param {?} state\r\n         * @return {?}\r\n         */\r\n        (ctx, state) => {\r\n            ctx.dispatch(new HmrInitAction(state));\r\n        }));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    beforeModuleOnDestroy() {\r\n        this.optionsBuilder.clearLogs();\r\n        return this.lifecycle.hmrNgxsStoreBeforeOnDestroy();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    createNewModule() {\r\n        /** @type {?} */\r\n        const removeOldHosts = this.cloneHostsBeforeDestroy();\r\n        this.removeNgStyles();\r\n        this.ngModule.destroy();\r\n        removeOldHosts();\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    createLifecycle() {\r\n        return new HmrLifecycle(this.ngModule.instance, this.bootstrap, this.storage, this.context, this.optionsBuilder);\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    cloneHostsBeforeDestroy() {\r\n        /** @type {?} */\r\n        const elements = this.applicationRef.components.map((/**\r\n         * @param {?} component\r\n         * @return {?}\r\n         */\r\n        (component) => component.location.nativeElement));\r\n        /** @type {?} */\r\n        const removableList = elements.map((/**\r\n         * @param {?} componentNode\r\n         * @return {?}\r\n         */\r\n        (componentNode) => {\r\n            /** @type {?} */\r\n            const newNode = document.createElement(componentNode.tagName);\r\n            /** @type {?} */\r\n            const parentNode = (/** @type {?} */ (componentNode.parentNode));\r\n            /** @type {?} */\r\n            const currentDisplay = newNode.style.display;\r\n            newNode.style.display = 'none';\r\n            parentNode.insertBefore(newNode, componentNode);\r\n            return (/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                newNode.style.display = currentDisplay;\r\n                try {\r\n                    parentNode.removeChild(componentNode);\r\n                }\r\n                catch (_a) { }\r\n            });\r\n        }));\r\n        return (/**\r\n         * @return {?}\r\n         */\r\n        function removeOldHosts() {\r\n            removableList.forEach((/**\r\n             * @param {?} removeOldHost\r\n             * @return {?}\r\n             */\r\n            (removeOldHost) => removeOldHost()));\r\n        });\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    removeNgStyles() {\r\n        /** @type {?} */\r\n        const head = (/** @type {?} */ (document.head));\r\n        /** @type {?} */\r\n        const styles = Array.from((/** @type {?} */ (head)).querySelectorAll('style'));\r\n        styles\r\n            .filter((/**\r\n         * @param {?} style\r\n         * @return {?}\r\n         */\r\n        (style) => style.innerText.includes('_ng')))\r\n            .map((/**\r\n         * @param {?} style\r\n         * @return {?}\r\n         */\r\n        (style) => (/** @type {?} */ (head)).removeChild(style)));\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    HmrManager.prototype.storage;\r\n    /** @type {?} */\r\n    HmrManager.prototype.context;\r\n    /** @type {?} */\r\n    HmrManager.prototype.lifecycle;\r\n    /** @type {?} */\r\n    HmrManager.prototype.optionsBuilder;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HmrManager.prototype.ngModule;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template S\r\n */\r\nclass HmrStorage {\r\n    /**\r\n     * @param {?=} _snapshot\r\n     */\r\n    constructor(_snapshot = {}) {\r\n        this._snapshot = _snapshot;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    hasData() {\r\n        return Object.keys(this._snapshot).length > 0;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get snapshot() {\r\n        return this._snapshot;\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HmrStorage.prototype._snapshot;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction setHmrReloadedTo(value) {\r\n    if (window[\"NGXS_HMR_LIFECYCLE_STATUS\" /* Status */]) {\r\n        window[\"NGXS_HMR_LIFECYCLE_STATUS\" /* Status */].hmrReloaded = value;\r\n    }\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction markApplicationAsHmrReloaded() {\r\n    window[\"NGXS_HMR_LIFECYCLE_STATUS\" /* Status */] = window[\"NGXS_HMR_LIFECYCLE_STATUS\" /* Status */] || {\r\n        hmrReloaded: false\r\n    };\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T\r\n * @param {?} webpackModule\r\n * @param {?} bootstrapFn\r\n * @param {?=} options\r\n * @return {?}\r\n */\r\nfunction hmr(webpackModule, bootstrapFn, options = {}) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        if (!webpackModule.hot) {\r\n            console.error('Are you using the --hmr flag for ng serve?');\r\n            throw new Error('HMR is not enabled for webpack-dev-server!');\r\n        }\r\n        markApplicationAsHmrReloaded();\r\n        webpackModule.hot.accept();\r\n        /**\r\n         * @record\r\n         */\r\n        function HmrDataTransfer() { }\r\n        if (false) {\r\n            /** @type {?|undefined} */\r\n            HmrDataTransfer.prototype.snapshot;\r\n        }\r\n        /** @type {?} */\r\n        const dataTransfer = webpackModule.hot.data || {};\r\n        /** @type {?} */\r\n        const storage = new HmrStorage(dataTransfer.snapshot || {});\r\n        /** @type {?} */\r\n        const manager = new HmrManager(options, storage);\r\n        return yield manager.hmrModule(bootstrapFn, (/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            manager.beforeModuleBootstrap();\r\n            (/** @type {?} */ (webpackModule.hot)).dispose((/**\r\n             * @param {?} data\r\n             * @return {?}\r\n             */\r\n            (data) => {\r\n                setHmrReloadedTo(true);\r\n                data.snapshot = manager.beforeModuleOnDestroy();\r\n                manager.createNewModule();\r\n            }));\r\n        }));\r\n    });\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @return {?}\r\n */\r\nfunction hmrIsReloaded() {\r\n    return !!(window[\"NGXS_HMR_LIFECYCLE_STATUS\" /* Status */] && window[\"NGXS_HMR_LIFECYCLE_STATUS\" /* Status */].hmrReloaded);\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { HmrBeforeDestroyAction, HmrInitAction, hmr, hmrIsReloaded };\n\n//# sourceMappingURL=ngxs-hmr-plugin.js.map"]}