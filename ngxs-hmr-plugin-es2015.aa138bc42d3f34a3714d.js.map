{"version":3,"sources":["webpack:///node_modules/@ngxs/hmr-plugin/fesm2015/ngxs-hmr-plugin.js"],"names":["HmrInitAction","payload","this","HmrBeforeDestroyAction","HmrStateContextFactory","module","store","injector","get","undefined","Error","dispatch","actions","getState","snapshot","setState","val","reset","patchState","currentState","newState","Object","assign","HmrOptionBuilder","deferTime","autoClearLogs","console","clear","HmrLifecycle","ngAppModule","bootstrap","storage","context","options","hmrAfterOnInit","moduleHmrInit","getModuleHmrInitCallback","bind","stateEventLoop","ctx","state","hmrNgxsStoreOnInit","createStateContext","hmrNgxsStoreBeforeOnDestroy","callback","hasData","appBootstrapped$","state$","select","subscribe","eventId","storeEventId","clearInterval","window","setTimeout","unsubscribe","HmrManager","optionsBuilder","ngModule","bootstrapFn","tick","set","lifecycle","createLifecycle","pop","clearLogs","removeOldHosts","cloneHostsBeforeDestroy","removeNgStyles","destroy","instance","removableList","applicationRef","components","map","component","location","nativeElement","componentNode","newNode","document","createElement","tagName","parentNode","currentDisplay","style","display","insertBefore","removeChild","_a","forEach","removeOldHost","head","Array","from","querySelectorAll","filter","innerText","includes","HmrStorage","_snapshot","keys","length","hmr","webpackModule","hot","error","hmrReloaded","accept","data","manager","hmrModule","beforeModuleBootstrap","dispose","beforeModuleOnDestroy","createNewModule","hmrIsReloaded"],"mappings":"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","file":"x","sourcesContent":["import { __awaiter } from 'tslib';\nimport { ApplicationRef } from '@angular/core';\nimport { NgxsBootstrapper, InitialState } from '@ngxs/store/internals';\nimport { Store } from '@ngxs/store';\nimport { isStateOperator } from '@ngxs/store/operators';\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass HmrInitAction {\r\n    /**\r\n     * @param {?} payload\r\n     */\r\n    constructor(payload) {\r\n        this.payload = payload;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    static get type() {\r\n        // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n        return '@@HMR_INIT';\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    HmrInitAction.prototype.payload;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass HmrBeforeDestroyAction {\r\n    /**\r\n     * @param {?} payload\r\n     */\r\n    constructor(payload) {\r\n        this.payload = payload;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    static get type() {\r\n        // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n        return '@@HMR_BEFORE_DESTROY';\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    HmrBeforeDestroyAction.prototype.payload;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T, S\r\n */\r\nclass HmrStateContextFactory {\r\n    /**\r\n     * @param {?} module\r\n     */\r\n    constructor(module) {\r\n        /** @type {?} */\r\n        const store = module.injector.get(Store, undefined);\r\n        if (!store) {\r\n            throw new Error('Store not found, maybe you forgot to import the NgxsModule');\r\n        }\r\n        this.store = store;\r\n    }\r\n    /**\r\n     * \\@description\r\n     * must be taken out into  \\@ngxs/store/internals\r\n     * @return {?}\r\n     */\r\n    createStateContext() {\r\n        return {\r\n            dispatch: (/**\r\n             * @param {?} actions\r\n             * @return {?}\r\n             */\r\n            actions => (/** @type {?} */ (this.store)).dispatch(actions)),\r\n            getState: (/**\r\n             * @return {?}\r\n             */\r\n            () => (/** @type {?} */ ((/** @type {?} */ (this.store)).snapshot()))),\r\n            setState: (/**\r\n             * @param {?} val\r\n             * @return {?}\r\n             */\r\n            val => {\r\n                if (isStateOperator(val)) {\r\n                    /** @type {?} */\r\n                    const currentState = (/** @type {?} */ (this.store)).snapshot();\r\n                    val = val(currentState);\r\n                }\r\n                (/** @type {?} */ (this.store)).reset(val);\r\n                return (/** @type {?} */ (val));\r\n            }),\r\n            patchState: (/**\r\n             * @param {?} val\r\n             * @return {?}\r\n             */\r\n            val => {\r\n                /** @type {?} */\r\n                const currentState = (/** @type {?} */ (this.store)).snapshot();\r\n                /** @type {?} */\r\n                const newState = Object.assign({}, currentState, ((/** @type {?} */ (val))));\r\n                (/** @type {?} */ (this.store)).reset(newState);\r\n                return newState;\r\n            })\r\n        };\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    HmrStateContextFactory.prototype.store;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass HmrOptionBuilder {\r\n    /**\r\n     * @param {?} __0\r\n     */\r\n    constructor({ deferTime, autoClearLogs }) {\r\n        this.deferTime = deferTime || 100;\r\n        this.autoClearLogs = autoClearLogs === undefined ? true : autoClearLogs;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    clearLogs() {\r\n        if (this.autoClearLogs) {\r\n            console.clear();\r\n        }\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    HmrOptionBuilder.prototype.deferTime;\r\n    /** @type {?} */\r\n    HmrOptionBuilder.prototype.autoClearLogs;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T, S\r\n */\r\nclass HmrLifecycle {\r\n    /**\r\n     * @param {?} ngAppModule\r\n     * @param {?} bootstrap\r\n     * @param {?} storage\r\n     * @param {?} context\r\n     * @param {?} options\r\n     */\r\n    constructor(ngAppModule, bootstrap, storage, context, options) {\r\n        this.ngAppModule = ngAppModule;\r\n        this.bootstrap = bootstrap;\r\n        this.storage = storage;\r\n        this.context = context;\r\n        this.options = options;\r\n    }\r\n    /**\r\n     * @param {?} hmrAfterOnInit\r\n     * @return {?}\r\n     */\r\n    hmrNgxsStoreOnInit(hmrAfterOnInit) {\r\n        /** @type {?} */\r\n        let moduleHmrInit = this.getModuleHmrInitCallback();\r\n        moduleHmrInit = moduleHmrInit.bind(this.ngAppModule);\r\n        this.stateEventLoop((/**\r\n         * @param {?} ctx\r\n         * @param {?} state\r\n         * @return {?}\r\n         */\r\n        (ctx, state) => {\r\n            moduleHmrInit(ctx, state);\r\n            hmrAfterOnInit(ctx, state);\r\n        }));\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    getModuleHmrInitCallback() {\r\n        if (typeof this.ngAppModule.hmrNgxsStoreOnInit === 'function') {\r\n            return this.ngAppModule.hmrNgxsStoreOnInit;\r\n        }\r\n        return (/**\r\n         * @param {?} ctx\r\n         * @param {?} state\r\n         * @return {?}\r\n         */\r\n        function defaultModuleHmrInit(ctx, state) {\r\n            ctx.patchState(state);\r\n        });\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    hmrNgxsStoreBeforeOnDestroy() {\r\n        /** @type {?} */\r\n        let state = {};\r\n        /** @type {?} */\r\n        const ctx = this.context.createStateContext();\r\n        if (typeof this.ngAppModule.hmrNgxsStoreBeforeOnDestroy === 'function') {\r\n            state = this.ngAppModule.hmrNgxsStoreBeforeOnDestroy(ctx);\r\n        }\r\n        else {\r\n            state = ctx.getState();\r\n        }\r\n        ctx.dispatch(new HmrBeforeDestroyAction(state));\r\n        return state;\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    stateEventLoop(callback) {\r\n        if (!this.storage.hasData())\r\n            return;\r\n        /** @type {?} */\r\n        const appBootstrapped$ = this.bootstrap.appBootstrapped$;\r\n        /** @type {?} */\r\n        const state$ = this.context.store.select((/**\r\n         * @param {?} state\r\n         * @return {?}\r\n         */\r\n        state => state));\r\n        appBootstrapped$.subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            /** @type {?} */\r\n            let eventId;\r\n            /** @type {?} */\r\n            const storeEventId = state$.subscribe((/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                // setTimeout used for zone detection after set hmr state\r\n                clearInterval(eventId);\r\n                eventId = window.setTimeout((/**\r\n                 * @return {?}\r\n                 */\r\n                () => {\r\n                    // close check on the message queue\r\n                    storeEventId.unsubscribe();\r\n                    // if events are no longer running on the call stack,\r\n                    // then we can update the state\r\n                    callback(this.context.createStateContext(), (/** @type {?} */ (this.storage.snapshot)));\r\n                }), this.options.deferTime);\r\n            }));\r\n        }));\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HmrLifecycle.prototype.ngAppModule;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HmrLifecycle.prototype.bootstrap;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HmrLifecycle.prototype.storage;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HmrLifecycle.prototype.context;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HmrLifecycle.prototype.options;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T, S\r\n */\r\nclass HmrManager {\r\n    /**\r\n     * @param {?} options\r\n     * @param {?} storage\r\n     */\r\n    constructor(options, storage) {\r\n        this.storage = storage;\r\n        this.optionsBuilder = new HmrOptionBuilder(options);\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    get applicationRef() {\r\n        return this.ngModule.injector.get(ApplicationRef);\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    get bootstrap() {\r\n        return this.ngModule.injector.get(NgxsBootstrapper);\r\n    }\r\n    /**\r\n     * @param {?} bootstrapFn\r\n     * @param {?} tick\r\n     * @return {?}\r\n     */\r\n    hmrModule(bootstrapFn, tick) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            InitialState.set(this.storage.snapshot);\r\n            this.ngModule = yield bootstrapFn();\r\n            this.context = new HmrStateContextFactory(this.ngModule);\r\n            this.lifecycle = this.createLifecycle();\r\n            tick();\r\n            InitialState.pop();\r\n            return this.ngModule;\r\n        });\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    beforeModuleBootstrap() {\r\n        this.lifecycle.hmrNgxsStoreOnInit((/**\r\n         * @param {?} ctx\r\n         * @param {?} state\r\n         * @return {?}\r\n         */\r\n        (ctx, state) => {\r\n            ctx.dispatch(new HmrInitAction(state));\r\n        }));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    beforeModuleOnDestroy() {\r\n        this.optionsBuilder.clearLogs();\r\n        return this.lifecycle.hmrNgxsStoreBeforeOnDestroy();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    createNewModule() {\r\n        /** @type {?} */\r\n        const removeOldHosts = this.cloneHostsBeforeDestroy();\r\n        this.removeNgStyles();\r\n        this.ngModule.destroy();\r\n        removeOldHosts();\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    createLifecycle() {\r\n        return new HmrLifecycle(this.ngModule.instance, this.bootstrap, this.storage, this.context, this.optionsBuilder);\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    cloneHostsBeforeDestroy() {\r\n        /** @type {?} */\r\n        const elements = this.applicationRef.components.map((/**\r\n         * @param {?} component\r\n         * @return {?}\r\n         */\r\n        (component) => component.location.nativeElement));\r\n        /** @type {?} */\r\n        const removableList = elements.map((/**\r\n         * @param {?} componentNode\r\n         * @return {?}\r\n         */\r\n        (componentNode) => {\r\n            /** @type {?} */\r\n            const newNode = document.createElement(componentNode.tagName);\r\n            /** @type {?} */\r\n            const parentNode = (/** @type {?} */ (componentNode.parentNode));\r\n            /** @type {?} */\r\n            const currentDisplay = newNode.style.display;\r\n            newNode.style.display = 'none';\r\n            parentNode.insertBefore(newNode, componentNode);\r\n            return (/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                newNode.style.display = currentDisplay;\r\n                try {\r\n                    parentNode.removeChild(componentNode);\r\n                }\r\n                catch (_a) { }\r\n            });\r\n        }));\r\n        return (/**\r\n         * @return {?}\r\n         */\r\n        function removeOldHosts() {\r\n            removableList.forEach((/**\r\n             * @param {?} removeOldHost\r\n             * @return {?}\r\n             */\r\n            (removeOldHost) => removeOldHost()));\r\n        });\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    removeNgStyles() {\r\n        /** @type {?} */\r\n        const head = (/** @type {?} */ (document.head));\r\n        /** @type {?} */\r\n        const styles = Array.from((/** @type {?} */ (head)).querySelectorAll('style'));\r\n        styles\r\n            .filter((/**\r\n         * @param {?} style\r\n         * @return {?}\r\n         */\r\n        (style) => style.innerText.includes('_ng')))\r\n            .map((/**\r\n         * @param {?} style\r\n         * @return {?}\r\n         */\r\n        (style) => (/** @type {?} */ (head)).removeChild(style)));\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    HmrManager.prototype.storage;\r\n    /** @type {?} */\r\n    HmrManager.prototype.context;\r\n    /** @type {?} */\r\n    HmrManager.prototype.lifecycle;\r\n    /** @type {?} */\r\n    HmrManager.prototype.optionsBuilder;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HmrManager.prototype.ngModule;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template S\r\n */\r\nclass HmrStorage {\r\n    /**\r\n     * @param {?=} _snapshot\r\n     */\r\n    constructor(_snapshot = {}) {\r\n        this._snapshot = _snapshot;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    hasData() {\r\n        return Object.keys(this._snapshot).length > 0;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get snapshot() {\r\n        return this._snapshot;\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HmrStorage.prototype._snapshot;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction setHmrReloadedTo(value) {\r\n    if (window[\"NGXS_HMR_LIFECYCLE_STATUS\" /* Status */]) {\r\n        window[\"NGXS_HMR_LIFECYCLE_STATUS\" /* Status */].hmrReloaded = value;\r\n    }\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction markApplicationAsHmrReloaded() {\r\n    window[\"NGXS_HMR_LIFECYCLE_STATUS\" /* Status */] = window[\"NGXS_HMR_LIFECYCLE_STATUS\" /* Status */] || {\r\n        hmrReloaded: false\r\n    };\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T\r\n * @param {?} webpackModule\r\n * @param {?} bootstrapFn\r\n * @param {?=} options\r\n * @return {?}\r\n */\r\nfunction hmr(webpackModule, bootstrapFn, options = {}) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        if (!webpackModule.hot) {\r\n            console.error('Are you using the --hmr flag for ng serve?');\r\n            throw new Error('HMR is not enabled for webpack-dev-server!');\r\n        }\r\n        markApplicationAsHmrReloaded();\r\n        webpackModule.hot.accept();\r\n        /**\r\n         * @record\r\n         */\r\n        function HmrDataTransfer() { }\r\n        if (false) {\r\n            /** @type {?|undefined} */\r\n            HmrDataTransfer.prototype.snapshot;\r\n        }\r\n        /** @type {?} */\r\n        const dataTransfer = webpackModule.hot.data || {};\r\n        /** @type {?} */\r\n        const storage = new HmrStorage(dataTransfer.snapshot || {});\r\n        /** @type {?} */\r\n        const manager = new HmrManager(options, storage);\r\n        return yield manager.hmrModule(bootstrapFn, (/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            manager.beforeModuleBootstrap();\r\n            (/** @type {?} */ (webpackModule.hot)).dispose((/**\r\n             * @param {?} data\r\n             * @return {?}\r\n             */\r\n            (data) => {\r\n                setHmrReloadedTo(true);\r\n                data.snapshot = manager.beforeModuleOnDestroy();\r\n                manager.createNewModule();\r\n            }));\r\n        }));\r\n    });\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @return {?}\r\n */\r\nfunction hmrIsReloaded() {\r\n    return !!(window[\"NGXS_HMR_LIFECYCLE_STATUS\" /* Status */] && window[\"NGXS_HMR_LIFECYCLE_STATUS\" /* Status */].hmrReloaded);\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { HmrBeforeDestroyAction, HmrInitAction, hmr, hmrIsReloaded };\n\n//# sourceMappingURL=ngxs-hmr-plugin.js.map"]}