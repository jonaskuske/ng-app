{"version":3,"sources":["webpack:///node_modules/@ngxs/hmr-plugin/__ivy_ngcc__/fesm2015/ngxs-hmr-plugin.js.pre-build-optimizer.js"],"names":["__webpack_require__","r","__webpack_exports__","d","HmrBeforeDestroyAction","HmrInitAction","hmr","hmrIsReloaded","tslib__WEBPACK_IMPORTED_MODULE_0__","_angular_core__WEBPACK_IMPORTED_MODULE_1__","_ngxs_store_internals__WEBPACK_IMPORTED_MODULE_2__","_ngxs_store__WEBPACK_IMPORTED_MODULE_3__","_ngxs_store_operators__WEBPACK_IMPORTED_MODULE_4__","payload","this","HmrStateContextFactory","module","store","injector","get","k","Error","_this","dispatch","actions","getState","snapshot","setState","val","Object","a","reset","patchState","currentState","newState","assign","HmrOptionBuilder","_ref","autoClearLogs","deferTime","console","clear","HmrLifecycle","ngAppModule","bootstrap","storage","context","options","hmrAfterOnInit","moduleHmrInit","getModuleHmrInitCallback","bind","stateEventLoop","ctx","state","hmrNgxsStoreOnInit","createStateContext","hmrNgxsStoreBeforeOnDestroy","callback","hasData","appBootstrapped$","state$","select","subscribe","eventId","storeEventId","clearInterval","window","setTimeout","unsubscribe","HmrManager","optionsBuilder","bootstrapFn","tick","regeneratorRuntime","mark","_callee","wrap","_context","prev","next","ngModule","b","set","sent","lifecycle","createLifecycle","pop","abrupt","stop","clearLogs","removeOldHosts","cloneHostsBeforeDestroy","removeNgStyles","destroy","instance","removableList","applicationRef","components","map","component","location","nativeElement","componentNode","newNode","document","createElement","tagName","parentNode","currentDisplay","style","display","insertBefore","removeChild","_a","forEach","removeOldHost","head","Array","from","querySelectorAll","filter","innerText","includes","g","e","HmrStorage","_snapshot","arguments","length","undefined","_classCallCheck","keys","webpackModule","_callee2","manager","_context2","hot","error","NGXS_HMR_LIFECYCLE_STATUS","hmrReloaded","accept","data","hmrModule","beforeModuleBootstrap","dispose","beforeModuleOnDestroy","createNewModule"],"mappings":"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","file":"ngxs-hmr-plugin-es5.93e98974faf45ef720f3.js","sourcesContent":["import { __awaiter } from 'tslib';\nimport { ApplicationRef } from '@angular/core';\nimport { NgxsBootstrapper, InitialState } from '@ngxs/store/internals';\nimport { Store } from '@ngxs/store';\nimport { isStateOperator } from '@ngxs/store/operators';\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass HmrInitAction {\r\n    /**\r\n     * @param {?} payload\r\n     */\r\n    constructor(payload) {\r\n        this.payload = payload;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    static get type() {\r\n        // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n        return '@@HMR_INIT';\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    HmrInitAction.prototype.payload;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass HmrBeforeDestroyAction {\r\n    /**\r\n     * @param {?} payload\r\n     */\r\n    constructor(payload) {\r\n        this.payload = payload;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    static get type() {\r\n        // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n        return '@@HMR_BEFORE_DESTROY';\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    HmrBeforeDestroyAction.prototype.payload;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T, S\r\n */\r\nclass HmrStateContextFactory {\r\n    /**\r\n     * @param {?} module\r\n     */\r\n    constructor(module) {\r\n        /** @type {?} */\r\n        const store = module.injector.get(Store, undefined);\r\n        if (!store) {\r\n            throw new Error('Store not found, maybe you forgot to import the NgxsModule');\r\n        }\r\n        this.store = store;\r\n    }\r\n    /**\r\n     * \\@description\r\n     * must be taken out into  \\@ngxs/store/internals\r\n     * @return {?}\r\n     */\r\n    createStateContext() {\r\n        return {\r\n            dispatch: (/**\r\n             * @param {?} actions\r\n             * @return {?}\r\n             */\r\n            actions => (/** @type {?} */ (this.store)).dispatch(actions)),\r\n            getState: (/**\r\n             * @return {?}\r\n             */\r\n            () => (/** @type {?} */ ((/** @type {?} */ (this.store)).snapshot()))),\r\n            setState: (/**\r\n             * @param {?} val\r\n             * @return {?}\r\n             */\r\n            val => {\r\n                if (isStateOperator(val)) {\r\n                    /** @type {?} */\r\n                    const currentState = (/** @type {?} */ (this.store)).snapshot();\r\n                    val = val(currentState);\r\n                }\r\n                (/** @type {?} */ (this.store)).reset(val);\r\n                return (/** @type {?} */ (val));\r\n            }),\r\n            patchState: (/**\r\n             * @param {?} val\r\n             * @return {?}\r\n             */\r\n            val => {\r\n                /** @type {?} */\r\n                const currentState = (/** @type {?} */ (this.store)).snapshot();\r\n                /** @type {?} */\r\n                const newState = Object.assign({}, currentState, ((/** @type {?} */ (val))));\r\n                (/** @type {?} */ (this.store)).reset(newState);\r\n                return newState;\r\n            })\r\n        };\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    HmrStateContextFactory.prototype.store;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass HmrOptionBuilder {\r\n    /**\r\n     * @param {?} __0\r\n     */\r\n    constructor({ deferTime, autoClearLogs }) {\r\n        this.deferTime = deferTime || 100;\r\n        this.autoClearLogs = autoClearLogs === undefined ? true : autoClearLogs;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    clearLogs() {\r\n        if (this.autoClearLogs) {\r\n            console.clear();\r\n        }\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    HmrOptionBuilder.prototype.deferTime;\r\n    /** @type {?} */\r\n    HmrOptionBuilder.prototype.autoClearLogs;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T, S\r\n */\r\nclass HmrLifecycle {\r\n    /**\r\n     * @param {?} ngAppModule\r\n     * @param {?} bootstrap\r\n     * @param {?} storage\r\n     * @param {?} context\r\n     * @param {?} options\r\n     */\r\n    constructor(ngAppModule, bootstrap, storage, context, options) {\r\n        this.ngAppModule = ngAppModule;\r\n        this.bootstrap = bootstrap;\r\n        this.storage = storage;\r\n        this.context = context;\r\n        this.options = options;\r\n    }\r\n    /**\r\n     * @param {?} hmrAfterOnInit\r\n     * @return {?}\r\n     */\r\n    hmrNgxsStoreOnInit(hmrAfterOnInit) {\r\n        /** @type {?} */\r\n        let moduleHmrInit = this.getModuleHmrInitCallback();\r\n        moduleHmrInit = moduleHmrInit.bind(this.ngAppModule);\r\n        this.stateEventLoop((/**\r\n         * @param {?} ctx\r\n         * @param {?} state\r\n         * @return {?}\r\n         */\r\n        (ctx, state) => {\r\n            moduleHmrInit(ctx, state);\r\n            hmrAfterOnInit(ctx, state);\r\n        }));\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    getModuleHmrInitCallback() {\r\n        if (typeof this.ngAppModule.hmrNgxsStoreOnInit === 'function') {\r\n            return this.ngAppModule.hmrNgxsStoreOnInit;\r\n        }\r\n        return (/**\r\n         * @param {?} ctx\r\n         * @param {?} state\r\n         * @return {?}\r\n         */\r\n        function defaultModuleHmrInit(ctx, state) {\r\n            ctx.patchState(state);\r\n        });\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    hmrNgxsStoreBeforeOnDestroy() {\r\n        /** @type {?} */\r\n        let state = {};\r\n        /** @type {?} */\r\n        const ctx = this.context.createStateContext();\r\n        if (typeof this.ngAppModule.hmrNgxsStoreBeforeOnDestroy === 'function') {\r\n            state = this.ngAppModule.hmrNgxsStoreBeforeOnDestroy(ctx);\r\n        }\r\n        else {\r\n            state = ctx.getState();\r\n        }\r\n        ctx.dispatch(new HmrBeforeDestroyAction(state));\r\n        return state;\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    stateEventLoop(callback) {\r\n        if (!this.storage.hasData())\r\n            return;\r\n        /** @type {?} */\r\n        const appBootstrapped$ = this.bootstrap.appBootstrapped$;\r\n        /** @type {?} */\r\n        const state$ = this.context.store.select((/**\r\n         * @param {?} state\r\n         * @return {?}\r\n         */\r\n        state => state));\r\n        appBootstrapped$.subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            /** @type {?} */\r\n            let eventId;\r\n            /** @type {?} */\r\n            const storeEventId = state$.subscribe((/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                // setTimeout used for zone detection after set hmr state\r\n                clearInterval(eventId);\r\n                eventId = window.setTimeout((/**\r\n                 * @return {?}\r\n                 */\r\n                () => {\r\n                    // close check on the message queue\r\n                    storeEventId.unsubscribe();\r\n                    // if events are no longer running on the call stack,\r\n                    // then we can update the state\r\n                    callback(this.context.createStateContext(), (/** @type {?} */ (this.storage.snapshot)));\r\n                }), this.options.deferTime);\r\n            }));\r\n        }));\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HmrLifecycle.prototype.ngAppModule;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HmrLifecycle.prototype.bootstrap;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HmrLifecycle.prototype.storage;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HmrLifecycle.prototype.context;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HmrLifecycle.prototype.options;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T, S\r\n */\r\nclass HmrManager {\r\n    /**\r\n     * @param {?} options\r\n     * @param {?} storage\r\n     */\r\n    constructor(options, storage) {\r\n        this.storage = storage;\r\n        this.optionsBuilder = new HmrOptionBuilder(options);\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    get applicationRef() {\r\n        return this.ngModule.injector.get(ApplicationRef);\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    get bootstrap() {\r\n        return this.ngModule.injector.get(NgxsBootstrapper);\r\n    }\r\n    /**\r\n     * @param {?} bootstrapFn\r\n     * @param {?} tick\r\n     * @return {?}\r\n     */\r\n    hmrModule(bootstrapFn, tick) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            InitialState.set(this.storage.snapshot);\r\n            this.ngModule = yield bootstrapFn();\r\n            this.context = new HmrStateContextFactory(this.ngModule);\r\n            this.lifecycle = this.createLifecycle();\r\n            tick();\r\n            InitialState.pop();\r\n            return this.ngModule;\r\n        });\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    beforeModuleBootstrap() {\r\n        this.lifecycle.hmrNgxsStoreOnInit((/**\r\n         * @param {?} ctx\r\n         * @param {?} state\r\n         * @return {?}\r\n         */\r\n        (ctx, state) => {\r\n            ctx.dispatch(new HmrInitAction(state));\r\n        }));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    beforeModuleOnDestroy() {\r\n        this.optionsBuilder.clearLogs();\r\n        return this.lifecycle.hmrNgxsStoreBeforeOnDestroy();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    createNewModule() {\r\n        /** @type {?} */\r\n        const removeOldHosts = this.cloneHostsBeforeDestroy();\r\n        this.removeNgStyles();\r\n        this.ngModule.destroy();\r\n        removeOldHosts();\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    createLifecycle() {\r\n        return new HmrLifecycle(this.ngModule.instance, this.bootstrap, this.storage, this.context, this.optionsBuilder);\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    cloneHostsBeforeDestroy() {\r\n        /** @type {?} */\r\n        const elements = this.applicationRef.components.map((/**\r\n         * @param {?} component\r\n         * @return {?}\r\n         */\r\n        (component) => component.location.nativeElement));\r\n        /** @type {?} */\r\n        const removableList = elements.map((/**\r\n         * @param {?} componentNode\r\n         * @return {?}\r\n         */\r\n        (componentNode) => {\r\n            /** @type {?} */\r\n            const newNode = document.createElement(componentNode.tagName);\r\n            /** @type {?} */\r\n            const parentNode = (/** @type {?} */ (componentNode.parentNode));\r\n            /** @type {?} */\r\n            const currentDisplay = newNode.style.display;\r\n            newNode.style.display = 'none';\r\n            parentNode.insertBefore(newNode, componentNode);\r\n            return (/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                newNode.style.display = currentDisplay;\r\n                try {\r\n                    parentNode.removeChild(componentNode);\r\n                }\r\n                catch (_a) { }\r\n            });\r\n        }));\r\n        return (/**\r\n         * @return {?}\r\n         */\r\n        function removeOldHosts() {\r\n            removableList.forEach((/**\r\n             * @param {?} removeOldHost\r\n             * @return {?}\r\n             */\r\n            (removeOldHost) => removeOldHost()));\r\n        });\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    removeNgStyles() {\r\n        /** @type {?} */\r\n        const head = (/** @type {?} */ (document.head));\r\n        /** @type {?} */\r\n        const styles = Array.from((/** @type {?} */ (head)).querySelectorAll('style'));\r\n        styles\r\n            .filter((/**\r\n         * @param {?} style\r\n         * @return {?}\r\n         */\r\n        (style) => style.innerText.includes('_ng')))\r\n            .map((/**\r\n         * @param {?} style\r\n         * @return {?}\r\n         */\r\n        (style) => (/** @type {?} */ (head)).removeChild(style)));\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    HmrManager.prototype.storage;\r\n    /** @type {?} */\r\n    HmrManager.prototype.context;\r\n    /** @type {?} */\r\n    HmrManager.prototype.lifecycle;\r\n    /** @type {?} */\r\n    HmrManager.prototype.optionsBuilder;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HmrManager.prototype.ngModule;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template S\r\n */\r\nclass HmrStorage {\r\n    /**\r\n     * @param {?=} _snapshot\r\n     */\r\n    constructor(_snapshot = {}) {\r\n        this._snapshot = _snapshot;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    hasData() {\r\n        return Object.keys(this._snapshot).length > 0;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get snapshot() {\r\n        return this._snapshot;\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    HmrStorage.prototype._snapshot;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction setHmrReloadedTo(value) {\r\n    if (window[\"NGXS_HMR_LIFECYCLE_STATUS\" /* Status */]) {\r\n        window[\"NGXS_HMR_LIFECYCLE_STATUS\" /* Status */].hmrReloaded = value;\r\n    }\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction markApplicationAsHmrReloaded() {\r\n    window[\"NGXS_HMR_LIFECYCLE_STATUS\" /* Status */] = window[\"NGXS_HMR_LIFECYCLE_STATUS\" /* Status */] || {\r\n        hmrReloaded: false\r\n    };\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T\r\n * @param {?} webpackModule\r\n * @param {?} bootstrapFn\r\n * @param {?=} options\r\n * @return {?}\r\n */\r\nfunction hmr(webpackModule, bootstrapFn, options = {}) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        if (!webpackModule.hot) {\r\n            console.error('Are you using the --hmr flag for ng serve?');\r\n            throw new Error('HMR is not enabled for webpack-dev-server!');\r\n        }\r\n        markApplicationAsHmrReloaded();\r\n        webpackModule.hot.accept();\r\n        /**\r\n         * @record\r\n         */\r\n        function HmrDataTransfer() { }\r\n        if (false) {\r\n            /** @type {?|undefined} */\r\n            HmrDataTransfer.prototype.snapshot;\r\n        }\r\n        /** @type {?} */\r\n        const dataTransfer = webpackModule.hot.data || {};\r\n        /** @type {?} */\r\n        const storage = new HmrStorage(dataTransfer.snapshot || {});\r\n        /** @type {?} */\r\n        const manager = new HmrManager(options, storage);\r\n        return yield manager.hmrModule(bootstrapFn, (/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            manager.beforeModuleBootstrap();\r\n            (/** @type {?} */ (webpackModule.hot)).dispose((/**\r\n             * @param {?} data\r\n             * @return {?}\r\n             */\r\n            (data) => {\r\n                setHmrReloadedTo(true);\r\n                data.snapshot = manager.beforeModuleOnDestroy();\r\n                manager.createNewModule();\r\n            }));\r\n        }));\r\n    });\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @return {?}\r\n */\r\nfunction hmrIsReloaded() {\r\n    return !!(window[\"NGXS_HMR_LIFECYCLE_STATUS\" /* Status */] && window[\"NGXS_HMR_LIFECYCLE_STATUS\" /* Status */].hmrReloaded);\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { HmrBeforeDestroyAction, HmrInitAction, hmr, hmrIsReloaded };\n\n//# sourceMappingURL=ngxs-hmr-plugin.js.map"]}