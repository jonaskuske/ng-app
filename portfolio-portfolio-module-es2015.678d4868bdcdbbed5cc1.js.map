{"version":3,"sources":["webpack:///src/app/portfolio/store/portfolio.actions.ts","webpack:///src/app/shared/util/index.ts","webpack:///src/app/shared/util/store.ts","webpack:///src/app/portfolio/posts.service.ts","webpack:///src/app/portfolio/store/portfolio.state.ts","webpack:///src/app/shared/store/selectors.ts","webpack:///src/app/portfolio/store/portfolio.selectors.ts","webpack:///src/app/shared/components/loading-spinner/loading-spinner.component.ts","webpack:///src/app/shared/components/loading-spinner/loading-spinner.component.html","webpack:///src/app/portfolio/views/post-master/post-master.component.html","webpack:///src/app/portfolio/views/post-master/post-master.component.ts","webpack:///node_modules/rxjs/_esm2015/internal/operators/withLatestFrom.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/skipWhile.js","webpack:///node_modules/@angular/youtube-player/__ivy_ngcc__/fesm2015/youtube-player.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/combineLatest.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/publish.js","webpack:///src/app/portfolio/components/showcase/showcase.component.html","webpack:///src/app/portfolio/components/showcase/showcase.component.ts","webpack:///src/app/portfolio/components/briefing/briefing.component.html","webpack:///src/app/portfolio/components/briefing/briefing.component.ts","webpack:///src/app/portfolio/views/post-detail/post-detail.component.html","webpack:///src/app/portfolio/portfolio.module.routing.ts","webpack:///src/app/portfolio/views/post-detail/post-detail.component.ts","webpack:///src/app/shared/components/loading-spinner/loading-spinner.module.ts","webpack:///src/app/portfolio/views/post-master/post-master.module.ts","webpack:///src/app/portfolio/views/post-detail/post-detail.module.ts","webpack:///src/app/portfolio/portfolio.module.ts"],"names":["GetPost","id","type","GetPostSuccess","post","GetPostError","error","GetPostPage","page","GetPostPageSuccess","payload","GetPostPageError","isArray","item","Array","serializePageQuery","URLSearchParams","params","createEntity","entity","lastUpdatedAt","Date","toISOString","isFetching","isRefreshing","isError","uniq","state","some","i","includes","concat","filter","updateEntity","prevEntity","entities","apiUrl","environment","headersGetTotal","headers","Number","get","headersGetTotalPages","getPostPageFromResponse","response","body","total","totalPages","PostsService","http","this","perPage","observe","pipe","map","initialState","ids","pagination","PortfolioState","postsService","store","ctx","dispatch","existing","getState","setState","toString","getPost","catchError","console","query","existingQuery","pages","patchState","getPosts","pageIds","reduce","obj","p","name","defaults","stateClass","Object","values","keys","PortfolioSelectors","options","getPageQuery","flat","getEntities","getEntityIds","posts","getEntityList","postQueryFn","LoadingSpinnerComponent","linebreakRegex","PostMasterComponent","posts$","postEntitiesByQueryFn$","postsForQuery","postEntities","query$","postQueryFn$","getPostQuery","isFetching$","q","loadPage","text","replace","length","slice","postEntitiesByQueryFn","withLatestFrom","args","source","project","pop","lift","WithLatestFromOperator","observables","subscriber","subscribe","OuterSubscriber","destination","super","toRespond","len","push","observable","add","subscribeToResult","outerValue","innerValue","outerIndex","innerIndex","innerSub","found","indexOf","splice","value","_tryProject","next","result","apply","err","SkipWhileOperator","predicate","Subscriber","skipping","index","tryCallPredicate","Boolean","_c0","YouTubePlayer","_ngZone","platformId","_videoId","BehaviorSubject","undefined","_height","_width","_startSeconds","_endSeconds","_suggestedQuality","ready","stateChange","apiChange","playbackQualityChange","playbackRateChange","_youtubeContainer","Subject","_destroyed","_isBrowser","window","videoId","height","width","startSeconds","endSeconds","suggestedQuality","iframeApiAvailableObs","of","YT","showBeforeIframeApiLoads","Error","iframeApiAvailableSubject","_existingApiReadyCallback","onYouTubeIframeAPIReady","run","take","startWith","playerObs","youtubeContainer","videoIdObs","widthObs","heightObs","events","ngZone","playerOptions","combineLatest","notifier","call","from","_","doneSkipping","scan","syncPlayerState","distinctUntilChanged","createEventsBoundInZone","onAbort","player","playerIsReady","destroy","Observable","emitter","aborted","resolved","onReady","event","target","removeEventListener","addEventListener","takeUntil","multicast","_player","_pendingPlayerState","_initializePlayer","setSize","suggestedQualityObs","setPlaybackQuality","startSecondsObs","endSecondsObs","destroyed","cueOptionsObs","filteredCueOptions","filterOnOther","getPlayerState","changedVideoId","changedPlayer","cueOptions","merge","cueVideoById","assign","connect","output","Map","forEach","observers","_runInZone","emit","nativeElement","complete","callback","playVideo","_getPendingState","playbackState","pauseVideo","stopVideo","seconds","allowSeekAhead","seekTo","seek","mute","muted","unMute","isMuted","volume","setVolume","getVolume","playbackRate","setPlaybackRate","getPlaybackRate","getAvailablePlaybackRates","getVideoLoadedFraction","getCurrentTime","getPlaybackQuality","getAvailableQualityLevels","getDuration","getVideoUrl","getVideoEmbedCode","ɵfac","t","ɵcmp","selectors","viewQuery","rf","_t","first","inputs","outputs","decls","vars","consts","template","encapsulation","changeDetection","container","videoOptions","newPlayer","runOutsideAngular","Player","otherObs","filterFn","other","YouTubePlayerModule","ɵmod","ɵinj","factory","ShowcaseComponent","url","opts","fuzzy","test","patterns","exec","tokens","split","video","tag","document","createElement","src","appendChild","BriefingComponent","PortfolioRoutes","forChild","path","component","PostDetailComponent","route","rawId","snapshot","paramMap","postEntity$","postEntityByIdFn$","postEntityById","post$","scrollIntoView","block","behavior","postEntityByIdFn","LoadingSpinnerModule","PostMasterModule","PostDetailModule","PortfolioModule","forFeature"],"mappings":"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","file":"x","sourcesContent":["import { Page } from '../../shared/models'\nimport { Post } from '../models/post.model'\nimport { PostRequestOptions } from '../posts.service'\n\nexport class GetPost {\n  static readonly type = '[Portfolio] Get Post'\n  constructor(public id: number) {}\n}\nexport class GetPostSuccess {\n  static readonly type = '[Portfolio API] Get Post Success'\n  constructor(public post: Post) {}\n}\nexport class GetPostError {\n  static readonly type = '[Portfolio API] Get Post Error'\n  constructor(public id: number, public error: Error) {}\n}\n\nexport class GetPostPage {\n  static readonly type = '[Portfolio] Get Post Page'\n  constructor(public page: PostRequestOptions) {}\n}\nexport class GetPostPageSuccess {\n  static readonly type = '[Portfolio API] Get Post Page Success'\n  constructor(public page: PostRequestOptions, public payload: Page<Post>) {}\n}\nexport class GetPostPageError {\n  static readonly type = '[Portfolio API] Get Post Page Error'\n  constructor(public page: PostRequestOptions, public error: Error) {}\n}\n","export const isArray = (item: any): item is any[] => Array.isArray(item)\n\nexport const serializePageQuery = ({ page, ...params }: any) => `?${new URLSearchParams(params)}`\n\nexport const getYoutubeId = (url: string, opts = { fuzzy: true }) => {\n  if (!/youtu\\.?be/.test(url)) return null\n\n  // Look first for known patterns\n  let i: number\n  const patterns = [\n    /youtu\\.be\\/([^#&?]{11})/, // youtu.be/<id>\n    /\\?v=([^#&?]{11})/, // ?v=<id>\n    /&v=([^#&?]{11})/, // &v=<id>\n    /embed\\/([^#&?]{11})/, // embed/<id>\n    /\\/v\\/([^#&?]{11})/, // /v/<id>\n  ]\n\n  // If any pattern matches, return the ID\n  for (i = 0; i < patterns.length; ++i) {\n    if (patterns[i].test(url)) return patterns[i].exec(url)[1]\n  }\n\n  if (opts.fuzzy) {\n    // If that fails, break it apart by certain characters and look\n    // for the 11 character key\n    const tokens = url.split(/[/&?=#.\\s]/g)\n    for (i = 0; i < tokens.length; ++i) {\n      if (/^[^#&?]{11}$/.test(tokens[i])) return tokens[i]\n    }\n  }\n}\n","import { StateOperator } from '@ngxs/store'\nimport { patch, append } from '@ngxs/store/operators'\nimport { Entity, PaginatedEntities, EntityPartial } from '../models'\nimport { isArray } from '.'\n\nexport const createEntity = <T>(id: Entity<T>['id'], entity: T = null): Entity<T> => ({\n  id,\n  entity,\n  lastUpdatedAt: new Date().toISOString(),\n  isFetching: false,\n  isRefreshing: false,\n  isError: false,\n})\n\nexport function uniq(item: any | any[]): StateOperator<any[]> {\n  return (state: any[]) => {\n    const noUniq = isArray(item) ? item.some(i => !state.includes(i)) : state.includes(item)\n    if (noUniq) return state\n\n    return state.concat(isArray(item) ? item.filter(i => !state.includes(i)) : item)\n  }\n}\n\nexport function addEntity<T>(entity: Entity<T>): StateOperator<PaginatedEntities<T>> {\n  const id = entity.id.toString()\n  return patch<PaginatedEntities<T>>({ ids: uniq(id), entities: patch({ [id]: entity }) })\n}\n\nexport function addEntities<T>(payload: Entity<T>[]): StateOperator<PaginatedEntities<T>> {\n  const entities = payload.reduce((obj, entity) => ((obj[entity.id] = entity), obj), {})\n  return patch<PaginatedEntities<T>>({\n    ids: uniq(payload.map(p => p.id.toString())),\n    entities: patch(entities),\n  })\n}\n\nexport function updateEntity<T>(payload: EntityPartial<T>): StateOperator<PaginatedEntities<T>> {\n  return (state: PaginatedEntities<T>) => {\n    const prevEntity = state.entities[payload.id]\n    return {\n      ...state,\n      entities: { ...state.entities, [payload.id]: { ...prevEntity, ...payload } },\n    }\n  }\n}\n","import { Injectable } from '@angular/core'\nimport { HttpClient, HttpResponse, HttpHeaders } from '@angular/common/http'\nimport { map } from 'rxjs/operators'\n\nimport { environment } from 'src/environments/environment'\n\nimport { Page } from '../shared/models'\nimport { Post } from './models/post.model'\n\nexport interface PostRequestOptions {\n  page: number\n  perPage?: number\n}\n\nconst { apiUrl } = environment\n\nconst headersGetTotal = (headers: HttpHeaders) => Number(headers.get('x-wp-total'))\nconst headersGetTotalPages = (headers: HttpHeaders) => Number(headers.get('x-wp-totalpages'))\n\nconst getPostPageFromResponse = (response: HttpResponse<Post[]>): Page<Post> => {\n  const { body, headers } = response\n  return { body, total: headersGetTotal(headers), totalPages: headersGetTotalPages(headers) }\n}\n\n@Injectable({ providedIn: 'root' })\nexport class PostsService {\n  constructor(private http: HttpClient) {}\n\n  getPost(id: number) {\n    return this.http.get<Post>(`${apiUrl}posts/${id}`)\n  }\n\n  getPosts({ page, perPage = 10 }: PostRequestOptions) {\n    return this.http\n      .get<Post[]>(`${apiUrl}posts?per_page=${perPage}&page=${page}`, { observe: 'response' })\n      .pipe(map(getPostPageFromResponse))\n  }\n}\n","import { State, Action, StateContext, NgxsOnInit, Store } from '@ngxs/store'\nimport { map, catchError } from 'rxjs/operators'\nimport { PostsService } from '../posts.service'\nimport { patch } from '@ngxs/store/operators'\nimport { addEntity, addEntities, updateEntity, createEntity } from '../../shared/util/store'\nimport { serializePageQuery } from '../../shared/util'\nimport { PaginatedEntities } from '../../shared/models'\nimport { Post } from '../models/post.model'\nimport {\n  GetPost,\n  GetPostSuccess,\n  GetPostError,\n  GetPostPage,\n  GetPostPageSuccess,\n  GetPostPageError,\n} from './portfolio.actions'\nimport { Injectable } from '@angular/core'\n\nexport type PortfolioStateModel = PaginatedEntities<Post>\nexport type PortfolioStateContext = StateContext<PortfolioStateModel>\n\nconst initialState: PortfolioStateModel = { entities: {}, ids: [], pagination: {} }\n\n@State<PortfolioStateModel>({ name: 'portfolio', defaults: initialState })\n@Injectable()\nexport class PortfolioState implements NgxsOnInit {\n  constructor(private postsService: PostsService, private store: Store) {}\n\n  ngxsOnInit(ctx: PortfolioStateContext) {\n    ctx.dispatch(new GetPostPage({ page: 1, perPage: 8 }))\n  }\n\n  @Action(GetPost)\n  getPost(ctx: PortfolioStateContext, { id }: GetPost) {\n    const existing = ctx.getState().entities[id]\n    if (existing && !existing.isError) return ctx.dispatch(new GetPostSuccess(existing.entity))\n\n    ctx.setState(\n      addEntity<Post>({ ...createEntity<Post>(id), isFetching: true }),\n    )\n\n    return this.postsService.getPost(id).pipe(\n      map(response => ctx.dispatch(new GetPostSuccess(response))),\n      catchError(error => ctx.dispatch(new GetPostError(id, error))),\n    )\n  }\n\n  @Action(GetPostSuccess)\n  getPostSuccess(ctx: PortfolioStateContext, { post }: GetPostSuccess) {\n    ctx.setState(updateEntity<Post>(createEntity<Post>(post.id, post)))\n  }\n\n  @Action(GetPostError)\n  getPostError(ctx: PortfolioStateContext, { id, error }: GetPostError) {\n    ctx.setState(updateEntity({ id, isError: true, isFetching: false, isRefreshing: false }))\n    console.error(error)\n  }\n\n  @Action(GetPostPage)\n  getPostPage(ctx: PortfolioStateContext, { page }: GetPostPage) {\n    const state = ctx.getState()\n    const query = serializePageQuery(page)\n\n    const existingQuery = ctx.getState().pagination[query]\n    if (existingQuery && existingQuery.pages[page.page]) return\n    if (!existingQuery) {\n      ctx.patchState({\n        pagination: { ...state.pagination, [query]: { total: 0, totalPages: 0, pages: {} } },\n      })\n    }\n\n    ctx.setState(\n      patch({\n        pagination: patch({\n          [query]: patch({\n            pages: patch({ [page.page]: { ...createEntity(page.page), isFetching: true } }),\n          }),\n        }),\n      }),\n    )\n\n    return this.postsService.getPosts(page).pipe(\n      map(response => ctx.dispatch(new GetPostPageSuccess(page, response))),\n      catchError(error => ctx.dispatch(new GetPostPageError(page, error))),\n    )\n  }\n\n  @Action(GetPostPageSuccess)\n  getPostPageSuccess(ctx: PortfolioStateContext, { page, payload }: GetPostPageSuccess) {\n    const query = serializePageQuery(page)\n\n    const entities = payload.body.map(item => createEntity(item.id, item))\n    const pageIds = payload.body.map(item => item.id.toString())\n    ctx.setState(addEntities(entities))\n\n    ctx.setState(\n      patch({\n        pagination: patch({\n          [query]: patch({\n            total: payload.total,\n            totalPages: payload.totalPages,\n            pages: patch({ [page.page]: { ...createEntity(page.page, pageIds) } }),\n          }),\n        }),\n      }),\n    )\n  }\n\n  @Action(GetPostPageError)\n  getPostPageError(ctx: PortfolioStateContext, { page, error }: GetPostPageError) {\n    const query = serializePageQuery(page)\n    ctx.setState(\n      patch({\n        pagination: patch({\n          [query]: patch({\n            pages: patch({\n              [page.page]: patch({ isError: true, isRefreshing: false, isFetching: false }),\n            }),\n          }),\n        }),\n      }),\n    )\n    console.error(error)\n  }\n}\n","import { createSelector } from '@ngxs/store'\nimport { Entity } from '../models'\n\nexport class SharedSelectors {\n  static getEntities<T>(stateClass) {\n    return createSelector(\n      [stateClass],\n      state => state.entities as { [id: string]: Entity<T> },\n    )\n  }\n\n  static getEntityList<T>(stateClass) {\n    return createSelector(\n      [stateClass],\n      state => Object.values(state.entities) as Entity<T>[],\n    )\n  }\n\n  static getEntityIds(stateClass) {\n    return createSelector(\n      [stateClass],\n      state => Object.keys(state.entities),\n    )\n  }\n\n  static getEntityListByPageFn(stateClass) {\n    return (pageIds: number[]) => {\n      return createSelector(\n        [stateClass],\n        state => pageIds.map(id => state.entities[id]),\n      )\n    }\n  }\n}\n","import { Selector } from '@ngxs/store'\nimport { PortfolioState, PortfolioStateModel } from './portfolio.state'\nimport { Post } from '../models/post.model'\nimport { SharedSelectors } from 'src/app/shared/store/selectors'\nimport { PostRequestOptions } from '../posts.service'\nimport { serializePageQuery } from 'src/app/shared/util'\n\nexport class PortfolioSelectors {\n  static entities = SharedSelectors.getEntities<Post>(PortfolioState)\n  static ids = SharedSelectors.getEntityIds(PortfolioState)\n  static posts = SharedSelectors.getEntityList<Post>(PortfolioState)\n\n  @Selector([PortfolioState])\n  static pagination(state: PortfolioStateModel) {\n    return state.pagination\n  }\n  @Selector([PortfolioSelectors.entities])\n  static postEntityByIdFn(entities: ReturnType<typeof PortfolioSelectors.entities>) {\n    return (id: number) => entities[id]\n  }\n  @Selector([PortfolioSelectors.pagination])\n  static postQueryFn(pagination: ReturnType<typeof PortfolioSelectors.pagination>) {\n    return (options: PostRequestOptions) => pagination[serializePageQuery(options)]\n  }\n  @Selector([PortfolioSelectors.postQueryFn])\n  static postQueryPageFn(getPageQuery: ReturnType<typeof PortfolioSelectors.postQueryFn>) {\n    return (options: PostRequestOptions) => getPageQuery(options).pages[options.page]\n  }\n  @Selector([PortfolioSelectors.entities, PortfolioSelectors.postQueryFn])\n  static postEntitiesByQueryFn(\n    entities: ReturnType<typeof PortfolioSelectors.entities>,\n    getPageQuery: ReturnType<typeof PortfolioSelectors.postQueryFn>,\n  ) {\n    return (options: PostRequestOptions) => {\n      const pages = Object.values(getPageQuery(options).pages).filter(p => !p.isFetching)\n      const ids = pages.map(p => p.entity).flat()\n      return ids.map(id => entities[id])\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core'\n\n@Component({\n  selector: 'app-loading-spinner',\n  templateUrl: './loading-spinner.component.html',\n  styleUrls: ['./loading-spinner.component.css'],\n})\nexport class LoadingSpinnerComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n","<span class=\"post-detail__spinner\" style=\"font-style: normal;\" role=\"img\" aria-hidden=\"true\"\n  >⏳</span\n>\n","<h2>DMP Portfolio</h2>\n<ng-container *ngIf=\"(posts$ | async).length; else noPosts\">\n  <section *ngFor=\"let post of posts$ | async\">\n    <h3 [innerHTML]=\"post.title.rendered\"></h3>\n    <p [innerHTML]=\"getTeaser(post.acf.beschreibung)\"></p>\n    <a routerLink=\"{{ post.id }}\">Projekt ansehen →</a>\n    <hr />\n  </section>\n\n  <footer class=\"post-master__footer\">\n    <button\n      *ngIf=\"(query$ | async).totalPages > pagination.page && (isFetching$ | async) === false\"\n      (click)=\"requestNextPage()\"\n      type=\"button\"\n    >\n      Mehr laden...\n    </button>\n  </footer>\n</ng-container>\n\n<ng-template #noPosts>\n  <p *ngIf=\"(isFetching$ | async) === false\" class=\"post-master__status-msg\">\n    Keine Projekte vorhanden. <span aria-hidden=\"true\" style=\"font-style: normal\">🚫</span>\n  </p>\n</ng-template>\n\n<p *ngIf=\"isFetching$ | async\" class=\"post-master__status-msg\">\n  Projekte werden geladen... <app-loading-spinner></app-loading-spinner>\n</p>\n","import { Component, OnInit } from '@angular/core'\nimport { Select, Store } from '@ngxs/store'\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nimport { Post } from '../../models/post.model'\nimport { GetPostPage } from '../../store/portfolio.actions'\nimport { PortfolioSelectors } from '../../store/portfolio.selectors'\nimport { PostRequestOptions } from '../../posts.service'\n\nconst linebreakRegex = /<br\\s?\\/?>(<\\/br>)?/g\n\ntype PostQueryFn = ReturnType<typeof PortfolioSelectors.postQueryFn>\ntype EntitiesByQueryFn$ = Observable<ReturnType<typeof PortfolioSelectors.postEntitiesByQueryFn>>\n\n@Component({\n  selector: 'app-post-master',\n  templateUrl: './post-master.component.html',\n  styleUrls: ['./post-master.component.css'],\n})\nexport class PostMasterComponent implements OnInit {\n  @Select(PortfolioSelectors.postQueryFn) postQueryFn$: Observable<PostQueryFn>\n  @Select(PortfolioSelectors.postEntitiesByQueryFn) postEntitiesByQueryFn$: EntitiesByQueryFn$\n  pagination: PostRequestOptions = { page: 1, perPage: 8 }\n\n  posts$: Observable<Post[]>\n  query$: Observable<ReturnType<PostQueryFn>>\n  isFetching$: Observable<boolean>\n\n  constructor(private store: Store) {\n    this.posts$ = this.postEntitiesByQueryFn$.pipe(\n      map(postsForQuery => postsForQuery(this.pagination)),\n      map(postEntities => postEntities.map(p => p.entity)),\n    )\n    this.query$ = this.postQueryFn$.pipe(map(getPostQuery => getPostQuery(this.pagination)))\n    this.isFetching$ = this.query$.pipe(map(q => Object.values(q.pages).some(p => p.isFetching)))\n  }\n\n  ngOnInit() {\n    this.loadPage()\n  }\n  loadPage() {\n    this.store.dispatch(new GetPostPage(this.pagination))\n  }\n  requestNextPage() {\n    this.pagination.page++\n    this.loadPage()\n  }\n\n  getTeaser(text: string) {\n    text = text.replace(linebreakRegex, '')\n\n    if (text.length < 150) return text\n    return `${text.slice(0, 145)}...`\n  }\n}\n","import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function withLatestFrom(...args) {\n    return (source) => {\n        let project;\n        if (typeof args[args.length - 1] === 'function') {\n            project = args.pop();\n        }\n        const observables = args;\n        return source.lift(new WithLatestFromOperator(observables, project));\n    };\n}\nclass WithLatestFromOperator {\n    constructor(observables, project) {\n        this.observables = observables;\n        this.project = project;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n    }\n}\nclass WithLatestFromSubscriber extends OuterSubscriber {\n    constructor(destination, observables, project) {\n        super(destination);\n        this.observables = observables;\n        this.project = project;\n        this.toRespond = [];\n        const len = observables.length;\n        this.values = new Array(len);\n        for (let i = 0; i < len; i++) {\n            this.toRespond.push(i);\n        }\n        for (let i = 0; i < len; i++) {\n            let observable = observables[i];\n            this.add(subscribeToResult(this, observable, observable, i));\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        const toRespond = this.toRespond;\n        if (toRespond.length > 0) {\n            const found = toRespond.indexOf(outerIndex);\n            if (found !== -1) {\n                toRespond.splice(found, 1);\n            }\n        }\n    }\n    notifyComplete() {\n    }\n    _next(value) {\n        if (this.toRespond.length === 0) {\n            const args = [value, ...this.values];\n            if (this.project) {\n                this._tryProject(args);\n            }\n            else {\n                this.destination.next(args);\n            }\n        }\n    }\n    _tryProject(args) {\n        let result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    }\n}\n//# sourceMappingURL=withLatestFrom.js.map","import { Subscriber } from '../Subscriber';\nexport function skipWhile(predicate) {\n    return (source) => source.lift(new SkipWhileOperator(predicate));\n}\nclass SkipWhileOperator {\n    constructor(predicate) {\n        this.predicate = predicate;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n    }\n}\nclass SkipWhileSubscriber extends Subscriber {\n    constructor(destination, predicate) {\n        super(destination);\n        this.predicate = predicate;\n        this.skipping = true;\n        this.index = 0;\n    }\n    _next(value) {\n        const destination = this.destination;\n        if (this.skipping) {\n            this.tryCallPredicate(value);\n        }\n        if (!this.skipping) {\n            destination.next(value);\n        }\n    }\n    tryCallPredicate(value) {\n        try {\n            const result = this.predicate(value, this.index++);\n            this.skipping = Boolean(result);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    }\n}\n//# sourceMappingURL=skipWhile.js.map","import { EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, NgZone, Optional, Inject, PLATFORM_ID, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { BehaviorSubject, Subject, of, combineLatest, pipe, Observable, merge } from 'rxjs';\nimport { take, startWith, combineLatest as combineLatest$1, skipWhile, map, scan, distinctUntilChanged, flatMap, takeUntil, publish, withLatestFrom, filter } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/youtube-player/youtube-player.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nimport * as ɵngcc0 from '@angular/core';\n\nconst _c0 = [\"youtubeContainer\"];\nconst DEFAULT_PLAYER_WIDTH = 640;\n/** @type {?} */\nconst DEFAULT_PLAYER_HEIGHT = 390;\n/**\n * @record\n */\nfunction Player() { }\nif (false) {\n    /** @type {?|undefined} */\n    Player.prototype.videoId;\n}\n/**\n * Object used to store the state of the player if the\n * user tries to interact with the API before it has been loaded.\n * @record\n */\nfunction PendingPlayerState() { }\nif (false) {\n    /** @type {?|undefined} */\n    PendingPlayerState.prototype.playbackState;\n    /** @type {?|undefined} */\n    PendingPlayerState.prototype.playbackRate;\n    /** @type {?|undefined} */\n    PendingPlayerState.prototype.volume;\n    /** @type {?|undefined} */\n    PendingPlayerState.prototype.muted;\n    /** @type {?|undefined} */\n    PendingPlayerState.prototype.seek;\n}\n/**\n * Angular component that renders a YouTube player via the YouTube player\n * iframe API.\n * @see https://developers.google.com/youtube/iframe_api_reference\n */\nclass YouTubePlayer {\n    /**\n     * @param {?} _ngZone\n     * @param {?=} platformId\n     */\n    constructor(_ngZone, \n    /**\n     * @deprecated `platformId` parameter to become required.\n     * @breaking-change 10.0.0\n     */\n    platformId) {\n        this._ngZone = _ngZone;\n        this._videoId = new BehaviorSubject(undefined);\n        this._height = new BehaviorSubject(DEFAULT_PLAYER_HEIGHT);\n        this._width = new BehaviorSubject(DEFAULT_PLAYER_WIDTH);\n        this._startSeconds = new BehaviorSubject(undefined);\n        this._endSeconds = new BehaviorSubject(undefined);\n        this._suggestedQuality = new BehaviorSubject(undefined);\n        /**\n         * Outputs are direct proxies from the player itself.\n         */\n        this.ready = new EventEmitter();\n        this.stateChange = new EventEmitter();\n        this.error = new EventEmitter();\n        this.apiChange = new EventEmitter();\n        this.playbackQualityChange = new EventEmitter();\n        this.playbackRateChange = new EventEmitter();\n        this._youtubeContainer = new Subject();\n        this._destroyed = new Subject();\n        // @breaking-change 10.0.0 Remove null check for `platformId`.\n        this._isBrowser =\n            platformId ? isPlatformBrowser(platformId) : typeof window === 'object' && !!window;\n    }\n    /**\n     * YouTube Video ID to view\n     * @return {?}\n     */\n    get videoId() { return this._videoId.value; }\n    /**\n     * @param {?} videoId\n     * @return {?}\n     */\n    set videoId(videoId) {\n        this._videoId.next(videoId);\n    }\n    /**\n     * Height of video player\n     * @return {?}\n     */\n    get height() { return this._height.value; }\n    /**\n     * @param {?} height\n     * @return {?}\n     */\n    set height(height) {\n        this._height.next(height || DEFAULT_PLAYER_HEIGHT);\n    }\n    /**\n     * Width of video player\n     * @return {?}\n     */\n    get width() { return this._width.value; }\n    /**\n     * @param {?} width\n     * @return {?}\n     */\n    set width(width) {\n        this._width.next(width || DEFAULT_PLAYER_WIDTH);\n    }\n    /**\n     * The moment when the player is supposed to start playing\n     * @param {?} startSeconds\n     * @return {?}\n     */\n    set startSeconds(startSeconds) {\n        this._startSeconds.next(startSeconds);\n    }\n    /**\n     * The moment when the player is supposed to stop playing\n     * @param {?} endSeconds\n     * @return {?}\n     */\n    set endSeconds(endSeconds) {\n        this._endSeconds.next(endSeconds);\n    }\n    /**\n     * The suggested quality of the player\n     * @param {?} suggestedQuality\n     * @return {?}\n     */\n    set suggestedQuality(suggestedQuality) {\n        this._suggestedQuality.next(suggestedQuality);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        // Don't do anything if we're not in a browser environment.\n        if (!this._isBrowser) {\n            return;\n        }\n        /** @type {?} */\n        let iframeApiAvailableObs = of(true);\n        if (!window.YT) {\n            if (this.showBeforeIframeApiLoads) {\n                throw new Error('Namespace YT not found, cannot construct embedded youtube player. ' +\n                    'Please install the YouTube Player API Reference for iframe Embeds: ' +\n                    'https://developers.google.com/youtube/iframe_api_reference');\n            }\n            /** @type {?} */\n            const iframeApiAvailableSubject = new Subject();\n            this._existingApiReadyCallback = window.onYouTubeIframeAPIReady;\n            window.onYouTubeIframeAPIReady = (/**\n             * @return {?}\n             */\n            () => {\n                if (this._existingApiReadyCallback) {\n                    this._existingApiReadyCallback();\n                }\n                this._ngZone.run((/**\n                 * @return {?}\n                 */\n                () => iframeApiAvailableSubject.next(true)));\n            });\n            iframeApiAvailableObs = iframeApiAvailableSubject.pipe(take(1), startWith(false));\n        }\n        // An observable of the currently loaded player.\n        /** @type {?} */\n        const playerObs = createPlayerObservable(this._youtubeContainer, this._videoId, iframeApiAvailableObs, this._width, this._height, this.createEventsBoundInZone(), this._ngZone).pipe(waitUntilReady((/**\n         * @param {?} player\n         * @return {?}\n         */\n        player => {\n            // Destroy the player if loading was aborted so that we don't end up leaking memory.\n            if (!playerIsReady(player)) {\n                player.destroy();\n            }\n        })), takeUntil(this._destroyed), publish());\n        // Set up side effects to bind inputs to the player.\n        playerObs.subscribe((/**\n         * @param {?} player\n         * @return {?}\n         */\n        player => {\n            this._player = player;\n            if (player && this._pendingPlayerState) {\n                this._initializePlayer(player, this._pendingPlayerState);\n            }\n            this._pendingPlayerState = undefined;\n        }));\n        bindSizeToPlayer(playerObs, this._width, this._height);\n        bindSuggestedQualityToPlayer(playerObs, this._suggestedQuality);\n        bindCueVideoCall(playerObs, this._videoId, this._startSeconds, this._endSeconds, this._suggestedQuality, this._destroyed);\n        // After all of the subscriptions are set up, connect the observable.\n        ((/** @type {?} */ (playerObs))).connect();\n    }\n    /**\n     * @return {?}\n     */\n    createEventsBoundInZone() {\n        /** @type {?} */\n        const output = {};\n        /** @type {?} */\n        const events = new Map([\n            ['onReady', this.ready],\n            ['onStateChange', this.stateChange],\n            ['onPlaybackQualityChange', this.playbackQualityChange],\n            ['onPlaybackRateChange', this.playbackRateChange],\n            ['onError', this.error],\n            ['onApiChange', this.apiChange]\n        ]);\n        events.forEach((/**\n         * @param {?} emitter\n         * @param {?} name\n         * @return {?}\n         */\n        (emitter, name) => {\n            // Since these events all trigger change detection, only bind them if something is subscribed.\n            if (emitter.observers.length) {\n                output[name] = this._runInZone((/**\n                 * @param {?} event\n                 * @return {?}\n                 */\n                event => emitter.emit(event)));\n            }\n        }));\n        return output;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        this._youtubeContainer.next(this.youtubeContainer.nativeElement);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._player) {\n            this._player.destroy();\n            window.onYouTubeIframeAPIReady = this._existingApiReadyCallback;\n        }\n        this._videoId.complete();\n        this._height.complete();\n        this._width.complete();\n        this._startSeconds.complete();\n        this._endSeconds.complete();\n        this._suggestedQuality.complete();\n        this._youtubeContainer.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * @private\n     * @template T\n     * @param {?} callback\n     * @return {?}\n     */\n    _runInZone(callback) {\n        return (/**\n         * @param {...?} args\n         * @return {?}\n         */\n        (...args) => this._ngZone.run((/**\n         * @return {?}\n         */\n        () => callback(...args))));\n    }\n    /** Proxied methods. */\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#playVideo\n     * @return {?}\n     */\n    playVideo() {\n        if (this._player) {\n            this._player.playVideo();\n        }\n        else {\n            this._getPendingState().playbackState = 1 /* PLAYING */;\n        }\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#pauseVideo\n     * @return {?}\n     */\n    pauseVideo() {\n        if (this._player) {\n            this._player.pauseVideo();\n        }\n        else {\n            this._getPendingState().playbackState = 2 /* PAUSED */;\n        }\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#stopVideo\n     * @return {?}\n     */\n    stopVideo() {\n        if (this._player) {\n            this._player.stopVideo();\n        }\n        else {\n            // It seems like YouTube sets the player to CUED when it's stopped.\n            this._getPendingState().playbackState = 5 /* CUED */;\n        }\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#seekTo\n     * @param {?} seconds\n     * @param {?} allowSeekAhead\n     * @return {?}\n     */\n    seekTo(seconds, allowSeekAhead) {\n        if (this._player) {\n            this._player.seekTo(seconds, allowSeekAhead);\n        }\n        else {\n            this._getPendingState().seek = { seconds, allowSeekAhead };\n        }\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#mute\n     * @return {?}\n     */\n    mute() {\n        if (this._player) {\n            this._player.mute();\n        }\n        else {\n            this._getPendingState().muted = true;\n        }\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#unMute\n     * @return {?}\n     */\n    unMute() {\n        if (this._player) {\n            this._player.unMute();\n        }\n        else {\n            this._getPendingState().muted = false;\n        }\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#isMuted\n     * @return {?}\n     */\n    isMuted() {\n        if (this._player) {\n            return this._player.isMuted();\n        }\n        if (this._pendingPlayerState) {\n            return !!this._pendingPlayerState.muted;\n        }\n        return false;\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#setVolume\n     * @param {?} volume\n     * @return {?}\n     */\n    setVolume(volume) {\n        if (this._player) {\n            this._player.setVolume(volume);\n        }\n        else {\n            this._getPendingState().volume = volume;\n        }\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#getVolume\n     * @return {?}\n     */\n    getVolume() {\n        if (this._player) {\n            return this._player.getVolume();\n        }\n        if (this._pendingPlayerState && this._pendingPlayerState.volume != null) {\n            return this._pendingPlayerState.volume;\n        }\n        return 0;\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#setPlaybackRate\n     * @param {?} playbackRate\n     * @return {?}\n     */\n    setPlaybackRate(playbackRate) {\n        if (this._player) {\n            return this._player.setPlaybackRate(playbackRate);\n        }\n        else {\n            this._getPendingState().playbackRate = playbackRate;\n        }\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#getPlaybackRate\n     * @return {?}\n     */\n    getPlaybackRate() {\n        if (this._player) {\n            return this._player.getPlaybackRate();\n        }\n        if (this._pendingPlayerState && this._pendingPlayerState.playbackRate != null) {\n            return this._pendingPlayerState.playbackRate;\n        }\n        return 0;\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#getAvailablePlaybackRates\n     * @return {?}\n     */\n    getAvailablePlaybackRates() {\n        return this._player ? this._player.getAvailablePlaybackRates() : [];\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#getVideoLoadedFraction\n     * @return {?}\n     */\n    getVideoLoadedFraction() {\n        return this._player ? this._player.getVideoLoadedFraction() : 0;\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#getPlayerState\n     * @return {?}\n     */\n    getPlayerState() {\n        if (!this._isBrowser || !window.YT) {\n            return undefined;\n        }\n        if (this._player) {\n            return this._player.getPlayerState();\n        }\n        if (this._pendingPlayerState && this._pendingPlayerState.playbackState != null) {\n            return this._pendingPlayerState.playbackState;\n        }\n        return -1 /* UNSTARTED */;\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#getCurrentTime\n     * @return {?}\n     */\n    getCurrentTime() {\n        if (this._player) {\n            return this._player.getCurrentTime();\n        }\n        if (this._pendingPlayerState && this._pendingPlayerState.seek) {\n            return this._pendingPlayerState.seek.seconds;\n        }\n        return 0;\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#getPlaybackQuality\n     * @return {?}\n     */\n    getPlaybackQuality() {\n        return this._player ? this._player.getPlaybackQuality() : 'default';\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#getAvailableQualityLevels\n     * @return {?}\n     */\n    getAvailableQualityLevels() {\n        return this._player ? this._player.getAvailableQualityLevels() : [];\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#getDuration\n     * @return {?}\n     */\n    getDuration() {\n        return this._player ? this._player.getDuration() : 0;\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#getVideoUrl\n     * @return {?}\n     */\n    getVideoUrl() {\n        return this._player ? this._player.getVideoUrl() : '';\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#getVideoEmbedCode\n     * @return {?}\n     */\n    getVideoEmbedCode() {\n        return this._player ? this._player.getVideoEmbedCode() : '';\n    }\n    /**\n     * Gets an object that should be used to store the temporary API state.\n     * @private\n     * @return {?}\n     */\n    _getPendingState() {\n        if (!this._pendingPlayerState) {\n            this._pendingPlayerState = {};\n        }\n        return this._pendingPlayerState;\n    }\n    /**\n     * Initializes a player from a temporary state.\n     * @private\n     * @param {?} player\n     * @param {?} state\n     * @return {?}\n     */\n    _initializePlayer(player, state) {\n        const { playbackState, playbackRate, volume, muted, seek } = state;\n        switch (playbackState) {\n            case 1 /* PLAYING */:\n                player.playVideo();\n                break;\n            case 2 /* PAUSED */:\n                player.pauseVideo();\n                break;\n            case 5 /* CUED */:\n                player.stopVideo();\n                break;\n        }\n        if (playbackRate != null) {\n            player.setPlaybackRate(playbackRate);\n        }\n        if (volume != null) {\n            player.setVolume(volume);\n        }\n        if (muted != null) {\n            muted ? player.mute() : player.unMute();\n        }\n        if (seek != null) {\n            player.seekTo(seek.seconds, seek.allowSeekAhead);\n        }\n    }\n}\nYouTubePlayer.ɵfac = function YouTubePlayer_Factory(t) { return new (t || YouTubePlayer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID, 8)); };\nYouTubePlayer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: YouTubePlayer, selectors: [[\"youtube-player\"]], viewQuery: function YouTubePlayer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.youtubeContainer = _t.first);\n    } }, inputs: { videoId: \"videoId\", height: \"height\", width: \"width\", startSeconds: \"startSeconds\", endSeconds: \"endSeconds\", suggestedQuality: \"suggestedQuality\", showBeforeIframeApiLoads: \"showBeforeIframeApiLoads\" }, outputs: { ready: \"ready\", stateChange: \"stateChange\", error: \"error\", apiChange: \"apiChange\", playbackQualityChange: \"playbackQualityChange\", playbackRateChange: \"playbackRateChange\" }, decls: 2, vars: 0, consts: [[\"youtubeContainer\", \"\"]], template: function YouTubePlayer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"div\", null, 0);\n    } }, encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nYouTubePlayer.ctorParameters = () => [\n    { type: NgZone },\n    { type: Object, decorators: [{ type: Optional }, { type: Inject, args: [PLATFORM_ID,] }] }\n];\nYouTubePlayer.propDecorators = {\n    videoId: [{ type: Input }],\n    height: [{ type: Input }],\n    width: [{ type: Input }],\n    startSeconds: [{ type: Input }],\n    endSeconds: [{ type: Input }],\n    suggestedQuality: [{ type: Input }],\n    showBeforeIframeApiLoads: [{ type: Input }],\n    ready: [{ type: Output }],\n    stateChange: [{ type: Output }],\n    error: [{ type: Output }],\n    apiChange: [{ type: Output }],\n    playbackQualityChange: [{ type: Output }],\n    playbackRateChange: [{ type: Output }],\n    youtubeContainer: [{ type: ViewChild, args: ['youtubeContainer',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(YouTubePlayer, [{\n        type: Component,\n        args: [{\n                selector: 'youtube-player',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                // This div is *replaced* by the YouTube player embed.\n                template: '<div #youtubeContainer></div>'\n            }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: Object, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }]; }, { ready: [{\n            type: Output\n        }], stateChange: [{\n            type: Output\n        }], error: [{\n            type: Output\n        }], apiChange: [{\n            type: Output\n        }], playbackQualityChange: [{\n            type: Output\n        }], playbackRateChange: [{\n            type: Output\n        }], videoId: [{\n            type: Input\n        }], height: [{\n            type: Input\n        }], width: [{\n            type: Input\n        }], startSeconds: [{\n            type: Input\n        }], endSeconds: [{\n            type: Input\n        }], suggestedQuality: [{\n            type: Input\n        }], showBeforeIframeApiLoads: [{\n            type: Input\n        }], youtubeContainer: [{\n            type: ViewChild,\n            args: ['youtubeContainer']\n        }] }); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    YouTubePlayer.prototype._videoId;\n    /**\n     * @type {?}\n     * @private\n     */\n    YouTubePlayer.prototype._height;\n    /**\n     * @type {?}\n     * @private\n     */\n    YouTubePlayer.prototype._width;\n    /**\n     * @type {?}\n     * @private\n     */\n    YouTubePlayer.prototype._startSeconds;\n    /**\n     * @type {?}\n     * @private\n     */\n    YouTubePlayer.prototype._endSeconds;\n    /**\n     * @type {?}\n     * @private\n     */\n    YouTubePlayer.prototype._suggestedQuality;\n    /**\n     * Whether the iframe will attempt to load regardless of the status of the api on the\n     * page. Set this to true if you don't want the `onYouTubeIframeAPIReady` field to be\n     * set on the global window.\n     * @type {?}\n     */\n    YouTubePlayer.prototype.showBeforeIframeApiLoads;\n    /**\n     * Outputs are direct proxies from the player itself.\n     * @type {?}\n     */\n    YouTubePlayer.prototype.ready;\n    /** @type {?} */\n    YouTubePlayer.prototype.stateChange;\n    /** @type {?} */\n    YouTubePlayer.prototype.error;\n    /** @type {?} */\n    YouTubePlayer.prototype.apiChange;\n    /** @type {?} */\n    YouTubePlayer.prototype.playbackQualityChange;\n    /** @type {?} */\n    YouTubePlayer.prototype.playbackRateChange;\n    /**\n     * The element that will be replaced by the iframe.\n     * @type {?}\n     */\n    YouTubePlayer.prototype.youtubeContainer;\n    /**\n     * Whether we're currently rendering inside a browser.\n     * @type {?}\n     * @private\n     */\n    YouTubePlayer.prototype._isBrowser;\n    /**\n     * @type {?}\n     * @private\n     */\n    YouTubePlayer.prototype._youtubeContainer;\n    /**\n     * @type {?}\n     * @private\n     */\n    YouTubePlayer.prototype._destroyed;\n    /**\n     * @type {?}\n     * @private\n     */\n    YouTubePlayer.prototype._player;\n    /**\n     * @type {?}\n     * @private\n     */\n    YouTubePlayer.prototype._existingApiReadyCallback;\n    /**\n     * @type {?}\n     * @private\n     */\n    YouTubePlayer.prototype._pendingPlayerState;\n    /**\n     * @type {?}\n     * @private\n     */\n    YouTubePlayer.prototype._ngZone;\n}\n/**\n * Listens to changes to the given width and height and sets it on the player.\n * @param {?} playerObs\n * @param {?} widthObs\n * @param {?} heightObs\n * @return {?}\n */\nfunction bindSizeToPlayer(playerObs, widthObs, heightObs) {\n    return combineLatest([playerObs, widthObs, heightObs])\n        .subscribe((/**\n     * @param {?} __0\n     * @return {?}\n     */\n    ([player, width, height]) => player && player.setSize(width, height)));\n}\n/**\n * Listens to changes from the suggested quality and sets it on the given player.\n * @param {?} playerObs\n * @param {?} suggestedQualityObs\n * @return {?}\n */\nfunction bindSuggestedQualityToPlayer(playerObs, suggestedQualityObs) {\n    return combineLatest([\n        playerObs,\n        suggestedQualityObs\n    ]).subscribe((/**\n     * @param {?} __0\n     * @return {?}\n     */\n    ([player, suggestedQuality]) => player && suggestedQuality && player.setPlaybackQuality(suggestedQuality)));\n}\n/**\n * Returns an observable that emits the loaded player once it's ready. Certain properties/methods\n * won't be available until the iframe finishes loading.\n * @param {?} onAbort Callback function that will be invoked if the player loading was aborted before\n * it was able to complete. Can be used to clean up any loose references.\n * @return {?}\n */\nfunction waitUntilReady(onAbort) {\n    return flatMap((/**\n     * @param {?} player\n     * @return {?}\n     */\n    player => {\n        if (!player) {\n            return of(undefined);\n        }\n        if (playerIsReady(player)) {\n            return of((/** @type {?} */ (player)));\n        }\n        // Since removeEventListener is not on Player when it's initialized, we can't use fromEvent.\n        // The player is not initialized fully until the ready is called.\n        return new Observable((/**\n         * @param {?} emitter\n         * @return {?}\n         */\n        emitter => {\n            /** @type {?} */\n            let aborted = false;\n            /** @type {?} */\n            let resolved = false;\n            /** @type {?} */\n            const onReady = (/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                resolved = true;\n                if (!aborted) {\n                    event.target.removeEventListener('onReady', onReady);\n                    emitter.next(event.target);\n                }\n            });\n            player.addEventListener('onReady', onReady);\n            return (/**\n             * @return {?}\n             */\n            () => {\n                aborted = true;\n                if (!resolved) {\n                    onAbort(player);\n                }\n            });\n        })).pipe(take(1), startWith(undefined));\n    }));\n}\n/**\n * Create an observable for the player based on the given options.\n * @param {?} youtubeContainer\n * @param {?} videoIdObs\n * @param {?} iframeApiAvailableObs\n * @param {?} widthObs\n * @param {?} heightObs\n * @param {?} events\n * @param {?} ngZone\n * @return {?}\n */\nfunction createPlayerObservable(youtubeContainer, videoIdObs, iframeApiAvailableObs, widthObs, heightObs, events, ngZone) {\n    /** @type {?} */\n    const playerOptions = videoIdObs\n        .pipe(withLatestFrom(combineLatest([widthObs, heightObs])), map((/**\n     * @param {?} __0\n     * @return {?}\n     */\n    ([videoId, [width, height]]) => videoId ? ({ videoId, width, height, events }) : undefined)));\n    return combineLatest([youtubeContainer, playerOptions, of(ngZone)])\n        .pipe(skipUntilRememberLatest(iframeApiAvailableObs), scan(syncPlayerState, undefined), distinctUntilChanged());\n}\n/**\n * Skips the given observable until the other observable emits true, then emit the latest.\n * @template T\n * @param {?} notifier\n * @return {?}\n */\nfunction skipUntilRememberLatest(notifier) {\n    return pipe(combineLatest$1(notifier), skipWhile((/**\n     * @param {?} __0\n     * @return {?}\n     */\n    ([_, doneSkipping]) => !doneSkipping)), map((/**\n     * @param {?} __0\n     * @return {?}\n     */\n    ([value]) => value)));\n}\n/**\n * Destroy the player if there are no options, or create the player if there are options.\n * @param {?} player\n * @param {?} __1\n * @return {?}\n */\nfunction syncPlayerState(player, [container, videoOptions, ngZone]) {\n    if (!videoOptions) {\n        if (player) {\n            player.destroy();\n        }\n        return;\n    }\n    if (player) {\n        return player;\n    }\n    // Important! We need to create the Player object outside of the `NgZone`, because it kicks\n    // off a 250ms setInterval which will continually trigger change detection if we don't.\n    /** @type {?} */\n    const newPlayer = ngZone.runOutsideAngular((/**\n     * @return {?}\n     */\n    () => new YT.Player(container, videoOptions)));\n    // Bind videoId for future use.\n    newPlayer.videoId = videoOptions.videoId;\n    return newPlayer;\n}\n/**\n * Call cueVideoById if the videoId changes, or when start or end seconds change. cueVideoById will\n * change the loaded video id to the given videoId, and set the start and end times to the given\n * start/end seconds.\n * @param {?} playerObs\n * @param {?} videoIdObs\n * @param {?} startSecondsObs\n * @param {?} endSecondsObs\n * @param {?} suggestedQualityObs\n * @param {?} destroyed\n * @return {?}\n */\nfunction bindCueVideoCall(playerObs, videoIdObs, startSecondsObs, endSecondsObs, suggestedQualityObs, destroyed) {\n    /** @type {?} */\n    const cueOptionsObs = combineLatest([startSecondsObs, endSecondsObs])\n        .pipe(map((/**\n     * @param {?} __0\n     * @return {?}\n     */\n    ([startSeconds, endSeconds]) => ({ startSeconds, endSeconds }))));\n    // Only respond to changes in cue options if the player is not running.\n    /** @type {?} */\n    const filteredCueOptions = cueOptionsObs\n        .pipe(filterOnOther(playerObs, (/**\n     * @param {?} player\n     * @return {?}\n     */\n    player => !!player && !hasPlayerStarted(player))));\n    // If the video id changed, there's no reason to run 'cue' unless the player\n    // was initialized with a different video id.\n    /** @type {?} */\n    const changedVideoId = videoIdObs\n        .pipe(filterOnOther(playerObs, (/**\n     * @param {?} player\n     * @param {?} videoId\n     * @return {?}\n     */\n    (player, videoId) => !!player && player.videoId !== videoId)));\n    // If the player changed, there's no reason to run 'cue' unless there are cue options.\n    /** @type {?} */\n    const changedPlayer = playerObs.pipe(filterOnOther(combineLatest([videoIdObs, cueOptionsObs]), (/**\n     * @param {?} __0\n     * @param {?} player\n     * @return {?}\n     */\n    ([videoId, cueOptions], player) => !!player &&\n        (videoId != player.videoId || !!cueOptions.startSeconds || !!cueOptions.endSeconds))));\n    merge(changedPlayer, changedVideoId, filteredCueOptions)\n        .pipe(withLatestFrom(combineLatest([playerObs, videoIdObs, cueOptionsObs, suggestedQualityObs])), map((/**\n     * @param {?} __0\n     * @return {?}\n     */\n    ([_, values]) => values)), takeUntil(destroyed))\n        .subscribe((/**\n     * @param {?} __0\n     * @return {?}\n     */\n    ([player, videoId, cueOptions, suggestedQuality]) => {\n        if (!videoId || !player) {\n            return;\n        }\n        player.videoId = videoId;\n        player.cueVideoById(Object.assign({ videoId,\n            suggestedQuality }, cueOptions));\n    }));\n}\n/**\n * @param {?} player\n * @return {?}\n */\nfunction hasPlayerStarted(player) {\n    /** @type {?} */\n    const state = player.getPlayerState();\n    return state !== -1 /* UNSTARTED */ && state !== 5 /* CUED */;\n}\n/**\n * @param {?} player\n * @return {?}\n */\nfunction playerIsReady(player) {\n    return 'getPlayerStatus' in player;\n}\n/**\n * Combines the two observables temporarily for the filter function.\n * @template R, T\n * @param {?} otherObs\n * @param {?} filterFn\n * @return {?}\n */\nfunction filterOnOther(otherObs, filterFn) {\n    return pipe(withLatestFrom(otherObs), filter((/**\n     * @param {?} __0\n     * @return {?}\n     */\n    ([value, other]) => filterFn(other, value))), map((/**\n     * @param {?} __0\n     * @return {?}\n     */\n    ([value]) => value)));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/youtube-player/youtube-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst COMPONENTS = [YouTubePlayer];\nclass YouTubePlayerModule {\n}\nYouTubePlayerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: YouTubePlayerModule });\nYouTubePlayerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function YouTubePlayerModule_Factory(t) { return new (t || YouTubePlayerModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(YouTubePlayerModule, { declarations: [YouTubePlayer], exports: [YouTubePlayer] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(YouTubePlayerModule, [{\n        type: NgModule,\n        args: [{\n                declarations: COMPONENTS,\n                exports: COMPONENTS\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/youtube-player/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { YouTubePlayer, YouTubePlayerModule };\n\n//# sourceMappingURL=youtube-player.js.map","import { isArray } from '../util/isArray';\nimport { CombineLatestOperator } from '../observable/combineLatest';\nimport { from } from '../observable/from';\nconst none = {};\nexport function combineLatest(...observables) {\n    let project = null;\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0].slice();\n    }\n    return (source) => source.lift.call(from([source, ...observables]), new CombineLatestOperator(project));\n}\n//# sourceMappingURL=combineLatest.js.map","import { Subject } from '../Subject';\nimport { multicast } from './multicast';\nexport function publish(selector) {\n    return selector ?\n        multicast(() => new Subject(), selector) :\n        multicast(new Subject());\n}\n//# sourceMappingURL=publish.js.map","<ng-container [ngSwitch]=\"type\">\n  <img\n    *ngSwitchCase=\"'image'\"\n    [src]=\"image.sizes.large\"\n    [alt]=\"image.alt || image.title || image.name || ''\"\n    [width]=\"image.sizes['large-width']\"\n    [height]=\"image.sizes['large-height']\"\n  />\n\n  <div *ngSwitchCase=\"'video'\" class=\"showcase__iframe-container\">\n    <youtube-player [videoId]=\"videoId\"></youtube-player>\n  </div>\n</ng-container>\n","import { Component, OnInit, Input } from '@angular/core'\nimport { ShowcaseFormat, Image, YoutubeURL } from '../../models/post.model'\nimport { getYoutubeId } from 'src/app/shared/util'\n\n@Component({\n  selector: 'app-showcase',\n  templateUrl: './showcase.component.html',\n  styleUrls: ['./showcase.component.css'],\n})\nexport class ShowcaseComponent implements OnInit {\n  @Input() type: ShowcaseFormat\n  @Input() image: Image\n  @Input() video: YoutubeURL\n\n  public videoId: string\n\n  constructor() {}\n\n  ngOnInit() {\n    if (this.type === 'video') {\n      this.videoId = getYoutubeId(this.video)\n\n      // this.iframeHTML = this.embedService.embed(this.video)\n      // This code loads the IFrame Player API code asynchronously, according to the instructions at\n      // https://developers.google.com/youtube/iframe_api_reference#Getting_Started\n      const tag = document.createElement('script')\n\n      tag.src = 'https://www.youtube.com/iframe_api'\n      document.body.appendChild(tag)\n    }\n  }\n}\n","<table>\n  <tbody>\n    <tr>\n      <th scope=\"row\">Kategorie:</th>\n      <td [innerHTML]=\"data.modul.name\"></td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Semester:</th>\n      <td>\n        <span *ngFor=\"let s of data.semester\" [innerHTML]=\"s.name + '<br>'\"></span>\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Erstellunsjahr:</th>\n      <td [innerHTML]=\"data.erstellungsjahr\"></td>\n    </tr>\n    <tr>\n      <th scope=\"row\">{{ data.studierende.length > 1 ? 'Studierende' : 'Student*in' }}:</th>\n      <td>\n        <span *ngFor=\"let s of data.studierende\" [innerHTML]=\"s.name + '<br>'\"></span>\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">{{ data.dozierende.length > 1 ? 'Dozierende' : 'Dozent*in' }}:</th>\n      <td>\n        <span *ngFor=\"let d of data.dozierende\" [innerHTML]=\"d.name + '<br>'\"></span>\n      </td>\n    </tr>\n  </tbody>\n</table>\n","import { Component, OnInit, Input } from '@angular/core'\nimport { Post } from '../../models/post.model'\n\n@Component({\n  selector: 'app-briefing',\n  templateUrl: './briefing.component.html',\n  styleUrls: ['./briefing.component.css'],\n})\nexport class BriefingComponent implements OnInit {\n  @Input() data: Post['acf']\n\n  ngOnInit() {}\n}\n","<ng-container *ngIf=\"(isFetching$ | async) === false; else loadingSpinner\">\n  <section *ngIf=\"post$ | async as post; else notFound\">\n    <h2 [innerHTML]=\"post.title.rendered\"></h2>\n    <p class=\"post-detail__category\">\n      {{ post.acf.page.post_title }}\n      <span *ngIf=\"post.acf.schlagworte.length\" class=\"post-detail__category__tags\">\n        – <span *ngFor=\"let tag of post.acf.schlagworte\">{{ tag.name }}</span>\n      </span>\n    </p>\n\n    <app-showcase\n      [type]=\"post.acf.showcaseFormat\"\n      [image]=\"post.acf.showcase\"\n      [video]=\"post.acf.youtube\"\n    ></app-showcase>\n    <p [innerHTML]=\"post.acf.beschreibung\"></p>\n\n    <h3>Steckbrief</h3>\n    <app-briefing [data]=\"post.acf\"></app-briefing>\n\n    <h3 *ngIf=\"post.acf.galerie.length\">Galerie</h3>\n    <img\n      *ngFor=\"let image of post.acf.galerie\"\n      [src]=\"image.sizes.medium\"\n      [alt]=\"image.alt || image.title || image.name || ''\"\n      [width]=\"image.sizes['medium-width']\"\n      [height]=\"image.sizes['medium-height']\"\n    />\n\n    <footer class=\"post-detail__footer\">\n      <button type=\"button\" (click)=\"toTop()\">Nach oben</button>\n    </footer>\n  </section>\n</ng-container>\n\n<ng-template #notFound>\n  <p class=\"post-detail__status-msg\">\n    Projekt mit ID »{{ rawId }}« nicht gefunden.\n    <span style=\"font-style: normal;\" role=\"img\" aria-label=\"Sad cat\">😿</span>\n  </p>\n</ng-template>\n\n<ng-template #loadingSpinner>\n  <p class=\"post-detail__status-msg\">Wird geladen... <app-loading-spinner></app-loading-spinner></p>\n</ng-template>\n","import { Routes, RouterModule } from '@angular/router'\nimport { PostMasterComponent } from './views/post-master/post-master.component'\nimport { PostDetailComponent } from './views/post-detail/post-detail.component'\n\nconst routes: Routes = [\n  { path: '', component: PostMasterComponent },\n  { path: ':id', component: PostDetailComponent },\n]\n\nexport const PortfolioRoutes = RouterModule.forChild(routes)\n","import { Component, OnInit } from '@angular/core'\nimport { ActivatedRoute } from '@angular/router'\nimport { Store, Select } from '@ngxs/store'\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nimport { GetPost } from '../../store/portfolio.actions'\nimport { PortfolioSelectors } from '../../store/portfolio.selectors'\n\ntype PostEntityByIdFn = ReturnType<typeof PortfolioSelectors.postEntityByIdFn>\n\n@Component({\n  selector: 'app-post-detail',\n  templateUrl: './post-detail.component.html',\n  styleUrls: ['./post-detail.component.css'],\n})\nexport class PostDetailComponent implements OnInit {\n  @Select(PortfolioSelectors.postEntityByIdFn) postEntityByIdFn$: Observable<PostEntityByIdFn>\n  rawId: string\n  id: number\n\n  postEntity$: Observable<ReturnType<PostEntityByIdFn>>\n  post$: Observable<ReturnType<PostEntityByIdFn>['entity']>\n  isFetching$: Observable<boolean>\n\n  constructor(route: ActivatedRoute, private store: Store) {\n    this.rawId = route.snapshot.paramMap.get('id')\n    this.id = Number(this.rawId)\n\n    this.postEntity$ = this.postEntityByIdFn$.pipe(map(postEntityById => postEntityById(this.id)))\n    this.post$ = this.postEntity$.pipe(map(post => post.entity))\n    this.isFetching$ = this.postEntity$.pipe(map(post => post.isFetching))\n  }\n\n  ngOnInit() {\n    this.store.dispatch(new GetPost(this.id)).subscribe()\n  }\n\n  toTop() {\n    document.body.scrollIntoView({ block: 'start', behavior: 'smooth' })\n  }\n}\n","import { NgModule } from '@angular/core'\nimport { CommonModule } from '@angular/common'\nimport { LoadingSpinnerComponent } from './loading-spinner.component'\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [LoadingSpinnerComponent],\n  exports: [LoadingSpinnerComponent],\n})\nexport class LoadingSpinnerModule {}\n","import { NgModule } from '@angular/core'\nimport { CommonModule } from '@angular/common'\nimport { PostMasterComponent } from './post-master.component'\nimport { RouterModule } from '@angular/router'\nimport { LoadingSpinnerModule } from 'src/app/shared/components/loading-spinner/loading-spinner.module'\n\n@NgModule({\n  imports: [CommonModule, RouterModule, LoadingSpinnerModule],\n  providers: [],\n  declarations: [PostMasterComponent],\n})\nexport class PostMasterModule {}\n","import { NgModule } from '@angular/core'\nimport { CommonModule } from '@angular/common'\nimport { YouTubePlayerModule } from '@angular/youtube-player'\nimport { LoadingSpinnerModule } from 'src/app/shared/components/loading-spinner/loading-spinner.module'\n\nimport { PostDetailComponent } from './post-detail.component'\nimport { ShowcaseComponent } from '../../components/showcase/showcase.component'\nimport { BriefingComponent } from '../../components/briefing/briefing.component'\n\n@NgModule({\n  imports: [CommonModule, YouTubePlayerModule, LoadingSpinnerModule],\n  declarations: [PostDetailComponent, ShowcaseComponent, BriefingComponent],\n})\nexport class PostDetailModule {}\n","import { NgModule } from '@angular/core'\nimport { CommonModule } from '@angular/common'\nimport { NgxsModule } from '@ngxs/store'\nimport { PortfolioRoutes } from './portfolio.module.routing'\nimport { PostMasterModule } from './views/post-master/post-master.module'\nimport { PostDetailModule } from './views/post-detail/post-detail.module'\n\nimport { PortfolioState } from './store/portfolio.state'\n\n@NgModule({\n  imports: [\n    CommonModule,\n    PortfolioRoutes,\n    PostMasterModule,\n    PostDetailModule,\n    NgxsModule.forFeature([PortfolioState]),\n  ],\n  declarations: [],\n})\nexport class PortfolioModule {}\n"]}