{"version":3,"sources":["webpack:///src/app/portfolio/store/portfolio.actions.ts","webpack:///src/app/shared/store/selectors.ts","webpack:///src/app/shared/util/index.ts","webpack:///node_modules/@ngxs/store/fesm2015/ngxs-store-operators.js","webpack:///src/app/shared/util/store.ts","webpack:///src/app/portfolio/posts.service.ts","webpack:///src/app/portfolio/store/portfolio.state.ts","webpack:///src/app/portfolio/store/portfolio.selectors.ts","webpack:///node_modules/rxjs/_esm2015/internal/observable/fromEventPattern.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/withLatestFrom.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/skipWhile.js","webpack:///node_modules/@angular/youtube-player/__ivy_ngcc__/fesm2015/youtube-player.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/combineLatest.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/publish.js","webpack:///src/app/portfolio/components/showcase/showcase.component.html","webpack:///src/app/portfolio/components/showcase/showcase.component.ts","webpack:///src/app/portfolio/components/briefing/briefing.component.html","webpack:///src/app/portfolio/components/briefing/briefing.component.ts","webpack:///src/app/shared/components/loading-spinner/loading-spinner.component.ts","webpack:///src/app/shared/components/loading-spinner/loading-spinner.component.html","webpack:///src/app/portfolio/views/post-detail/post-detail.component.html","webpack:///src/app/portfolio/views/post-detail/post-detail.component.ts","webpack:///src/app/portfolio/views/post-master/post-master.component.html","webpack:///src/app/portfolio/views/post-master/post-master.component.ts","webpack:///src/app/portfolio/portfolio.module.routing.ts","webpack:///src/app/shared/components/loading-spinner/loading-spinner.module.ts","webpack:///src/app/portfolio/views/post-detail/post-detail.module.ts","webpack:///src/app/portfolio/views/post-master/post-master.module.ts","webpack:///src/app/portfolio/portfolio.module.ts"],"names":["GetPost","id","type","GetPostSuccess","post","GetPostError","error","GetPostPage","page","GetPostPageSuccess","payload","GetPostPageError","stateClass","state","entities","Object","values","keys","pageIds","map","isArray","item","Array","serializePageQuery","params","URLSearchParams","patch","patchObject","existing","clone","k","newValue","existingPropValue","newPropValue","assign","createEntity","entity","lastUpdatedAt","Date","toISOString","isFetching","isRefreshing","isError","uniq","some","i","includes","concat","filter","updateEntity","prevEntity","apiUrl","environment","headersGetTotal","headers","wpTotal","get","Error","Number","headersGetTotalPages","wpTotalPages","getPostPageFromResponse","response","body","total","totalPages","PostsService","http","this","perPage","fromObject","String","per_page","observe","pipe","initialState","ids","pagination","PortfolioState","postsService","store","ctx","dispatch","getState","setState","toString","getPost","catchError","console","query","existingQuery","pages","patchState","getPosts","reduce","obj","p","name","defaults","PortfolioSelectors","options","getPageQuery","flat","getEntities","getEntityIds","posts","getEntityList","postQueryFn","fromEventPattern","addHandler","removeHandler","resultSelector","args","Observable","subscriber","handler","e","next","length","retValue","err","isFunction","withLatestFrom","source","project","pop","lift","WithLatestFromOperator","observables","subscribe","OuterSubscriber","destination","super","toRespond","len","push","observable","add","subscribeToResult","undefined","_outerValue","innerValue","outerIndex","found","indexOf","splice","value","_tryProject","result","apply","SkipWhileOperator","predicate","Subscriber","skipping","index","tryCallPredicate","Boolean","_c0","YouTubePlayer","_ngZone","platformId","_youtubeContainer","Subject","_destroyed","_playerChanges","BehaviorSubject","_videoId","_height","_width","_startSeconds","_endSeconds","_suggestedQuality","_playerVars","ready","_getLazyEmitter","stateChange","apiChange","playbackQualityChange","playbackRateChange","_isBrowser","videoId","height","width","startSeconds","endSeconds","suggestedQuality","playerVars","iframeApiAvailableObs","of","window","YT","Player","iframeApiAvailableSubject","_existingApiReadyCallback","onYouTubeIframeAPIReady","run","take","startWith","playerObs","youtubeContainer","videoIdObs","widthObs","heightObs","playerVarsObs","ngZone","playerOptions","combineLatest","constructorOptions","sizeOptions","notifier","slice","call","from","_","doneSkipping","scan","syncPlayerState","distinctUntilChanged","tap","player","onAbort","playerIsReady","destroy","mergeMap","emitter","aborted","resolved","onReady","event","target","removeEventListener","addEventListener","takeUntil","multicast","_player","_pendingPlayerState","_initializePlayer","setSize","suggestedQualityObs","setPlaybackQuality","startSecondsObs","endSecondsObs","destroyed","cueOptionsObs","filteredCueOptions","filterOnOther","getPlayerState","changedVideoId","changedPlayer","cueOptions","merge","cueVideoById","connect","nativeElement","complete","playVideo","_getPendingState","playbackState","pauseVideo","stopVideo","seconds","allowSeekAhead","seekTo","seek","mute","muted","unMute","isMuted","volume","setVolume","getVolume","playbackRate","setPlaybackRate","getPlaybackRate","getAvailablePlaybackRates","getVideoLoadedFraction","getCurrentTime","getPlaybackQuality","getAvailableQualityLevels","getDuration","getVideoUrl","getVideoEmbedCode","switchMap","listener","_a","observer","ɵfac","t","ɵcmp","selectors","viewQuery","rf","_t","first","inputs","showBeforeIframeApiLoads","outputs","decls","vars","consts","template","encapsulation","changeDetection","container","videoOptions","newPlayer","runOutsideAngular","otherObs","filterFn","other","YouTubePlayerModule","ɵmod","ɵinj","factory","ShowcaseComponent","document","url","opts","fuzzy","test","patterns","exec","tokens","split","video","loadYouTubeAPI","tag","createElement","src","appendChild","BriefingComponent","LoadingSpinnerComponent","PostDetailComponent","route","rawId","snapshot","paramMap","postEntity$","postEntityByIdFn$","postEntityById","post$","isFetching$","scrollIntoView","block","behavior","postEntityByIdFn","linebreakRegex","PortfolioRoutes","forChild","path","component","PostMasterComponent","posts$","postEntitiesByQueryFn$","postsForQuery","postEntities","query$","postQueryFn$","getPostQuery","q","loadPage","text","replace","postEntitiesByQueryFn","LoadingSpinnerModule","PostDetailModule","PostMasterModule","PortfolioModule","forFeature"],"mappings":"mNAIO,Y,MAAMA,EAEX,YAAmBC,GAAA,KAAAA,M,OADH,EAAAC,KAAO,uB,GADlB,GAIA,Q,MAAMC,EAEX,YAAmBC,GAAA,KAAAA,Q,OADH,EAAAF,KAAO,mC,GADlB,GAIA,Q,MAAMG,EAEX,YAAmBJ,EAAmBK,GAAnB,KAAAL,KAAmB,KAAAK,S,OADtB,EAAAJ,KAAO,iC,GADlB,GAKA,Q,MAAMK,EAEX,YAAmBC,GAAA,KAAAA,Q,OADH,EAAAN,KAAO,4B,GADlB,GAIA,Q,MAAMO,EAEX,YAAmBD,EAAiCE,GAAjC,KAAAF,OAAiC,KAAAE,W,OADpC,EAAAR,KAAO,wC,GADlB,GAIA,Q,MAAMS,EAEX,YAAmBH,EAAiCF,GAAjC,KAAAE,OAAiC,KAAAF,S,OADpC,EAAAJ,KAAO,sC,GADlB,GCtBA,MAAM,EACX,mBAAsBU,GACpB,OAAO,YAAe,CAACA,GAAcC,GAAUA,EAAMC,UAGvD,qBAAwBF,GACtB,OAAO,YAAe,CAACA,GAAcC,GAAUE,OAAOC,OAAOH,EAAMC,WAGrE,oBAAoBF,GAClB,OAAO,YAAe,CAACA,GAAcC,GAAUE,OAAOE,KAAKJ,EAAMC,WAGnE,6BAA6BF,GAC3B,OAAQM,GACC,YAAe,CAACN,GAAcC,GAAUK,EAAQC,IAAKlB,GAAOY,EAAMC,SAASb,MClBjF,MAAMmB,EAAWC,GAA6BC,MAAMF,QAAQC,GAEtDE,EAAsB,I,IAAWC,EAAM,cAAjB,UAA6B,UAAI,IAAIC,gBAAgBD,M,gBC+MxF,SAASE,EAAMC,GACX,OAAO,SAKqBC,GAExB,IAAIC,EAAQ,KACZ,IAAK,MAAMC,KAAKH,EAAa,CAEzB,MAAMI,EAAWJ,EAAYG,GAEvBE,EAAoBJ,EAASE,GAE7BG,EA/JU,mBA+JqBF,EAC/BA,EAAS,GACTA,EACFE,IAAiBD,IACZH,IACDA,EAAQd,OAAOmB,OAAO,GAAI,IAE9BL,EAAMC,GAAKG,GAGnB,OAAOJ,GAASD,GCpOjB,MAAMO,EAAe,CAAIlC,EAAqBmC,EAAY,SAC/DnC,KACAmC,SACAC,eAAc,IAAKC,MAAOC,cAC1BC,YAAY,EACZC,cAAc,EACdC,SAAS,IAGJ,SAASC,EAAKtB,GACnB,OAAQR,IACSO,EAAQC,GAAQA,EAAKuB,KAAMC,IAAOhC,EAAMiC,SAASD,IAAMhC,EAAMiC,SAASzB,IAE5ER,EAGFA,EAAMkC,OAAO3B,EAAQC,GAAQA,EAAK2B,OAAQH,IAAOhC,EAAMiC,SAASD,IAAMxB,GAiB1E,SAAS4B,EAAgBvC,GAC9B,OAAQG,IACN,MAAMqC,EAAarC,EAAMC,SAASJ,EAAQT,IAC1C,OAAO,OAAP,wBACKY,GAAK,CACRC,SAAU,OAAF,wBAAOD,EAAMC,UAAQ,CAAE,CAACJ,EAAQT,IAAK,OAAF,wBAAOiD,GAAexC,Q,wCC7BvE,MAAM,OAAEyC,GAAWC,EAAA,EAEbC,EAAmBC,IACvB,MAAMC,EAAUD,EAAQE,IAAI,cAC5B,GAAe,MAAXD,EAAiB,MAAME,MAAM,2CAEjC,OAAOC,OAAOH,IAEVI,EAAwBL,IAC5B,MAAMM,EAAeN,EAAQE,IAAI,mBACjC,GAAoB,MAAhBI,EAAsB,MAAMH,MAAM,gDAEtC,OAAOC,OAAOE,IAGVC,EAA2BC,IAC/B,MAAM,KAAEC,EAAI,QAAET,GAAYQ,EAC1B,MAAO,CAAEC,OAAMC,MAAOX,EAAgBC,GAAUW,WAAYN,EAAqBL,KAI5E,Y,MAAMY,EACX,YAAoBC,GAAA,KAAAA,OAEpB,QAAQlE,GACN,OAAOmE,KAAKD,KAAKX,IAAU,GAAGL,UAAelD,KAG/C,UAAS,KAAEO,EAAI,QAAE6D,EAAU,KACzB,MAAM7C,EAAS,IAAI,IAAW,CAC5B8C,WAAY,CACV9D,KAAM+D,OAAO/D,GACbgE,SAAUD,OAAOF,MAIrB,OAAOD,KAAKD,KACTX,IAAY,GAAGL,SAAe,CAAE3B,SAAQiD,QAAS,aACjDC,KAAK,OAAAvD,EAAA,GAAI0C,K,6CAjBHK,GAAY,Y,yBAAZA,EAAY,QAAZA,EAAY,qBADC,S,GACnB,GCZP,MAAMS,EAAoC,CAAE7D,SAAU,GAAI8D,IAAK,GAAIC,WAAY,I,gBAIlEC,EAAc,MACzB,YAAoBC,EAAoCC,GAApC,KAAAD,eAAoC,KAAAC,QAExD,WAAWC,GACTA,EAAIC,SAAS,IAAI3E,EAAY,CAAEC,KAAM,EAAG6D,QAAS,KAInD,QAAQY,GAA4B,GAAEhF,IACpC,MAAM2B,EAAWqD,EAAIE,WAAWrE,SAASb,GACzC,OAAI2B,IAAaA,EAASc,QACjBuC,EAAIC,SAAS,IAAI/E,EAAeyB,EAASQ,UAGlD6C,EAAIG,SFhBD,SAAsBhD,GAC3B,MAAMnC,EAAKmC,EAAOnC,GAAGoF,WACrB,OAAO3D,EAA4B,CAAEkD,IAAKjC,EAAK1C,GAAKa,SAAUY,EAAM,CAAE,CAACzB,GAAKmC,MAFvE,CEiBQ,+BAAYD,EAAmBlC,IAAG,CAAEuC,YAAY,MAGpD4B,KAAKW,aAAaO,QAAQrF,GAAIyE,KACnC,OAAAvD,EAAA,GAAK2C,GAAamB,EAAIC,SAAS,IAAI/E,EAAe2D,KAClD,OAAAyB,EAAA,GAAYjF,GAAU2E,EAAIC,SAAS,IAAI7E,EAAaJ,EAAIK,OAK5D,eAAe2E,GAA4B,KAAE7E,IAC3C6E,EAAIG,SAASnC,EAAmBd,EAAmB/B,EAAKH,GAAIG,KAI9D,aAAa6E,GAA4B,GAAEhF,EAAE,MAAEK,IAC7C2E,EAAIG,SAASnC,EAAa,CAAEhD,KAAIyC,SAAS,EAAMF,YAAY,EAAOC,cAAc,KAChF+C,QAAQlF,MAAMA,GAIhB,YAAY2E,GAA4B,KAAEzE,IACxC,MAAMK,EAAQoE,EAAIE,WACZM,EAAQlE,EAAmBf,GAE3BkF,EAAgBT,EAAIE,WAAWN,WAAWY,GAChD,IAAIC,IAAiBA,EAAcC,MAAMnF,EAAKA,MAkB9C,OAhBKkF,GACHT,EAAIW,WAAW,CACbf,WAAY,OAAF,wBAAOhE,EAAMgE,YAAU,CAAE,CAACY,GAAQ,CAAEzB,MAAO,EAAGC,WAAY,EAAG0B,MAAO,QAIlFV,EAAIG,SACF1D,EAAM,CACJmD,WAAYnD,EAAM,CAChB,CAAC+D,GAAQ/D,EAAM,CACbiE,MAAOjE,EAAM,CAAE,CAAClB,EAAKA,MAAO,OAAF,wBAAO2B,EAAa3B,EAAKA,OAAK,CAAEgC,YAAY,aAMvE4B,KAAKW,aAAac,SAASrF,GAAMkE,KACtC,OAAAvD,EAAA,GAAK2C,GAAamB,EAAIC,SAAS,IAAIzE,EAAmBD,EAAMsD,KAC5D,OAAAyB,EAAA,GAAYjF,GAAU2E,EAAIC,SAAS,IAAIvE,EAAiBH,EAAMF,MAKlE,mBAAmB2E,GAA4B,KAAEzE,EAAI,QAAEE,IACrD,MAAM+E,EAAQlE,EAAmBf,GAE3BM,EAAWJ,EAAQqD,KAAK5C,IAAKE,GAASc,EAAad,EAAKpB,GAAIoB,IAC5DH,EAAUR,EAAQqD,KAAK5C,IAAKE,GAASA,EAAKpB,GAAGoF,YACnDJ,EAAIG,SFpED,SAAwB1E,GAC7B,MAAMI,EAAWJ,EAAQoF,OAAO,CAACC,EAAK3D,KAAa2D,EAAI3D,EAAOnC,IAAMmC,EAAS2D,GAAM,IACnF,OAAOrE,EAA4B,CACjCkD,IAAKjC,EAAKjC,EAAQS,IAAK6E,GAAMA,EAAE/F,GAAGoF,aAClCvE,SAAUY,EAAMZ,KAJb,CEoEsBA,IAEzBmE,EAAIG,SACF1D,EAAM,CACJmD,WAAYnD,EAAM,CAChB,CAAC+D,GAAQ/D,EAAM,CACbsC,MAAOtD,EAAQsD,MACfC,WAAYvD,EAAQuD,WACpB0B,MAAOjE,EAAM,CAAE,CAAClB,EAAKA,MAAO,OAAF,UAAO2B,EAAa3B,EAAKA,KAAMU,aAQnE,iBAAiB+D,GAA4B,KAAEzE,EAAI,MAAEF,IACnD,MAAMmF,EAAQlE,EAAmBf,GACjCyE,EAAIG,SACF1D,EAAM,CACJmD,WAAYnD,EAAM,CAChB,CAAC+D,GAAQ/D,EAAM,CACbiE,MAAOjE,EAAM,CACX,CAAClB,EAAKA,MAAOkB,EAAM,CAAEgB,SAAS,EAAMD,cAAc,EAAOD,YAAY,aAM/EgD,QAAQlF,MAAMA,K,6CApGLwE,GAAc,oB,yBAAdA,EAAc,QAAdA,EAAc,YAQzB,aADC,YAAO9E,I,4BAkBR,aADC,YAAOG,I,mCAMR,aADC,YAAOE,I,iCAOR,aADC,YAAOE,I,gCA+BR,aADC,YAAOE,I,uCAsBR,aADC,YAAOE,I,qCAtFGmE,EAAc,aAF1B,YAA2B,CAAEmB,KAAM,YAAaC,SAAUvB,KAE9CG,G,MCnBN,Q,MAAMqB,EAMX,kBAAkBtF,GAChB,OAAOA,EAAMgE,WAGf,wBAAwB/D,GACtB,OAAQb,GAAea,EAASb,GAGlC,mBAAmB4E,GACjB,OAAQuB,GAAgCvB,EAAWtD,EAAmB6E,IAGxE,uBAAuBC,GACrB,OAAQD,GAAgCC,EAAaD,GAAST,MAAMS,EAAQ5F,MAG9E,6BACEM,EACAuF,GAEA,OAAQD,GACQrF,OAAOC,OAAOqF,EAAaD,GAAST,OAAO3C,OAAQgD,IAAOA,EAAExD,YACxDrB,IAAK6E,GAAMA,EAAE5D,QAAQkE,OAC5BnF,IAAKlB,GAAOa,EAASb,K,OA5B7B,EAAAa,SAAW,EAAgByF,YAAkB,GAC7C,EAAA3B,IAAM,EAAgB4B,aAAa,GACnC,EAAAC,MAAQ,EAAgBC,cAAoB,GAGnD,aADC,YAAS,CAAC,K,qBAKX,aADC,YAAS,CAACP,EAAmBrF,Y,2BAK9B,aADC,YAAS,CAACqF,EAAmBtB,c,sBAK9B,aADC,YAAS,CAACsB,EAAmBQ,e,0BAK9B,aADC,YAAS,CAACR,EAAmBrF,SAAUqF,EAAmBQ,e,mCArBtD,G,4ECLA,SAASC,EAAiBC,EAAYC,EAAeC,GACxD,OAAIA,EACOH,EAAiBC,EAAYC,GAAepC,KAAK,OAAAvD,EAAA,GAAI6F,GAAQ,YAAQA,GAAQD,KAAkBC,GAAQD,EAAeC,KAE1H,IAAIC,EAAA,EAAWC,IAClB,MAAMC,EAAU,IAAIC,IAAMF,EAAWG,KAAkB,IAAbD,EAAEE,OAAeF,EAAE,GAAKA,GAClE,IAAIG,EACJ,IACIA,EAAWV,EAAWM,GAE1B,MAAOK,GAEH,YADAN,EAAW5G,MAAMkH,GAGrB,GAAK,OAAAC,EAAA,GAAWX,GAGhB,MAAO,IAAMA,EAAcK,EAASI,K,oJCnBrC,SAASG,KAAkBV,GAC9B,OAAQW,IACJ,IAAIC,EAKJ,MAJqC,mBAA1BZ,EAAKA,EAAKM,OAAS,KAC1BM,EAAUZ,EAAKa,OAGZF,EAAOG,KAAK,IAAIC,EADHf,EACuCY,KAGnE,MAAMG,EACF,YAAYC,EAAaJ,GACrBxD,KAAK4D,YAAcA,EACnB5D,KAAKwD,QAAUA,EAEnB,KAAKV,EAAYS,GACb,OAAOA,EAAOM,UAAU,IAAI,GAAyBf,EAAY9C,KAAK4D,YAAa5D,KAAKwD,WAGhG,MAAM,WAAiCM,EAAA,EACnC,YAAYC,EAAaH,EAAaJ,GAClCQ,MAAMD,GACN/D,KAAK4D,YAAcA,EACnB5D,KAAKwD,QAAUA,EACfxD,KAAKiE,UAAY,GACjB,MAAMC,EAAMN,EAAYV,OACxBlD,KAAKpD,OAAS,IAAIM,MAAMgH,GACxB,IAAK,IAAIzF,EAAI,EAAGA,EAAIyF,EAAKzF,IACrBuB,KAAKiE,UAAUE,KAAK1F,GAExB,IAAK,IAAIA,EAAI,EAAGA,EAAIyF,EAAKzF,IAAK,CAC1B,IAAI2F,EAAaR,EAAYnF,GAC7BuB,KAAKqE,IAAI,OAAAC,EAAA,GAAkBtE,KAAMoE,OAAYG,EAAW9F,KAGhE,WAAW+F,EAAaC,EAAYC,GAChC1E,KAAKpD,OAAO8H,GAAcD,EAC1B,MAAMR,EAAYjE,KAAKiE,UACvB,GAAIA,EAAUf,OAAS,EAAG,CACtB,MAAMyB,EAAQV,EAAUW,QAAQF,IACjB,IAAXC,GACAV,EAAUY,OAAOF,EAAO,IAIpC,kBAEA,MAAMG,GACF,GAA8B,IAA1B9E,KAAKiE,UAAUf,OAAc,CAC7B,MAAMN,EAAO,CAACkC,KAAU9E,KAAKpD,QACzBoD,KAAKwD,QACLxD,KAAK+E,YAAYnC,GAGjB5C,KAAK+D,YAAYd,KAAKL,IAIlC,YAAYA,GACR,IAAIoC,EACJ,IACIA,EAAShF,KAAKwD,QAAQyB,MAAMjF,KAAM4C,GAEtC,MAAOQ,GAEH,YADApD,KAAK+D,YAAY7H,MAAMkH,GAG3BpD,KAAK+D,YAAYd,KAAK+B,I,wDCjE9B,MAAME,GACF,YAAYC,GACRnF,KAAKmF,UAAYA,EAErB,KAAKrC,EAAYS,GACb,OAAOA,EAAOM,UAAU,IAAI,GAAoBf,EAAY9C,KAAKmF,aAGzE,MAAM,WAA4BC,GAAA,EAC9B,YAAYrB,EAAaoB,GACrBnB,MAAMD,GACN/D,KAAKmF,UAAYA,EACjBnF,KAAKqF,UAAW,EAChBrF,KAAKsF,MAAQ,EAEjB,MAAMR,GACF,MAAMf,EAAc/D,KAAK+D,YACrB/D,KAAKqF,UACLrF,KAAKuF,iBAAiBT,GAErB9E,KAAKqF,UACNtB,EAAYd,KAAK6B,GAGzB,iBAAiBA,GACb,IACI,MAAME,EAAShF,KAAKmF,UAAUL,EAAO9E,KAAKsF,SAC1CtF,KAAKqF,SAAWG,QAAQR,GAE5B,MAAO5B,GACHpD,KAAK+D,YAAY7H,MAAMkH,K,iBCpBnC,MAAMqC,GAAM,CAAC,oB,mBAQPC,EACF,YAAYC,EAASC,GACjB5F,KAAK2F,QAAUA,EACf3F,KAAK6F,kBAAoB,IAAIC,EAAA,EAC7B9F,KAAK+F,WAAa,IAAID,EAAA,EACtB9F,KAAKgG,eAAiB,IAAIC,EAAA,OAAgB1B,GAC1CvE,KAAKkG,SAAW,IAAID,EAAA,OAAgB1B,GACpCvE,KAAKmG,QAAU,IAAIF,EAAA,EAbG,KActBjG,KAAKoG,OAAS,IAAIH,EAAA,EAfG,KAgBrBjG,KAAKqG,cAAgB,IAAIJ,EAAA,OAAgB1B,GACzCvE,KAAKsG,YAAc,IAAIL,EAAA,OAAgB1B,GACvCvE,KAAKuG,kBAAoB,IAAIN,EAAA,OAAgB1B,GAC7CvE,KAAKwG,YAAc,IAAIP,EAAA,OAAgB1B,GAEvCvE,KAAKyG,MAAQzG,KAAK0G,gBAAgB,WAClC1G,KAAK2G,YAAc3G,KAAK0G,gBAAgB,iBACxC1G,KAAK9D,MAAQ8D,KAAK0G,gBAAgB,WAClC1G,KAAK4G,UAAY5G,KAAK0G,gBAAgB,eACtC1G,KAAK6G,sBAAwB7G,KAAK0G,gBAAgB,2BAClD1G,KAAK8G,mBAAqB9G,KAAK0G,gBAAgB,wBAC/C1G,KAAK+G,WAAa,YAAkBnB,GAGxC,cAAgB,OAAO5F,KAAKkG,SAASpB,MACrC,YAAYkC,GACRhH,KAAKkG,SAASjD,KAAK+D,GAGvB,aAAe,OAAOhH,KAAKmG,QAAQrB,MACnC,WAAWmC,GACPjH,KAAKmG,QAAQlD,KAAKgE,GApCI,KAuC1B,YAAc,OAAOjH,KAAKoG,OAAOtB,MACjC,UAAUoC,GACNlH,KAAKoG,OAAOnD,KAAKiE,GA1CI,KA6CzB,iBAAiBC,GACbnH,KAAKqG,cAAcpD,KAAKkE,GAG5B,eAAeC,GACXpH,KAAKsG,YAAYrD,KAAKmE,GAG1B,qBAAqBC,GACjBrH,KAAKuG,kBAAkBtD,KAAKoE,GAMhC,iBAAmB,OAAOrH,KAAKwG,YAAY1B,MAC3C,eAAewC,GACXtH,KAAKwG,YAAYvD,KAAKqE,GAE1B,WAEI,IAAKtH,KAAK+G,WACN,OAEJ,IAAIQ,EAAwB,OAAAC,EAAA,IAAG,GAC/B,IAAKC,OAAOC,KAAOD,OAAOC,GAAGC,OAAQ,CAMjC,MAAMC,EAA4B,IAAI9B,EAAA,EACtC9F,KAAK6H,0BAA4BJ,OAAOK,wBACxCL,OAAOK,wBAA0B,KACzB9H,KAAK6H,2BACL7H,KAAK6H,4BAET7H,KAAK2F,QAAQoC,IAAI,IAAMH,EAA0B3E,MAAK,KAE1DsE,EAAwBK,EAA0BtH,KAAK,OAAA0H,EAAA,GAAK,GAAI,OAAAC,EAAA,IAAU,IAG9E,MAAMC,EA2Yd,SAAgCC,EAAkBC,EAAYb,EAAuBc,EAAUC,EAAWC,EAAeC,GACrH,MAAMC,EAAgB,OAAAC,EAAA,GAAc,CAACN,EAAYG,IAAgBjI,KAAKgD,EAAe,OAAAoF,EAAA,GAAc,CAACL,EAAUC,KAAc,OAAAvL,EAAA,GAAI,EAAE4L,EAAoBC,MAClJ,MAAO5B,EAASM,GAAcqB,GACvBzB,EAAOD,GAAU2B,EACxB,OAAO5B,EAAU,CAAGA,UAASM,aAAYJ,QAAOD,eAAY1C,KAEhE,OAAO,OAAAmE,EAAA,GAAc,CAACP,EAAkBM,EAAe,OAAAjB,EAAA,GAAGgB,KACrDlI,MAGwBuI,EAHKtB,EAI3B,OAAAjH,EAAA,GCxfJ,YAA0BsD,GAC7B,IAAIJ,EAAU,KAOd,MANmD,mBAAxCI,EAAYA,EAAYV,OAAS,KACxCM,EAAUI,EAAYH,OAEC,IAAvBG,EAAYV,QAAgB,YAAQU,EAAY,MAChDA,EAAcA,EAAY,GAAGkF,SAEzBvF,GAAWA,EAAOG,KAAKqF,KAAK,OAAAC,GAAA,GAAK,CAACzF,KAAWK,IAAe,IAAI,IAAsBJ,IAR3F,CDwfyBqF,ID3fN1D,EC2f2B,EAAE8D,EAAGC,MAAmBA,ED1fjE3F,GAAWA,EAAOG,KAAK,IAAIwB,GAAkBC,KC0fmC,OAAApI,EAAA,GAAI,EAAE+H,KAAWA,KAJ/C,OAAAqE,GAAA,GAAKC,QAAiB7E,GAAY,OAAA8E,GAAA,MAGhG,IAAiCR,ED1fP1D,ECgf1B,CA3YiDnF,KAAK6F,kBAAmB7F,KAAKkG,SAAUqB,EAAuBvH,KAAKoG,OAAQpG,KAAKmG,QAASnG,KAAKwG,YAAaxG,KAAK2F,SAASrF,KAAK,OAAAgJ,EAAA,GAAIC,IAGvKvJ,KAAKgG,eAAe/C,KAAKsG,MAyWbC,EAxWGD,IAEVE,GAAcF,IACfA,EAAOG,WAsWZ,OAAAC,EAAA,GAASJ,GACPA,EAGDE,GAAcF,GACP,OAAA/B,EAAA,GAAG+B,GAIP,IAAI1G,EAAA,EAAW+G,IAClB,IAAIC,GAAU,EACVC,GAAW,EACf,MAAMC,EAAWC,IACbF,GAAW,EACND,IACDG,EAAMC,OAAOC,oBAAoB,UAAWH,GAC5CH,EAAQ3G,KAAK+G,EAAMC,UAI3B,OADAV,EAAOY,iBAAiB,UAAWJ,GAC5B,KACHF,GAAU,EACLC,GACDN,EAAQD,MAGjBjJ,KAAK,OAAA0H,EAAA,GAAK,GAAI,OAAAC,EAAA,QAAU1D,IAxBhB,OAAAiD,EAAA,QAAGjD,KAtWV,OAAA6F,EAAA,GAAUpK,KAAK+F,YE1GnB,OAAAsE,EAAA,GAAU,IAAIvE,EAAA,IAHf,IFgdiB0D,EAjWhBtB,EAAUrE,UAAU0F,IAChBvJ,KAAKsK,QAAUf,EACXA,GAAUvJ,KAAKuK,qBACfvK,KAAKwK,kBAAkBjB,EAAQvJ,KAAKuK,qBAExCvK,KAAKuK,yBAAsBhG,IA2UvC,SAA0B2D,EAAWG,EAAUC,GACpC,OAAAI,EAAA,GAAc,CAACR,EAAWG,EAAUC,IACtCzE,UAAU,EAAE0F,EAAQrC,EAAOD,KAAYsC,GAAUA,EAAOkB,QAAQvD,EAAOD,IAFhF,CAzUyBiB,EAAWlI,KAAKoG,OAAQpG,KAAKmG,SA8UtD,SAAsC+B,EAAWwC,GACtC,OAAAhC,EAAA,GAAc,CACjBR,EACAwC,IACD7G,UAAU,EAAE0F,EAAQlC,KAAsBkC,GAAUlC,GAAoBkC,EAAOoB,mBAAmBtD,IAJzG,CA7UqCa,EAAWlI,KAAKuG,mBAiarD,SAA0B2B,EAAWE,EAAYwC,EAAiBC,EAAeH,EAAqBI,GAClG,MAAMC,EAAgB,OAAArC,EAAA,GAAc,CAACkC,EAAiBC,IACjDvK,KAAK,OAAAvD,EAAA,GAAI,EAAEoK,EAAcC,OAAmBD,eAAcC,iBAEzD4D,EAAqBD,EACtBzK,KAAK2K,GAAc/C,EAAWqB,KAAYA,IAmBnD,SAA0BA,GACtB,MAAM9M,EAAQ8M,EAAO2B,iBACrB,OAAkB,IAAXzO,GAA0C,IAAVA,EAF3C,CAnB+E8M,KAGrE4B,EAAiB/C,EAClB9H,KAAK2K,GAAc/C,EAAW,CAACqB,EAAQvC,MAAcuC,GAAUA,EAAOvC,UAAYA,IAEjFoE,EAAgBlD,EAAU5H,KAAK2K,GAAc,OAAAvC,EAAA,GAAc,CAACN,EAAY2C,IAAiB,EAAE/D,EAASqE,GAAa9B,OAAaA,GAC/HvC,GAAWuC,EAAOvC,UAAaqE,EAAWlE,eAAkBkE,EAAWjE,cAC5E,OAAAkE,EAAA,GAAMF,EAAeD,EAAgBH,GAChC1K,KAAKgD,EAAe,OAAAoF,EAAA,GAAc,CAACR,EAAWE,EAAY2C,EAAeL,KAAwB,OAAA3N,EAAA,GAAI,EAAEkM,EAAGrM,KAAYA,GAAS,OAAAwN,EAAA,GAAUU,IACzIjH,UAAU,EAAE0F,EAAQvC,EAASqE,EAAYhE,MACrCL,GAAYuC,IAGjBA,EAAOvC,QAAUA,EACjBuC,EAAOgC,aAAa5O,OAAOmB,OAAO,CAAEkJ,UAChCK,oBAAoBgE,OArBhC,CAhayBnD,EAAWlI,KAAKkG,SAAUlG,KAAKqG,cAAerG,KAAKsG,YAAatG,KAAKuG,kBAAmBvG,KAAK+F,YAE9GmC,EAAUsD,UAMd,0BACI,MAAO,GAEX,kBACIxL,KAAK6F,kBAAkB5C,KAAKjD,KAAKmI,iBAAiBsD,eAEtD,cACQzL,KAAKsK,UACLtK,KAAKsK,QAAQZ,UACbjC,OAAOK,wBAA0B9H,KAAK6H,2BAE1C7H,KAAKgG,eAAe0F,WACpB1L,KAAKkG,SAASwF,WACd1L,KAAKmG,QAAQuF,WACb1L,KAAKoG,OAAOsF,WACZ1L,KAAKqG,cAAcqF,WACnB1L,KAAKsG,YAAYoF,WACjB1L,KAAKuG,kBAAkBmF,WACvB1L,KAAK6F,kBAAkB6F,WACvB1L,KAAKwG,YAAYkF,WACjB1L,KAAK+F,WAAW9C,OAChBjD,KAAK+F,WAAW2F,WAGpB,YACQ1L,KAAKsK,QACLtK,KAAKsK,QAAQqB,YAGb3L,KAAK4L,mBAAmBC,cAAgB,EAIhD,aACQ7L,KAAKsK,QACLtK,KAAKsK,QAAQwB,aAGb9L,KAAK4L,mBAAmBC,cAAgB,EAIhD,YACQ7L,KAAKsK,QACLtK,KAAKsK,QAAQyB,YAIb/L,KAAK4L,mBAAmBC,cAAgB,EAIhD,OAAOG,EAASC,GACRjM,KAAKsK,QACLtK,KAAKsK,QAAQ4B,OAAOF,EAASC,GAG7BjM,KAAK4L,mBAAmBO,KAAO,CAAEH,UAASC,kBAIlD,OACQjM,KAAKsK,QACLtK,KAAKsK,QAAQ8B,OAGbpM,KAAK4L,mBAAmBS,OAAQ,EAIxC,SACQrM,KAAKsK,QACLtK,KAAKsK,QAAQgC,SAGbtM,KAAK4L,mBAAmBS,OAAQ,EAIxC,UACI,OAAIrM,KAAKsK,QACEtK,KAAKsK,QAAQiC,YAEpBvM,KAAKuK,uBACIvK,KAAKuK,oBAAoB8B,MAK1C,UAAUG,GACFxM,KAAKsK,QACLtK,KAAKsK,QAAQmC,UAAUD,GAGvBxM,KAAK4L,mBAAmBY,OAASA,EAIzC,YACI,OAAIxM,KAAKsK,QACEtK,KAAKsK,QAAQoC,YAEpB1M,KAAKuK,qBAA0D,MAAnCvK,KAAKuK,oBAAoBiC,OAC9CxM,KAAKuK,oBAAoBiC,OAE7B,EAGX,gBAAgBG,GACZ,GAAI3M,KAAKsK,QACL,OAAOtK,KAAKsK,QAAQsC,gBAAgBD,GAGpC3M,KAAK4L,mBAAmBe,aAAeA,EAI/C,kBACI,OAAI3M,KAAKsK,QACEtK,KAAKsK,QAAQuC,kBAEpB7M,KAAKuK,qBAAgE,MAAzCvK,KAAKuK,oBAAoBoC,aAC9C3M,KAAKuK,oBAAoBoC,aAE7B,EAGX,4BACI,OAAO3M,KAAKsK,QAAUtK,KAAKsK,QAAQwC,4BAA8B,GAGrE,yBACI,OAAO9M,KAAKsK,QAAUtK,KAAKsK,QAAQyC,yBAA2B,EAGlE,iBACI,GAAK/M,KAAK+G,YAAeU,OAAOC,GAGhC,OAAI1H,KAAKsK,QACEtK,KAAKsK,QAAQY,iBAEpBlL,KAAKuK,qBAAiE,MAA1CvK,KAAKuK,oBAAoBsB,cAC9C7L,KAAKuK,oBAAoBsB,eAE5B,EAGZ,iBACI,OAAI7L,KAAKsK,QACEtK,KAAKsK,QAAQ0C,iBAEpBhN,KAAKuK,qBAAuBvK,KAAKuK,oBAAoB4B,KAC9CnM,KAAKuK,oBAAoB4B,KAAKH,QAElC,EAGX,qBACI,OAAOhM,KAAKsK,QAAUtK,KAAKsK,QAAQ2C,qBAAuB,UAG9D,4BACI,OAAOjN,KAAKsK,QAAUtK,KAAKsK,QAAQ4C,4BAA8B,GAGrE,cACI,OAAOlN,KAAKsK,QAAUtK,KAAKsK,QAAQ6C,cAAgB,EAGvD,cACI,OAAOnN,KAAKsK,QAAUtK,KAAKsK,QAAQ8C,cAAgB,GAGvD,oBACI,OAAOpN,KAAKsK,QAAUtK,KAAKsK,QAAQ+C,oBAAsB,GAG7D,mBAII,OAHKrN,KAAKuK,sBACNvK,KAAKuK,oBAAsB,IAExBvK,KAAKuK,oBAGhB,kBAAkBhB,EAAQ9M,GACtB,MAAM,cAAEoP,EAAa,aAAEc,EAAY,OAAEH,EAAM,MAAEH,EAAK,KAAEF,GAAS1P,EAC7D,OAAQoP,GACJ,KAAK,EACDtC,EAAOoC,YACP,MACJ,KAAK,EACDpC,EAAOuC,aACP,MACJ,KAAK,EACDvC,EAAOwC,YAGK,MAAhBY,GACApD,EAAOqD,gBAAgBD,GAEb,MAAVH,GACAjD,EAAOkD,UAAUD,GAER,MAATH,IACAA,EAAQ9C,EAAO6C,OAAS7C,EAAO+C,UAEvB,MAARH,GACA5C,EAAO2C,OAAOC,EAAKH,QAASG,EAAKF,gBAIzC,gBAAgBpK,GAGZ,OAAO7B,KAAKgG,eAAe1F,KAG3B,OAAAgN,EAAA,GAAU/D,GACCA,EAAS/G,EAAkB+K,IAC9BhE,EAAOY,iBAAiBtI,EAAM0L,IAC9BA,IAIA,IACQhE,EAAOW,qBACPX,EAAOW,oBAAoBrI,EAAM0L,GAGzC,MAAOC,OACN,OAAAhG,EAAA,MAIRjE,GAAW,IAAIV,EAAA,EAAW4K,GAAYlK,EAAOM,UAAU,CACpDZ,KAAM6B,GAAS9E,KAAK2F,QAAQoC,IAAI,IAAM0F,EAASxK,KAAK6B,IACpD5I,MAAOA,GAASuR,EAASvR,MAAMA,GAC/BwP,SAAU,IAAM+B,EAAS/B,cAG7B,OAAAtB,EAAA,GAAUpK,KAAK+F,c,OAGvBL,EAAcgI,UAAO,SAA+BC,GAAK,OAAO,IAAKA,GAAKjI,GAAe,KAAyB,KAAgB,KAAyB,OAC3JA,EAAckI,UAAO,KAAyB,CAAE9R,KAAM4J,EAAemI,UAAW,CAAC,CAAC,mBAAoBC,UAAW,SAA6BC,EAAIlN,GAE5I,GAF4J,EAALkN,GACrJ,KAAmBtI,GAAK,GACjB,EAALsI,EAAQ,CACV,IAAIC,EACJ,KAAsBA,EAAK,UAA0BnN,EAAIsH,iBAAmB6F,EAAGC,SAC9EC,OAAQ,CAAElH,QAAS,UAAWC,OAAQ,SAAUC,MAAO,QAASC,aAAc,eAAgBC,WAAY,aAAcC,iBAAkB,mBAAoBC,WAAY,aAAc6G,yBAA0B,4BAA8BC,QAAS,CAAE3H,MAAO,QAASE,YAAa,cAAezK,MAAO,QAAS0K,UAAW,YAAaC,sBAAuB,wBAAyBC,mBAAoB,sBAAwBuH,MAAO,EAAGC,KAAM,EAAGC,OAAQ,CAAC,CAAC,mBAAoB,KAAMC,SAAU,SAAgCT,EAAIlN,GAAgB,EAALkN,GAC5hB,KAAiB,EAAG,MAAO,KAAM,IAChCU,cAAe,EAAGC,gBAAiB,I,MAiI5C,SAAStF,GAAgBG,GAASoF,EAAWC,EAAcpG,IACvD,GAAIe,GAAUqF,GAAgBrF,EAAOjC,aAAesH,EAAatH,WAE7DiC,EAAOG,cAEN,KAAKkF,EAKN,YAJIrF,GAEAA,EAAOG,WAIV,GAAIH,EACL,OAAOA,EAIX,MAAMsF,EAAYrG,EAAOsG,kBAAkB,IAAM,IAAIpH,GAAGC,OAAOgH,EAAWC,IAG1E,OAFAC,EAAU7H,QAAU4H,EAAa5H,QACjC6H,EAAUvH,WAAasH,EAAatH,WAC7BuH,EAmCX,SAASpF,GAAcF,GACnB,MAAO,oBAAqBA,EAGhC,SAAS0B,GAAc8D,EAAUC,GAC7B,OAAO,OAAA1O,EAAA,GAAKgD,EAAeyL,GAAW,OAAAnQ,GAAA,GAAO,EAAEkG,EAAOmK,KAAWD,EAASC,EAAOnK,IAAS,OAAA/H,EAAA,GAAI,EAAE+H,KAAWA,I,mBAWzGoK,G,OAENA,EAAoBC,UAAO,KAAwB,CAAErT,KAAMoT,IAC3DA,EAAoBE,UAAO,KAAwB,CAAEC,QAAS,SAAqC1B,GAAK,OAAO,IAAKA,GAAKuB,M,+BGxkBvH,gB,oBAEE,qCAAyB,mDAAzB,CAAyB,qCAAzB,CAAyB,yC,0BAM3B,gBACE,2BACF,Q,oBADkB,mCCEb,a,MAAMI,EAOX,YAAsCC,GAAA,KAAAA,WAEtC,WACoB,UAAdvP,KAAKlE,OACPkE,KAAKgH,QbnBiB,EAACwI,EAAaC,EAAO,CAAEC,OAAO,MACxD,IAAK,aAAaC,KAAKH,GAAM,OAAO,KAGpC,IAAI/Q,EACJ,MAAMmR,EAAW,CACf,0BACA,mBACA,kBACA,sBACA,qBAIF,IAAKnR,EAAI,EAAGA,EAAImR,EAAS1M,SAAUzE,EACjC,GAAImR,EAASnR,GAAGkR,KAAKH,GACnB,OAAOI,EAASnR,GAAGoR,KAAKL,GAAK,GAIjC,GAAIC,EAAKC,MAAO,CAGd,MAAMI,EAASN,EAAIO,MAAM,eACzB,IAAKtR,EAAI,EAAGA,EAAIqR,EAAO5M,SAAUzE,EAC/B,GAAI,eAAekR,KAAKG,EAAOrR,IAC7B,OAAOqR,EAAOrR,KA1BM,CamBMuB,KAAKgQ,OAEf,oBAAPtI,IAAoB1H,KAAKiQ,kBAIhC,iBACN,MAAMC,EAAMX,SAASY,cAAc,UACnCD,EAAIE,IAAM,qCACVpQ,KAAKuP,SAAS5P,KAAK0Q,YAAYH,I,6CApBtBZ,GAAiB,KAOR,O,uBAPTA,EAAiB,sWDZ9B,UACE,uBAQA,uBAGF,Q,MAZc,wBAET,qCAOG,uC,mUCGD,G,sBCHC,iB,KAAsC,iB,YAAA,kB,sBAUtC,iB,KAAyC,iB,YAAA,kB,sBAMzC,iB,KAAwC,iB,YAAA,kBChBzC,a,MAAMgB,EAGX,a,6CAHWA,I,uBAAAA,EAAiB,4KDT9B,gBACE,gBACE,aACE,eAAgB,qBAAU,OAC1B,eACF,OACA,aACE,eAAgB,oBAAS,OACzB,aACE,yBACF,OACF,OACA,cACE,gBAAgB,2BAAe,OAC/B,gBACF,OACA,cACE,gBAAgB,SAAiE,OACjF,cACE,yBACF,OACF,OACA,cACE,gBAAgB,SAA8D,OAC9E,cACE,yBACF,OACF,OACF,OACF,Q,MAzBU,iDAKkB,wCAKlB,sDAGY,4EAEM,2CAIN,yEAEM,4C,uFChBrB,GCFA,S,MAAMC,EACX,eAEA,a,6CAHWA,I,uBAAAA,EAAuB,8KCPpC,iBACG,iBAAC,S,kgBDMG,G,0BEDG,eAA+C,QAAc,Q,yBAAd,sB,0BADnD,kBACE,mBAAE,yBACJ,Q,yBAD0B,2C,uBAc5B,aAAoC,kBAAO,Q,yBAC3C,iB,yBAEE,gCAA0B,iCAA1B,CAA0B,gCAA1B,CAA0B,oC,wCAtB9B,kBACE,eACA,cACE,QACA,wBAGF,OAEA,yBAKA,cAEA,aAAI,qBAAU,OACd,yBAEA,uBACA,wBAQA,qBACE,qBAAsB,yDAAkB,qBAAS,OACnD,OACF,O,uBA9BM,gDAEF,4CACO,8CAMP,0CAAgC,uBAAhC,CAAgC,uBAI/B,kDAGW,2BAET,0CAEe,uC,0BAtBxB,QACE,6B,gBAgCF,Q,8BAhCY,uCAAoB,e,0BAmC9B,eACE,QACA,kBAAkE,uBAAE,OACtE,Q,oBAFE,sE,uBAMF,eAAmC,2BAAgB,8BAA2C,QC1BzF,a,MAAMC,EASX,YAAYC,EAA+B7P,GAAA,KAAAA,QACzCZ,KAAK0Q,MAAQD,EAAME,SAASC,SAASxR,IAAI,MACzCY,KAAKnE,GAAKyD,OAAOU,KAAK0Q,OAEtB1Q,KAAK6Q,YAAc7Q,KAAK8Q,kBAAkBxQ,KAAK,OAAAvD,EAAA,GAAKgU,GAAmBA,EAAe/Q,KAAKnE,MAC3FmE,KAAKgR,MAAQhR,KAAK6Q,YAAYvQ,KAAK,OAAAvD,EAAA,GAAKf,GAASA,EAAKgC,SACtDgC,KAAKiR,YAAcjR,KAAK6Q,YAAYvQ,KAAK,OAAAvD,EAAA,GAAKf,GAASA,EAAKoC,aAG9D,WACE4B,KAAKY,MAAME,SAAS,IAAIlF,EAAQoE,KAAKnE,KAAKgI,YAG5C,QACE0L,SAAS5P,KAAKuR,eAAe,CAAEC,MAAO,QAASC,SAAU,Y,6CAvBhDZ,GAAmB,sB,uBAAnBA,EAAmB,yjB,GAAA,MDjBhC,gC,gBAmCA,yCAOA,0C,qBA1Ce,0CAAuC,gB,6gBCkBP,aAA5C,YAAO,EAAmBa,mB,2CADtB,G,0BCfL,kBACE,eACA,cACA,cAA8B,iCAAiB,OAC/C,aACF,Q,mCAJM,gDACD,+DACA,iC,wCAKH,mBAEE,mEAGA,0BACF,Q,0BAfJ,QACE,2B,gBAOA,mBACE,0B,gCAOF,OACF,Q,oBAhB4B,2CASrB,oG,uBAUL,cACE,sCAA0B,kBAAqD,uBAAE,OACnF,Q,0BAFA,qB,qCAAI,2C,uBAKN,cACE,uCAA2B,8BAC7B,QCjBA,MAAMC,GAAiB,uBCDVC,GAAkB,IAAaC,SALrB,CACrB,CAAEC,KAAM,GAAIC,UDeP,M,MAAMC,EASX,YAAoB/Q,GAAA,KAAAA,QANpB,KAAAH,WAAiC,CAAErE,KAAM,EAAG6D,QAAS,GAOnDD,KAAK4R,OAAS5R,KAAK6R,uBAAuBvR,KACxC,OAAAvD,EAAA,GAAK+U,GAAkBA,EAAc9R,KAAKS,aAC1C,OAAA1D,EAAA,GAAKgV,GAAiBA,EAAahV,IAAK6E,GAAMA,EAAE5D,UAElDgC,KAAKgS,OAAShS,KAAKiS,aAAa3R,KAAK,OAAAvD,EAAA,GAAKmV,GAAiBA,EAAalS,KAAKS,cAC7ET,KAAKiR,YAAcjR,KAAKgS,OAAO1R,KAC7B,OAAAvD,EAAA,GAAKoV,GAAMxV,OAAOC,OAAOuV,EAAE5Q,OAAO/C,KAAMoD,GAAMA,EAAExD,cAIpD,WACE4B,KAAKoS,WAEP,WACEpS,KAAKY,MAAME,SAAS,IAAI3E,EAAY6D,KAAKS,aAE3C,kBACET,KAAKS,WAAWrE,OAChB4D,KAAKoS,WAGP,UAAUC,GAGR,OAFAA,EAAOA,EAAKC,QAAQhB,GAAgB,KAE3BpO,OAAS,IACTmP,EAEF,GAAGA,EAAKvJ,MAAM,EAAG,W,6CArCf6I,GAAmB,Y,uBAAnBA,EAAmB,gY,GAAA,MDrBhC,aAAI,wBAAa,OACjB,gC,gBAmBA,yCAMA,qB,sCAzBe,+CAA+B,cAyB1C,+C,yUCJsC,aAAvC,YAAO,EAAmBpP,c,mCACuB,aAAjD,YAAO,EAAmBgQ,wB,gDAFtB,ICdL,CAAEd,KAAM,MAAOC,UAAW,MCGrB,a,MAAMc,G,8BAAAA,I,oDAAAA,IAAoB,SAJtB,CAAC,Q,GAIL,GCKA,S,MAAMC,G,8BAAAA,I,oDAAAA,IAAgB,SAHlB,CAAC,IAAc,GAAqB,O,GAGxC,GCFA,S,MAAMC,G,8BAAAA,I,oDAAAA,IAAgB,UAHhB,GAAE,SADJ,CAAC,IAAc,IAAc,O,GAIjC,GCOA,S,MAAMC,G,8BAAAA,I,oDAAAA,IAAe,SATjB,CACP,IACApB,GACA,GACA,GACA,IAAWqB,WAAW,CAAC,Q,GAIpB","file":"x","sourcesContent":["import { Page } from '../../shared/models'\nimport { Post } from '../models/post.model'\nimport { PostRequestOptions } from '../posts.service'\n\nexport class GetPost {\n  static readonly type = '[Portfolio] Get Post'\n  constructor(public id: number) {}\n}\nexport class GetPostSuccess {\n  static readonly type = '[Portfolio API] Get Post Success'\n  constructor(public post: Post) {}\n}\nexport class GetPostError {\n  static readonly type = '[Portfolio API] Get Post Error'\n  constructor(public id: number, public error: Error) {}\n}\n\nexport class GetPostPage {\n  static readonly type = '[Portfolio] Get Post Page'\n  constructor(public page: PostRequestOptions) {}\n}\nexport class GetPostPageSuccess {\n  static readonly type = '[Portfolio API] Get Post Page Success'\n  constructor(public page: PostRequestOptions, public payload: Page<Post>) {}\n}\nexport class GetPostPageError {\n  static readonly type = '[Portfolio API] Get Post Page Error'\n  constructor(public page: PostRequestOptions, public error: Error) {}\n}\n","import { createSelector } from '@ngxs/store'\nimport { Entity } from '../models'\n\nexport class SharedSelectors {\n  static getEntities<T>(stateClass) {\n    return createSelector([stateClass], (state) => state.entities as { [id: string]: Entity<T> })\n  }\n\n  static getEntityList<T>(stateClass) {\n    return createSelector([stateClass], (state) => Object.values(state.entities) as Entity<T>[])\n  }\n\n  static getEntityIds(stateClass) {\n    return createSelector([stateClass], (state) => Object.keys(state.entities))\n  }\n\n  static getEntityListByPageFn(stateClass) {\n    return (pageIds: number[]) => {\n      return createSelector([stateClass], (state) => pageIds.map((id) => state.entities[id]))\n    }\n  }\n}\n","export const isArray = (item: any): item is any[] => Array.isArray(item)\n\nexport const serializePageQuery = ({ page, ...params }: any) => `?${new URLSearchParams(params)}`\n\nexport const getYoutubeId = (url: string, opts = { fuzzy: true }) => {\n  if (!/youtu\\.?be/.test(url)) return null\n\n  // Look first for known patterns\n  let i: number\n  const patterns = [\n    /youtu\\.be\\/([^#&?]{11})/, // youtu.be/<id>\n    /\\?v=([^#&?]{11})/, // ?v=<id>\n    /&v=([^#&?]{11})/, // &v=<id>\n    /embed\\/([^#&?]{11})/, // embed/<id>\n    /\\/v\\/([^#&?]{11})/, // /v/<id>\n  ]\n\n  // If any pattern matches, return the ID\n  for (i = 0; i < patterns.length; ++i) {\n    if (patterns[i].test(url)) {\n      return patterns[i].exec(url)[1]\n    }\n  }\n\n  if (opts.fuzzy) {\n    // If that fails, break it apart by certain characters and look\n    // for the 11 character key\n    const tokens = url.split(/[/&?=#.\\s]/g)\n    for (i = 0; i < tokens.length; ++i) {\n      if (/^[^#&?]{11}$/.test(tokens[i])) {\n        return tokens[i]\n      }\n    }\n  }\n}\n","/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T\r\n * @param {?} items - Specific items to append to the end of an array\r\n * @return {?}\r\n */\r\nfunction append(items) {\r\n    return (/**\r\n     * @param {?} existing\r\n     * @return {?}\r\n     */\r\n    function appendOperator(existing) {\r\n        // If `items` is `undefined` or `null` or `[]` but `existing` is provided\r\n        // just return `existing`\r\n        /** @type {?} */\r\n        const itemsNotProvidedButExistingIs = (!items || !items.length) && existing;\r\n        if (itemsNotProvidedButExistingIs) {\r\n            return (/** @type {?} */ (existing));\r\n        }\r\n        if (Array.isArray(existing)) {\r\n            return existing.concat((/** @type {?} */ (items)));\r\n        }\r\n        // For example if some property is added dynamically\r\n        // and didn't exist before thus it's not `ArrayLike`\r\n        return (/** @type {?} */ (items));\r\n    });\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T\r\n * @param {...?} operators\r\n * @return {?}\r\n */\r\nfunction compose(...operators) {\r\n    return (/**\r\n     * @param {?} existing\r\n     * @return {?}\r\n     */\r\n    function composeOperator(existing) {\r\n        return operators.reduce((/**\r\n         * @param {?} accumulator\r\n         * @param {?} operator\r\n         * @return {?}\r\n         */\r\n        (accumulator, operator) => operator(accumulator)), existing);\r\n    });\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isStateOperator(value) {\r\n    return typeof value === 'function';\r\n}\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isUndefined(value) {\r\n    return typeof value === 'undefined';\r\n}\r\n/**\r\n * @template T\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isPredicate(value) {\r\n    return typeof value === 'function';\r\n}\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isNumber(value) {\r\n    return typeof value === 'number';\r\n}\r\n/**\r\n * @param {?} index\r\n * @return {?}\r\n */\r\nfunction invalidIndex(index) {\r\n    return Number.isNaN(index) || index === -1;\r\n}\r\n/**\r\n * @template T\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isNil(value) {\r\n    return value === null || isUndefined(value);\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T\r\n * @param {?} operatorOrValue\r\n * @param {?=} existing\r\n * @return {?}\r\n */\r\nfunction retrieveValue(operatorOrValue, existing) {\r\n    // If state operator is a function\r\n    // then call it with an original value\r\n    if (isStateOperator(operatorOrValue)) {\r\n        /** @type {?} */\r\n        const value = operatorOrValue((/** @type {?} */ ((/** @type {?} */ (existing)))));\r\n        return (/** @type {?} */ (value));\r\n    }\r\n    // If operator or value was not provided\r\n    // e.g. `elseOperatorOrValue` is `undefined`\r\n    // then we just return an original value\r\n    if (isUndefined(operatorOrValue)) {\r\n        return (/** @type {?} */ ((/** @type {?} */ (((/** @type {?} */ (existing)))))));\r\n    }\r\n    return (/** @type {?} */ (operatorOrValue));\r\n}\r\n/**\r\n * @template T\r\n * @param {?} condition - Condition can be a plain boolean value or a function,\r\n * that returns boolean, also this function can take a value as an argument\r\n * to which this state operator applies\r\n * @param {?} trueOperatorOrValue - Any value or a state operator\r\n * @param {?=} elseOperatorOrValue - Any value or a state operator\r\n * @return {?}\r\n */\r\nfunction iif(condition, trueOperatorOrValue, elseOperatorOrValue) {\r\n    return (/**\r\n     * @param {?} existing\r\n     * @return {?}\r\n     */\r\n    function iifOperator(existing) {\r\n        // Convert the value to a boolean\r\n        /** @type {?} */\r\n        let result = !!condition;\r\n        // but if it is a function then run it to get the result\r\n        if (isPredicate(condition)) {\r\n            result = condition(existing);\r\n        }\r\n        if (result) {\r\n            return retrieveValue(trueOperatorOrValue, (/** @type {?} */ (existing)));\r\n        }\r\n        return retrieveValue((/** @type {?} */ (elseOperatorOrValue)), (/** @type {?} */ (existing)));\r\n    });\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T\r\n * @param {?} value - Value to insert\r\n * @param {?=} beforePosition\r\n * @return {?}\r\n */\r\nfunction insertItem(value, beforePosition) {\r\n    return (/**\r\n     * @param {?} existing\r\n     * @return {?}\r\n     */\r\n    function insertItemOperator(existing) {\r\n        // Have to check explicitly for `null` and `undefined`\r\n        // because `value` can be `0`, thus `!value` will return `true`\r\n        if (isNil(value) && existing) {\r\n            return (/** @type {?} */ (existing));\r\n        }\r\n        // Property may be dynamic and might not existed before\r\n        if (!Array.isArray(existing)) {\r\n            return [(/** @type {?} */ (value))];\r\n        }\r\n        /** @type {?} */\r\n        const clone = existing.slice();\r\n        /** @type {?} */\r\n        let index = 0;\r\n        // No need to call `isNumber`\r\n        // as we are checking `> 0` not `>= 0`\r\n        // everything except number will return false here\r\n        if ((/** @type {?} */ (beforePosition)) > 0) {\r\n            index = (/** @type {?} */ (beforePosition));\r\n        }\r\n        clone.splice(index, 0, (/** @type {?} */ (value)));\r\n        return clone;\r\n    });\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T\r\n * @param {?} patchObject\r\n * @return {?}\r\n */\r\nfunction patch(patchObject) {\r\n    return (/**\r\n     * @template U\r\n     * @param {?} existing\r\n     * @return {?}\r\n     */\r\n    function patchStateOperator(existing) {\r\n        /** @type {?} */\r\n        let clone = null;\r\n        for (const k in patchObject) {\r\n            /** @type {?} */\r\n            const newValue = patchObject[k];\r\n            /** @type {?} */\r\n            const existingPropValue = existing[k];\r\n            /** @type {?} */\r\n            const newPropValue = isStateOperator(newValue)\r\n                ? newValue((/** @type {?} */ (existingPropValue)))\r\n                : newValue;\r\n            if (newPropValue !== existingPropValue) {\r\n                if (!clone) {\r\n                    clone = Object.assign({}, ((/** @type {?} */ (existing))));\r\n                }\r\n                clone[k] = newPropValue;\r\n            }\r\n        }\r\n        return clone || existing;\r\n    });\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T\r\n * @param {?} selector - Index of item in the array or a predicate function\r\n * that can be provided in `Array.prototype.findIndex`\r\n * @param {?} operatorOrValue - New value under the `selector` index or a\r\n * function that can be applied to an existing value\r\n * @return {?}\r\n */\r\nfunction updateItem(selector, operatorOrValue) {\r\n    return (/**\r\n     * @param {?} existing\r\n     * @return {?}\r\n     */\r\n    function updateItemOperator(existing) {\r\n        /** @type {?} */\r\n        let index = -1;\r\n        if (isPredicate(selector)) {\r\n            index = existing.findIndex(selector);\r\n        }\r\n        else if (isNumber(selector)) {\r\n            index = selector;\r\n        }\r\n        if (invalidIndex(index)) {\r\n            return (/** @type {?} */ (existing));\r\n        }\r\n        /** @type {?} */\r\n        let value = (/** @type {?} */ (null));\r\n        // Need to check if the new item value will change the existing item value\r\n        // then, only if it will change it then clone the array and set the item\r\n        if (isStateOperator(operatorOrValue)) {\r\n            value = operatorOrValue((/** @type {?} */ (existing[index])));\r\n        }\r\n        else {\r\n            value = operatorOrValue;\r\n        }\r\n        // If the value hasn't been mutated\r\n        // then we just return `existing` array\r\n        if (value === existing[index]) {\r\n            return (/** @type {?} */ (existing));\r\n        }\r\n        /** @type {?} */\r\n        const clone = existing.slice();\r\n        clone[index] = (/** @type {?} */ (value));\r\n        return clone;\r\n    });\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T\r\n * @param {?} selector - index or predicate to remove an item from an array by\r\n * @return {?}\r\n */\r\nfunction removeItem(selector) {\r\n    return (/**\r\n     * @param {?} existing\r\n     * @return {?}\r\n     */\r\n    function removeItemOperator(existing) {\r\n        /** @type {?} */\r\n        let index = -1;\r\n        if (isPredicate(selector)) {\r\n            index = existing.findIndex(selector);\r\n        }\r\n        else if (isNumber(selector)) {\r\n            index = selector;\r\n        }\r\n        if (invalidIndex(index)) {\r\n            return (/** @type {?} */ (existing));\r\n        }\r\n        /** @type {?} */\r\n        const clone = existing.slice();\r\n        clone.splice(index, 1);\r\n        return clone;\r\n    });\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { append, compose, iif, insertItem, isStateOperator, patch, removeItem, updateItem };\n\n//# sourceMappingURL=ngxs-store-operators.js.map","import { StateOperator } from '@ngxs/store'\nimport { patch } from '@ngxs/store/operators'\nimport { Entity, EntityPartial, PaginatedEntities } from '../models'\n\nimport { isArray } from '.'\n\nexport const createEntity = <T>(id: Entity<T>['id'], entity: T = null): Entity<T> => ({\n  id,\n  entity,\n  lastUpdatedAt: new Date().toISOString(),\n  isFetching: false,\n  isRefreshing: false,\n  isError: false,\n})\n\nexport function uniq(item: any | any[]): StateOperator<any[]> {\n  return (state: any[]) => {\n    const noUniq = isArray(item) ? item.some((i) => !state.includes(i)) : state.includes(item)\n    if (noUniq) {\n      return state\n    }\n\n    return state.concat(isArray(item) ? item.filter((i) => !state.includes(i)) : item)\n  }\n}\n\nexport function addEntity<T>(entity: Entity<T>): StateOperator<PaginatedEntities<T>> {\n  const id = entity.id.toString()\n  return patch<PaginatedEntities<T>>({ ids: uniq(id), entities: patch({ [id]: entity }) })\n}\n\nexport function addEntities<T>(payload: Entity<T>[]): StateOperator<PaginatedEntities<T>> {\n  const entities = payload.reduce((obj, entity) => ((obj[entity.id] = entity), obj), {})\n  return patch<PaginatedEntities<T>>({\n    ids: uniq(payload.map((p) => p.id.toString())),\n    entities: patch(entities),\n  })\n}\n\nexport function updateEntity<T>(payload: EntityPartial<T>): StateOperator<PaginatedEntities<T>> {\n  return (state: PaginatedEntities<T>) => {\n    const prevEntity = state.entities[payload.id]\n    return {\n      ...state,\n      entities: { ...state.entities, [payload.id]: { ...prevEntity, ...payload } },\n    }\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams, HttpResponse } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\n\nimport { map } from 'rxjs/operators'\nimport { environment } from 'src/environments/environment'\n\nimport { Page } from '../shared/models'\n\nimport { Post } from './models/post.model'\n\nexport interface PostRequestOptions {\n  page: number\n  perPage?: number\n}\n\nconst { apiUrl } = environment\n\nconst headersGetTotal = (headers: HttpHeaders) => {\n  const wpTotal = headers.get('x-wp-total')\n  if (wpTotal == null) throw Error('Header \"x-wp-total\" missing in response')\n\n  return Number(wpTotal)\n}\nconst headersGetTotalPages = (headers: HttpHeaders) => {\n  const wpTotalPages = headers.get('x-wp-totalpages')\n  if (wpTotalPages == null) throw Error('Header \"x-wp-totalpages\" missing in response')\n\n  return Number(wpTotalPages)\n}\n\nconst getPostPageFromResponse = (response: HttpResponse<Post[]>): Page<Post> => {\n  const { body, headers } = response\n  return { body, total: headersGetTotal(headers), totalPages: headersGetTotalPages(headers) }\n}\n\n@Injectable({ providedIn: 'root' })\nexport class PostsService {\n  constructor(private http: HttpClient) {}\n\n  getPost(id: number) {\n    return this.http.get<Post>(`${apiUrl}posts/${id}`)\n  }\n\n  getPosts({ page, perPage = 10 }: PostRequestOptions) {\n    const params = new HttpParams({\n      fromObject: {\n        page: String(page),\n        per_page: String(perPage),\n      },\n    })\n\n    return this.http\n      .get<Post[]>(`${apiUrl}posts`, { params, observe: 'response' })\n      .pipe(map(getPostPageFromResponse))\n  }\n}\n","import { Injectable } from '@angular/core'\n\nimport { catchError, map } from 'rxjs/operators'\n\nimport { Action, NgxsOnInit, State, StateContext, Store } from '@ngxs/store'\nimport { patch } from '@ngxs/store/operators'\nimport { PaginatedEntities } from '../../shared/models'\nimport { serializePageQuery } from '../../shared/util'\nimport { addEntities, addEntity, createEntity, updateEntity } from '../../shared/util/store'\nimport { Post } from '../models/post.model'\nimport { PostsService } from '../posts.service'\n\nimport {\n  GetPost,\n  GetPostError,\n  GetPostPage,\n  GetPostPageError,\n  GetPostPageSuccess,\n  GetPostSuccess,\n} from './portfolio.actions'\n\nexport type PortfolioStateModel = PaginatedEntities<Post>\nexport type PortfolioStateContext = StateContext<PortfolioStateModel>\n\nconst initialState: PortfolioStateModel = { entities: {}, ids: [], pagination: {} }\n\n@State<PortfolioStateModel>({ name: 'portfolio', defaults: initialState })\n@Injectable()\nexport class PortfolioState implements NgxsOnInit {\n  constructor(private postsService: PostsService, private store: Store) {}\n\n  ngxsOnInit(ctx: PortfolioStateContext) {\n    ctx.dispatch(new GetPostPage({ page: 1, perPage: 8 }))\n  }\n\n  @Action(GetPost)\n  getPost(ctx: PortfolioStateContext, { id }: GetPost) {\n    const existing = ctx.getState().entities[id]\n    if (existing && !existing.isError) {\n      return ctx.dispatch(new GetPostSuccess(existing.entity))\n    }\n\n    ctx.setState(\n      addEntity<Post>({ ...createEntity<Post>(id), isFetching: true }),\n    )\n\n    return this.postsService.getPost(id).pipe(\n      map((response) => ctx.dispatch(new GetPostSuccess(response))),\n      catchError((error) => ctx.dispatch(new GetPostError(id, error))),\n    )\n  }\n\n  @Action(GetPostSuccess)\n  getPostSuccess(ctx: PortfolioStateContext, { post }: GetPostSuccess) {\n    ctx.setState(updateEntity<Post>(createEntity<Post>(post.id, post)))\n  }\n\n  @Action(GetPostError)\n  getPostError(ctx: PortfolioStateContext, { id, error }: GetPostError) {\n    ctx.setState(updateEntity({ id, isError: true, isFetching: false, isRefreshing: false }))\n    console.error(error)\n  }\n\n  @Action(GetPostPage)\n  getPostPage(ctx: PortfolioStateContext, { page }: GetPostPage) {\n    const state = ctx.getState()\n    const query = serializePageQuery(page)\n\n    const existingQuery = ctx.getState().pagination[query]\n    if (existingQuery && existingQuery.pages[page.page]) return\n\n    if (!existingQuery) {\n      ctx.patchState({\n        pagination: { ...state.pagination, [query]: { total: 0, totalPages: 0, pages: {} } },\n      })\n    }\n\n    ctx.setState(\n      patch({\n        pagination: patch({\n          [query]: patch({\n            pages: patch({ [page.page]: { ...createEntity(page.page), isFetching: true } }),\n          }),\n        }),\n      }),\n    )\n\n    return this.postsService.getPosts(page).pipe(\n      map((response) => ctx.dispatch(new GetPostPageSuccess(page, response))),\n      catchError((error) => ctx.dispatch(new GetPostPageError(page, error))),\n    )\n  }\n\n  @Action(GetPostPageSuccess)\n  getPostPageSuccess(ctx: PortfolioStateContext, { page, payload }: GetPostPageSuccess) {\n    const query = serializePageQuery(page)\n\n    const entities = payload.body.map((item) => createEntity(item.id, item))\n    const pageIds = payload.body.map((item) => item.id.toString())\n    ctx.setState(addEntities(entities))\n\n    ctx.setState(\n      patch({\n        pagination: patch({\n          [query]: patch({\n            total: payload.total,\n            totalPages: payload.totalPages,\n            pages: patch({ [page.page]: { ...createEntity(page.page, pageIds) } }),\n          }),\n        }),\n      }),\n    )\n  }\n\n  @Action(GetPostPageError)\n  getPostPageError(ctx: PortfolioStateContext, { page, error }: GetPostPageError) {\n    const query = serializePageQuery(page)\n    ctx.setState(\n      patch({\n        pagination: patch({\n          [query]: patch({\n            pages: patch({\n              [page.page]: patch({ isError: true, isRefreshing: false, isFetching: false }),\n            }),\n          }),\n        }),\n      }),\n    )\n    console.error(error)\n  }\n}\n","import { SharedSelectors } from 'src/app/shared/store/selectors'\nimport { serializePageQuery } from 'src/app/shared/util'\n\nimport { Selector } from '@ngxs/store'\nimport { Post } from '../models/post.model'\nimport { PostRequestOptions } from '../posts.service'\n\nimport { PortfolioState, PortfolioStateModel } from './portfolio.state'\n\nexport class PortfolioSelectors {\n  static entities = SharedSelectors.getEntities<Post>(PortfolioState)\n  static ids = SharedSelectors.getEntityIds(PortfolioState)\n  static posts = SharedSelectors.getEntityList<Post>(PortfolioState)\n\n  @Selector([PortfolioState])\n  static pagination(state: PortfolioStateModel) {\n    return state.pagination\n  }\n  @Selector([PortfolioSelectors.entities])\n  static postEntityByIdFn(entities: ReturnType<typeof PortfolioSelectors.entities>) {\n    return (id: number) => entities[id]\n  }\n  @Selector([PortfolioSelectors.pagination])\n  static postQueryFn(pagination: ReturnType<typeof PortfolioSelectors.pagination>) {\n    return (options: PostRequestOptions) => pagination[serializePageQuery(options)]\n  }\n  @Selector([PortfolioSelectors.postQueryFn])\n  static postQueryPageFn(getPageQuery: ReturnType<typeof PortfolioSelectors.postQueryFn>) {\n    return (options: PostRequestOptions) => getPageQuery(options).pages[options.page]\n  }\n  @Selector([PortfolioSelectors.entities, PortfolioSelectors.postQueryFn])\n  static postEntitiesByQueryFn(\n    entities: ReturnType<typeof PortfolioSelectors.entities>,\n    getPageQuery: ReturnType<typeof PortfolioSelectors.postQueryFn>,\n  ) {\n    return (options: PostRequestOptions) => {\n      const pages = Object.values(getPageQuery(options).pages).filter((p) => !p.isFetching)\n      const ids = pages.map((p) => p.entity).flat()\n      return ids.map((id) => entities[id])\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { isFunction } from '../util/isFunction';\nimport { map } from '../operators/map';\nexport function fromEventPattern(addHandler, removeHandler, resultSelector) {\n    if (resultSelector) {\n        return fromEventPattern(addHandler, removeHandler).pipe(map(args => isArray(args) ? resultSelector(...args) : resultSelector(args)));\n    }\n    return new Observable(subscriber => {\n        const handler = (...e) => subscriber.next(e.length === 1 ? e[0] : e);\n        let retValue;\n        try {\n            retValue = addHandler(handler);\n        }\n        catch (err) {\n            subscriber.error(err);\n            return undefined;\n        }\n        if (!isFunction(removeHandler)) {\n            return undefined;\n        }\n        return () => removeHandler(handler, retValue);\n    });\n}\n//# sourceMappingURL=fromEventPattern.js.map","import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function withLatestFrom(...args) {\n    return (source) => {\n        let project;\n        if (typeof args[args.length - 1] === 'function') {\n            project = args.pop();\n        }\n        const observables = args;\n        return source.lift(new WithLatestFromOperator(observables, project));\n    };\n}\nclass WithLatestFromOperator {\n    constructor(observables, project) {\n        this.observables = observables;\n        this.project = project;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n    }\n}\nclass WithLatestFromSubscriber extends OuterSubscriber {\n    constructor(destination, observables, project) {\n        super(destination);\n        this.observables = observables;\n        this.project = project;\n        this.toRespond = [];\n        const len = observables.length;\n        this.values = new Array(len);\n        for (let i = 0; i < len; i++) {\n            this.toRespond.push(i);\n        }\n        for (let i = 0; i < len; i++) {\n            let observable = observables[i];\n            this.add(subscribeToResult(this, observable, undefined, i));\n        }\n    }\n    notifyNext(_outerValue, innerValue, outerIndex) {\n        this.values[outerIndex] = innerValue;\n        const toRespond = this.toRespond;\n        if (toRespond.length > 0) {\n            const found = toRespond.indexOf(outerIndex);\n            if (found !== -1) {\n                toRespond.splice(found, 1);\n            }\n        }\n    }\n    notifyComplete() {\n    }\n    _next(value) {\n        if (this.toRespond.length === 0) {\n            const args = [value, ...this.values];\n            if (this.project) {\n                this._tryProject(args);\n            }\n            else {\n                this.destination.next(args);\n            }\n        }\n    }\n    _tryProject(args) {\n        let result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    }\n}\n//# sourceMappingURL=withLatestFrom.js.map","import { Subscriber } from '../Subscriber';\nexport function skipWhile(predicate) {\n    return (source) => source.lift(new SkipWhileOperator(predicate));\n}\nclass SkipWhileOperator {\n    constructor(predicate) {\n        this.predicate = predicate;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n    }\n}\nclass SkipWhileSubscriber extends Subscriber {\n    constructor(destination, predicate) {\n        super(destination);\n        this.predicate = predicate;\n        this.skipping = true;\n        this.index = 0;\n    }\n    _next(value) {\n        const destination = this.destination;\n        if (this.skipping) {\n            this.tryCallPredicate(value);\n        }\n        if (!this.skipping) {\n            destination.next(value);\n        }\n    }\n    tryCallPredicate(value) {\n        try {\n            const result = this.predicate(value, this.index++);\n            this.skipping = Boolean(result);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    }\n}\n//# sourceMappingURL=skipWhile.js.map","import { Component, ChangeDetectionStrategy, ViewEncapsulation, NgZone, Inject, PLATFORM_ID, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Subject, BehaviorSubject, of, combineLatest, pipe, Observable, fromEventPattern, merge } from 'rxjs';\nimport { take, startWith, combineLatest as combineLatest$1, skipWhile, map, scan, distinctUntilChanged, tap, mergeMap, takeUntil, publish, switchMap, withLatestFrom, filter } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\n\nconst _c0 = [\"youtubeContainer\"];\nconst DEFAULT_PLAYER_WIDTH = 640;\nconst DEFAULT_PLAYER_HEIGHT = 390;\n/**\n * Angular component that renders a YouTube player via the YouTube player\n * iframe API.\n * @see https://developers.google.com/youtube/iframe_api_reference\n */\nclass YouTubePlayer {\n    constructor(_ngZone, platformId) {\n        this._ngZone = _ngZone;\n        this._youtubeContainer = new Subject();\n        this._destroyed = new Subject();\n        this._playerChanges = new BehaviorSubject(undefined);\n        this._videoId = new BehaviorSubject(undefined);\n        this._height = new BehaviorSubject(DEFAULT_PLAYER_HEIGHT);\n        this._width = new BehaviorSubject(DEFAULT_PLAYER_WIDTH);\n        this._startSeconds = new BehaviorSubject(undefined);\n        this._endSeconds = new BehaviorSubject(undefined);\n        this._suggestedQuality = new BehaviorSubject(undefined);\n        this._playerVars = new BehaviorSubject(undefined);\n        /** Outputs are direct proxies from the player itself. */\n        this.ready = this._getLazyEmitter('onReady');\n        this.stateChange = this._getLazyEmitter('onStateChange');\n        this.error = this._getLazyEmitter('onError');\n        this.apiChange = this._getLazyEmitter('onApiChange');\n        this.playbackQualityChange = this._getLazyEmitter('onPlaybackQualityChange');\n        this.playbackRateChange = this._getLazyEmitter('onPlaybackRateChange');\n        this._isBrowser = isPlatformBrowser(platformId);\n    }\n    /** YouTube Video ID to view */\n    get videoId() { return this._videoId.value; }\n    set videoId(videoId) {\n        this._videoId.next(videoId);\n    }\n    /** Height of video player */\n    get height() { return this._height.value; }\n    set height(height) {\n        this._height.next(height || DEFAULT_PLAYER_HEIGHT);\n    }\n    /** Width of video player */\n    get width() { return this._width.value; }\n    set width(width) {\n        this._width.next(width || DEFAULT_PLAYER_WIDTH);\n    }\n    /** The moment when the player is supposed to start playing */\n    set startSeconds(startSeconds) {\n        this._startSeconds.next(startSeconds);\n    }\n    /** The moment when the player is supposed to stop playing */\n    set endSeconds(endSeconds) {\n        this._endSeconds.next(endSeconds);\n    }\n    /** The suggested quality of the player */\n    set suggestedQuality(suggestedQuality) {\n        this._suggestedQuality.next(suggestedQuality);\n    }\n    /**\n     * Extra parameters used to configure the player. See:\n     * https://developers.google.com/youtube/player_parameters.html?playerVersion=HTML5#Parameters\n     */\n    get playerVars() { return this._playerVars.value; }\n    set playerVars(playerVars) {\n        this._playerVars.next(playerVars);\n    }\n    ngOnInit() {\n        // Don't do anything if we're not in a browser environment.\n        if (!this._isBrowser) {\n            return;\n        }\n        let iframeApiAvailableObs = of(true);\n        if (!window.YT || !window.YT.Player) {\n            if (this.showBeforeIframeApiLoads && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw new Error('Namespace YT not found, cannot construct embedded youtube player. ' +\n                    'Please install the YouTube Player API Reference for iframe Embeds: ' +\n                    'https://developers.google.com/youtube/iframe_api_reference');\n            }\n            const iframeApiAvailableSubject = new Subject();\n            this._existingApiReadyCallback = window.onYouTubeIframeAPIReady;\n            window.onYouTubeIframeAPIReady = () => {\n                if (this._existingApiReadyCallback) {\n                    this._existingApiReadyCallback();\n                }\n                this._ngZone.run(() => iframeApiAvailableSubject.next(true));\n            };\n            iframeApiAvailableObs = iframeApiAvailableSubject.pipe(take(1), startWith(false));\n        }\n        // An observable of the currently loaded player.\n        const playerObs = createPlayerObservable(this._youtubeContainer, this._videoId, iframeApiAvailableObs, this._width, this._height, this._playerVars, this._ngZone).pipe(tap(player => {\n            // Emit this before the `waitUntilReady` call so that we can bind to\n            // events that happen as the player is being initialized (e.g. `onReady`).\n            this._playerChanges.next(player);\n        }), waitUntilReady(player => {\n            // Destroy the player if loading was aborted so that we don't end up leaking memory.\n            if (!playerIsReady(player)) {\n                player.destroy();\n            }\n        }), takeUntil(this._destroyed), publish());\n        // Set up side effects to bind inputs to the player.\n        playerObs.subscribe(player => {\n            this._player = player;\n            if (player && this._pendingPlayerState) {\n                this._initializePlayer(player, this._pendingPlayerState);\n            }\n            this._pendingPlayerState = undefined;\n        });\n        bindSizeToPlayer(playerObs, this._width, this._height);\n        bindSuggestedQualityToPlayer(playerObs, this._suggestedQuality);\n        bindCueVideoCall(playerObs, this._videoId, this._startSeconds, this._endSeconds, this._suggestedQuality, this._destroyed);\n        // After all of the subscriptions are set up, connect the observable.\n        playerObs.connect();\n    }\n    /**\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 11.0.0\n     */\n    createEventsBoundInZone() {\n        return {};\n    }\n    ngAfterViewInit() {\n        this._youtubeContainer.next(this.youtubeContainer.nativeElement);\n    }\n    ngOnDestroy() {\n        if (this._player) {\n            this._player.destroy();\n            window.onYouTubeIframeAPIReady = this._existingApiReadyCallback;\n        }\n        this._playerChanges.complete();\n        this._videoId.complete();\n        this._height.complete();\n        this._width.complete();\n        this._startSeconds.complete();\n        this._endSeconds.complete();\n        this._suggestedQuality.complete();\n        this._youtubeContainer.complete();\n        this._playerVars.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#playVideo */\n    playVideo() {\n        if (this._player) {\n            this._player.playVideo();\n        }\n        else {\n            this._getPendingState().playbackState = 1 /* PLAYING */;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#pauseVideo */\n    pauseVideo() {\n        if (this._player) {\n            this._player.pauseVideo();\n        }\n        else {\n            this._getPendingState().playbackState = 2 /* PAUSED */;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#stopVideo */\n    stopVideo() {\n        if (this._player) {\n            this._player.stopVideo();\n        }\n        else {\n            // It seems like YouTube sets the player to CUED when it's stopped.\n            this._getPendingState().playbackState = 5 /* CUED */;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#seekTo */\n    seekTo(seconds, allowSeekAhead) {\n        if (this._player) {\n            this._player.seekTo(seconds, allowSeekAhead);\n        }\n        else {\n            this._getPendingState().seek = { seconds, allowSeekAhead };\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#mute */\n    mute() {\n        if (this._player) {\n            this._player.mute();\n        }\n        else {\n            this._getPendingState().muted = true;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#unMute */\n    unMute() {\n        if (this._player) {\n            this._player.unMute();\n        }\n        else {\n            this._getPendingState().muted = false;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#isMuted */\n    isMuted() {\n        if (this._player) {\n            return this._player.isMuted();\n        }\n        if (this._pendingPlayerState) {\n            return !!this._pendingPlayerState.muted;\n        }\n        return false;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#setVolume */\n    setVolume(volume) {\n        if (this._player) {\n            this._player.setVolume(volume);\n        }\n        else {\n            this._getPendingState().volume = volume;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getVolume */\n    getVolume() {\n        if (this._player) {\n            return this._player.getVolume();\n        }\n        if (this._pendingPlayerState && this._pendingPlayerState.volume != null) {\n            return this._pendingPlayerState.volume;\n        }\n        return 0;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#setPlaybackRate */\n    setPlaybackRate(playbackRate) {\n        if (this._player) {\n            return this._player.setPlaybackRate(playbackRate);\n        }\n        else {\n            this._getPendingState().playbackRate = playbackRate;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getPlaybackRate */\n    getPlaybackRate() {\n        if (this._player) {\n            return this._player.getPlaybackRate();\n        }\n        if (this._pendingPlayerState && this._pendingPlayerState.playbackRate != null) {\n            return this._pendingPlayerState.playbackRate;\n        }\n        return 0;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getAvailablePlaybackRates */\n    getAvailablePlaybackRates() {\n        return this._player ? this._player.getAvailablePlaybackRates() : [];\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getVideoLoadedFraction */\n    getVideoLoadedFraction() {\n        return this._player ? this._player.getVideoLoadedFraction() : 0;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getPlayerState */\n    getPlayerState() {\n        if (!this._isBrowser || !window.YT) {\n            return undefined;\n        }\n        if (this._player) {\n            return this._player.getPlayerState();\n        }\n        if (this._pendingPlayerState && this._pendingPlayerState.playbackState != null) {\n            return this._pendingPlayerState.playbackState;\n        }\n        return -1 /* UNSTARTED */;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getCurrentTime */\n    getCurrentTime() {\n        if (this._player) {\n            return this._player.getCurrentTime();\n        }\n        if (this._pendingPlayerState && this._pendingPlayerState.seek) {\n            return this._pendingPlayerState.seek.seconds;\n        }\n        return 0;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getPlaybackQuality */\n    getPlaybackQuality() {\n        return this._player ? this._player.getPlaybackQuality() : 'default';\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getAvailableQualityLevels */\n    getAvailableQualityLevels() {\n        return this._player ? this._player.getAvailableQualityLevels() : [];\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getDuration */\n    getDuration() {\n        return this._player ? this._player.getDuration() : 0;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getVideoUrl */\n    getVideoUrl() {\n        return this._player ? this._player.getVideoUrl() : '';\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getVideoEmbedCode */\n    getVideoEmbedCode() {\n        return this._player ? this._player.getVideoEmbedCode() : '';\n    }\n    /** Gets an object that should be used to store the temporary API state. */\n    _getPendingState() {\n        if (!this._pendingPlayerState) {\n            this._pendingPlayerState = {};\n        }\n        return this._pendingPlayerState;\n    }\n    /** Initializes a player from a temporary state. */\n    _initializePlayer(player, state) {\n        const { playbackState, playbackRate, volume, muted, seek } = state;\n        switch (playbackState) {\n            case 1 /* PLAYING */:\n                player.playVideo();\n                break;\n            case 2 /* PAUSED */:\n                player.pauseVideo();\n                break;\n            case 5 /* CUED */:\n                player.stopVideo();\n                break;\n        }\n        if (playbackRate != null) {\n            player.setPlaybackRate(playbackRate);\n        }\n        if (volume != null) {\n            player.setVolume(volume);\n        }\n        if (muted != null) {\n            muted ? player.mute() : player.unMute();\n        }\n        if (seek != null) {\n            player.seekTo(seek.seconds, seek.allowSeekAhead);\n        }\n    }\n    /** Gets an observable that adds an event listener to the player when a user subscribes to it. */\n    _getLazyEmitter(name) {\n        // Start with the stream of players. This way the events will be transferred\n        // over to the new player if it gets swapped out under-the-hood.\n        return this._playerChanges.pipe(\n        // Switch to the bound event. `switchMap` ensures that the old event is removed when the\n        // player is changed. If there's no player, return an observable that never emits.\n        switchMap(player => {\n            return player ? fromEventPattern((listener) => {\n                player.addEventListener(name, listener);\n            }, (listener) => {\n                // The API seems to throw when we try to unbind from a destroyed player and it doesn't\n                // expose whether the player has been destroyed so we have to wrap it in a try/catch to\n                // prevent the entire stream from erroring out.\n                try {\n                    if (player.removeEventListener) {\n                        player.removeEventListener(name, listener);\n                    }\n                }\n                catch (_a) { }\n            }) : of();\n        }), \n        // By default we run all the API interactions outside the zone\n        // so we have to bring the events back in manually when they emit.\n        (source) => new Observable(observer => source.subscribe({\n            next: value => this._ngZone.run(() => observer.next(value)),\n            error: error => observer.error(error),\n            complete: () => observer.complete()\n        })), \n        // Ensures that everything is cleared out on destroy.\n        takeUntil(this._destroyed));\n    }\n}\nYouTubePlayer.ɵfac = function YouTubePlayer_Factory(t) { return new (t || YouTubePlayer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };\nYouTubePlayer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: YouTubePlayer, selectors: [[\"youtube-player\"]], viewQuery: function YouTubePlayer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.youtubeContainer = _t.first);\n    } }, inputs: { videoId: \"videoId\", height: \"height\", width: \"width\", startSeconds: \"startSeconds\", endSeconds: \"endSeconds\", suggestedQuality: \"suggestedQuality\", playerVars: \"playerVars\", showBeforeIframeApiLoads: \"showBeforeIframeApiLoads\" }, outputs: { ready: \"ready\", stateChange: \"stateChange\", error: \"error\", apiChange: \"apiChange\", playbackQualityChange: \"playbackQualityChange\", playbackRateChange: \"playbackRateChange\" }, decls: 2, vars: 0, consts: [[\"youtubeContainer\", \"\"]], template: function YouTubePlayer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"div\", null, 0);\n    } }, encapsulation: 2, changeDetection: 0 });\nYouTubePlayer.ctorParameters = () => [\n    { type: NgZone },\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\n];\nYouTubePlayer.propDecorators = {\n    videoId: [{ type: Input }],\n    height: [{ type: Input }],\n    width: [{ type: Input }],\n    startSeconds: [{ type: Input }],\n    endSeconds: [{ type: Input }],\n    suggestedQuality: [{ type: Input }],\n    playerVars: [{ type: Input }],\n    showBeforeIframeApiLoads: [{ type: Input }],\n    ready: [{ type: Output }],\n    stateChange: [{ type: Output }],\n    error: [{ type: Output }],\n    apiChange: [{ type: Output }],\n    playbackQualityChange: [{ type: Output }],\n    playbackRateChange: [{ type: Output }],\n    youtubeContainer: [{ type: ViewChild, args: ['youtubeContainer',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(YouTubePlayer, [{\n        type: Component,\n        args: [{\n                selector: 'youtube-player',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                // This div is *replaced* by the YouTube player embed.\n                template: '<div #youtubeContainer></div>'\n            }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: Object, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }]; }, { ready: [{\n            type: Output\n        }], stateChange: [{\n            type: Output\n        }], error: [{\n            type: Output\n        }], apiChange: [{\n            type: Output\n        }], playbackQualityChange: [{\n            type: Output\n        }], playbackRateChange: [{\n            type: Output\n        }], videoId: [{\n            type: Input\n        }], height: [{\n            type: Input\n        }], width: [{\n            type: Input\n        }], startSeconds: [{\n            type: Input\n        }], endSeconds: [{\n            type: Input\n        }], suggestedQuality: [{\n            type: Input\n        }], playerVars: [{\n            type: Input\n        }], showBeforeIframeApiLoads: [{\n            type: Input\n        }], youtubeContainer: [{\n            type: ViewChild,\n            args: ['youtubeContainer']\n        }] }); })();\n/** Listens to changes to the given width and height and sets it on the player. */\nfunction bindSizeToPlayer(playerObs, widthObs, heightObs) {\n    return combineLatest([playerObs, widthObs, heightObs])\n        .subscribe(([player, width, height]) => player && player.setSize(width, height));\n}\n/** Listens to changes from the suggested quality and sets it on the given player. */\nfunction bindSuggestedQualityToPlayer(playerObs, suggestedQualityObs) {\n    return combineLatest([\n        playerObs,\n        suggestedQualityObs\n    ]).subscribe(([player, suggestedQuality]) => player && suggestedQuality && player.setPlaybackQuality(suggestedQuality));\n}\n/**\n * Returns an observable that emits the loaded player once it's ready. Certain properties/methods\n * won't be available until the iframe finishes loading.\n * @param onAbort Callback function that will be invoked if the player loading was aborted before\n * it was able to complete. Can be used to clean up any loose references.\n */\nfunction waitUntilReady(onAbort) {\n    return mergeMap(player => {\n        if (!player) {\n            return of(undefined);\n        }\n        if (playerIsReady(player)) {\n            return of(player);\n        }\n        // Since removeEventListener is not on Player when it's initialized, we can't use fromEvent.\n        // The player is not initialized fully until the ready is called.\n        return new Observable(emitter => {\n            let aborted = false;\n            let resolved = false;\n            const onReady = (event) => {\n                resolved = true;\n                if (!aborted) {\n                    event.target.removeEventListener('onReady', onReady);\n                    emitter.next(event.target);\n                }\n            };\n            player.addEventListener('onReady', onReady);\n            return () => {\n                aborted = true;\n                if (!resolved) {\n                    onAbort(player);\n                }\n            };\n        }).pipe(take(1), startWith(undefined));\n    });\n}\n/** Create an observable for the player based on the given options. */\nfunction createPlayerObservable(youtubeContainer, videoIdObs, iframeApiAvailableObs, widthObs, heightObs, playerVarsObs, ngZone) {\n    const playerOptions = combineLatest([videoIdObs, playerVarsObs]).pipe(withLatestFrom(combineLatest([widthObs, heightObs])), map(([constructorOptions, sizeOptions]) => {\n        const [videoId, playerVars] = constructorOptions;\n        const [width, height] = sizeOptions;\n        return videoId ? ({ videoId, playerVars, width, height }) : undefined;\n    }));\n    return combineLatest([youtubeContainer, playerOptions, of(ngZone)])\n        .pipe(skipUntilRememberLatest(iframeApiAvailableObs), scan(syncPlayerState, undefined), distinctUntilChanged());\n}\n/** Skips the given observable until the other observable emits true, then emit the latest. */\nfunction skipUntilRememberLatest(notifier) {\n    return pipe(combineLatest$1(notifier), skipWhile(([_, doneSkipping]) => !doneSkipping), map(([value]) => value));\n}\n/** Destroy the player if there are no options, or create the player if there are options. */\nfunction syncPlayerState(player, [container, videoOptions, ngZone]) {\n    if (player && videoOptions && player.playerVars !== videoOptions.playerVars) {\n        // The player needs to be recreated if the playerVars are different.\n        player.destroy();\n    }\n    else if (!videoOptions) {\n        if (player) {\n            // Destroy the player if the videoId was removed.\n            player.destroy();\n        }\n        return;\n    }\n    else if (player) {\n        return player;\n    }\n    // Important! We need to create the Player object outside of the `NgZone`, because it kicks\n    // off a 250ms setInterval which will continually trigger change detection if we don't.\n    const newPlayer = ngZone.runOutsideAngular(() => new YT.Player(container, videoOptions));\n    newPlayer.videoId = videoOptions.videoId;\n    newPlayer.playerVars = videoOptions.playerVars;\n    return newPlayer;\n}\n/**\n * Call cueVideoById if the videoId changes, or when start or end seconds change. cueVideoById will\n * change the loaded video id to the given videoId, and set the start and end times to the given\n * start/end seconds.\n */\nfunction bindCueVideoCall(playerObs, videoIdObs, startSecondsObs, endSecondsObs, suggestedQualityObs, destroyed) {\n    const cueOptionsObs = combineLatest([startSecondsObs, endSecondsObs])\n        .pipe(map(([startSeconds, endSeconds]) => ({ startSeconds, endSeconds })));\n    // Only respond to changes in cue options if the player is not running.\n    const filteredCueOptions = cueOptionsObs\n        .pipe(filterOnOther(playerObs, player => !!player && !hasPlayerStarted(player)));\n    // If the video id changed, there's no reason to run 'cue' unless the player\n    // was initialized with a different video id.\n    const changedVideoId = videoIdObs\n        .pipe(filterOnOther(playerObs, (player, videoId) => !!player && player.videoId !== videoId));\n    // If the player changed, there's no reason to run 'cue' unless there are cue options.\n    const changedPlayer = playerObs.pipe(filterOnOther(combineLatest([videoIdObs, cueOptionsObs]), ([videoId, cueOptions], player) => !!player &&\n        (videoId != player.videoId || !!cueOptions.startSeconds || !!cueOptions.endSeconds)));\n    merge(changedPlayer, changedVideoId, filteredCueOptions)\n        .pipe(withLatestFrom(combineLatest([playerObs, videoIdObs, cueOptionsObs, suggestedQualityObs])), map(([_, values]) => values), takeUntil(destroyed))\n        .subscribe(([player, videoId, cueOptions, suggestedQuality]) => {\n        if (!videoId || !player) {\n            return;\n        }\n        player.videoId = videoId;\n        player.cueVideoById(Object.assign({ videoId,\n            suggestedQuality }, cueOptions));\n    });\n}\nfunction hasPlayerStarted(player) {\n    const state = player.getPlayerState();\n    return state !== -1 /* UNSTARTED */ && state !== 5 /* CUED */;\n}\nfunction playerIsReady(player) {\n    return 'getPlayerStatus' in player;\n}\n/** Combines the two observables temporarily for the filter function. */\nfunction filterOnOther(otherObs, filterFn) {\n    return pipe(withLatestFrom(otherObs), filter(([value, other]) => filterFn(other, value)), map(([value]) => value));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst COMPONENTS = [YouTubePlayer];\nclass YouTubePlayerModule {\n}\nYouTubePlayerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: YouTubePlayerModule });\nYouTubePlayerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function YouTubePlayerModule_Factory(t) { return new (t || YouTubePlayerModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(YouTubePlayerModule, { declarations: [YouTubePlayer], exports: [YouTubePlayer] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(YouTubePlayerModule, [{\n        type: NgModule,\n        args: [{\n                declarations: COMPONENTS,\n                exports: COMPONENTS\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { YouTubePlayer, YouTubePlayerModule };\n\n//# sourceMappingURL=youtube-player.js.map","import { isArray } from '../util/isArray';\nimport { CombineLatestOperator } from '../observable/combineLatest';\nimport { from } from '../observable/from';\nconst none = {};\nexport function combineLatest(...observables) {\n    let project = null;\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0].slice();\n    }\n    return (source) => source.lift.call(from([source, ...observables]), new CombineLatestOperator(project));\n}\n//# sourceMappingURL=combineLatest.js.map","import { Subject } from '../Subject';\nimport { multicast } from './multicast';\nexport function publish(selector) {\n    return selector ?\n        multicast(() => new Subject(), selector) :\n        multicast(new Subject());\n}\n//# sourceMappingURL=publish.js.map","<ng-container [ngSwitch]=\"type\">\n  <img\n    *ngSwitchCase=\"'image'\"\n    [src]=\"image.sizes.large\"\n    [alt]=\"image.alt || image.title || image.name || ''\"\n    [width]=\"image.sizes['large-width']\"\n    [height]=\"image.sizes['large-height']\"\n  />\n\n  <div *ngSwitchCase=\"'video'\" class=\"showcase__iframe-container\">\n    <youtube-player [videoId]=\"videoId\" data-testid=\"yt-player\"></youtube-player>\n  </div>\n</ng-container>\n","import { Component, Input, OnInit, Inject } from '@angular/core'\n\nimport { getYoutubeId } from 'src/app/shared/util'\n\nimport { Image, ShowcaseFormat, YoutubeURL } from '../../models/post.model'\nimport { DOCUMENT } from '@angular/common'\n\n@Component({\n  selector: 'app-showcase',\n  templateUrl: './showcase.component.html',\n  styleUrls: ['./showcase.component.css'],\n})\nexport class ShowcaseComponent implements OnInit {\n  @Input() type: ShowcaseFormat\n  @Input() image: Image\n  @Input() video: YoutubeURL\n\n  public videoId: string\n\n  constructor(@Inject(DOCUMENT) private document: Document) {}\n\n  ngOnInit() {\n    if (this.type === 'video') {\n      this.videoId = getYoutubeId(this.video)\n\n      if (typeof YT === 'undefined') this.loadYouTubeAPI()\n    }\n  }\n\n  private loadYouTubeAPI() {\n    const tag = document.createElement('script')\n    tag.src = 'https://www.youtube.com/iframe_api'\n    this.document.body.appendChild(tag)\n  }\n}\n","<table>\n  <tbody>\n    <tr>\n      <th scope=\"row\">Kategorie:</th>\n      <td [innerHTML]=\"data.modul.name\"></td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Semester:</th>\n      <td>\n        <span *ngFor=\"let s of data.semester\" [innerHTML]=\"s.name + '<br>'\"></span>\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Erstellunsjahr:</th>\n      <td [innerHTML]=\"data.erstellungsjahr\"></td>\n    </tr>\n    <tr>\n      <th scope=\"row\">{{ data.studierende.length > 1 ? 'Studierende' : 'Student*in' }}:</th>\n      <td>\n        <span *ngFor=\"let s of data.studierende\" [innerHTML]=\"s.name + '<br>'\"></span>\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">{{ data.dozierende.length > 1 ? 'Dozierende' : 'Dozent*in' }}:</th>\n      <td>\n        <span *ngFor=\"let d of data.dozierende\" [innerHTML]=\"d.name + '<br>'\"></span>\n      </td>\n    </tr>\n  </tbody>\n</table>\n","import { Component, Input, OnInit } from '@angular/core'\n\nimport { Post } from '../../models/post.model'\n\n@Component({\n  selector: 'app-briefing',\n  templateUrl: './briefing.component.html',\n  styleUrls: ['./briefing.component.css'],\n})\nexport class BriefingComponent implements OnInit {\n  @Input() data: Post['acf']\n\n  ngOnInit() {}\n}\n","import { Component, OnInit } from '@angular/core'\n\n@Component({\n  selector: 'app-loading-spinner',\n  templateUrl: './loading-spinner.component.html',\n  styleUrls: ['./loading-spinner.component.css'],\n})\nexport class LoadingSpinnerComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n","<span class=\"post-detail__spinner\" style=\"font-style: normal;\" role=\"img\" aria-hidden=\"true\"\n  >⏳</span\n>\n","<ng-container *ngIf=\"(isFetching$ | async) === false; else loadingSpinner\">\n  <section *ngIf=\"post$ | async as post; else notFound\">\n    <h2 [innerHTML]=\"post.title.rendered\"></h2>\n    <p class=\"post-detail__category\">\n      {{ post.acf.page.post_title }}\n      <span *ngIf=\"post.acf.schlagworte.length\" class=\"post-detail__category__tags\">\n        – <span *ngFor=\"let tag of post.acf.schlagworte\">{{ tag.name }}</span>\n      </span>\n    </p>\n\n    <app-showcase\n      [type]=\"post.acf.showcaseFormat\"\n      [image]=\"post.acf.showcase\"\n      [video]=\"post.acf.youtube\"\n    ></app-showcase>\n    <p [innerHTML]=\"post.acf.beschreibung\"></p>\n\n    <h3>Steckbrief</h3>\n    <app-briefing [data]=\"post.acf\"></app-briefing>\n\n    <h3 *ngIf=\"post.acf.galerie.length\">Galerie</h3>\n    <img\n      *ngFor=\"let image of post.acf.galerie\"\n      [src]=\"image.sizes.medium\"\n      [alt]=\"image.alt || image.title || image.name || ''\"\n      [width]=\"image.sizes['medium-width']\"\n      [height]=\"image.sizes['medium-height']\"\n    />\n\n    <footer class=\"post-detail__footer\">\n      <button type=\"button\" (click)=\"toTop()\">Nach oben</button>\n    </footer>\n  </section>\n</ng-container>\n\n<ng-template #notFound>\n  <p class=\"post-detail__status-msg\">\n    Projekt mit ID »{{ rawId }}« nicht gefunden.\n    <span style=\"font-style: normal;\" role=\"img\" aria-label=\"Sad cat\">😿</span>\n  </p>\n</ng-template>\n\n<ng-template #loadingSpinner>\n  <p class=\"post-detail__status-msg\">Wird geladen... <app-loading-spinner></app-loading-spinner></p>\n</ng-template>\n","import { Component, OnInit } from '@angular/core'\nimport { ActivatedRoute } from '@angular/router'\n\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nimport { Select, Store } from '@ngxs/store'\nimport { GetPost } from '../../store/portfolio.actions'\nimport { PortfolioSelectors } from '../../store/portfolio.selectors'\n\ntype PostEntityByIdFn = ReturnType<typeof PortfolioSelectors.postEntityByIdFn>\n\n@Component({\n  selector: 'app-post-detail',\n  templateUrl: './post-detail.component.html',\n  styleUrls: ['./post-detail.component.css'],\n})\nexport class PostDetailComponent implements OnInit {\n  @Select(PortfolioSelectors.postEntityByIdFn) postEntityByIdFn$: Observable<PostEntityByIdFn>\n  rawId: string\n  id: number\n\n  postEntity$: Observable<ReturnType<PostEntityByIdFn>>\n  post$: Observable<ReturnType<PostEntityByIdFn>['entity']>\n  isFetching$: Observable<boolean>\n\n  constructor(route: ActivatedRoute, private store: Store) {\n    this.rawId = route.snapshot.paramMap.get('id')\n    this.id = Number(this.rawId)\n\n    this.postEntity$ = this.postEntityByIdFn$.pipe(map((postEntityById) => postEntityById(this.id)))\n    this.post$ = this.postEntity$.pipe(map((post) => post.entity))\n    this.isFetching$ = this.postEntity$.pipe(map((post) => post.isFetching))\n  }\n\n  ngOnInit() {\n    this.store.dispatch(new GetPost(this.id)).subscribe()\n  }\n\n  toTop() {\n    document.body.scrollIntoView({ block: 'start', behavior: 'smooth' })\n  }\n}\n","<h2>DMP Portfolio</h2>\n<ng-container *ngIf=\"(posts$ | async).length; else noPosts\">\n  <section *ngFor=\"let post of posts$ | async\">\n    <h3 [innerHTML]=\"post.title.rendered\"></h3>\n    <p [innerHTML]=\"getTeaser(post.acf.beschreibung)\"></p>\n    <a routerLink=\"{{ post.id }}\">Projekt ansehen →</a>\n    <hr />\n  </section>\n\n  <footer class=\"post-master__footer\">\n    <button\n      *ngIf=\"(query$ | async).totalPages > pagination.page && (isFetching$ | async) === false\"\n      (click)=\"requestNextPage()\"\n      type=\"button\"\n    >\n      Mehr laden...\n    </button>\n  </footer>\n</ng-container>\n\n<ng-template #noPosts>\n  <p *ngIf=\"(isFetching$ | async) === false\" class=\"post-master__status-msg\">\n    Keine Projekte vorhanden. <span aria-hidden=\"true\" style=\"font-style: normal;\">🚫</span>\n  </p>\n</ng-template>\n\n<p *ngIf=\"isFetching$ | async\" class=\"post-master__status-msg\">\n  Projekte werden geladen... <app-loading-spinner></app-loading-spinner>\n</p>\n","import { Component, OnInit } from '@angular/core'\n\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nimport { Select, Store } from '@ngxs/store'\nimport { Post } from '../../models/post.model'\nimport { PostRequestOptions } from '../../posts.service'\nimport { GetPostPage } from '../../store/portfolio.actions'\nimport { PortfolioSelectors } from '../../store/portfolio.selectors'\n\nconst linebreakRegex = /<br\\s?\\/?>(<\\/br>)?/g\n\ntype PostQueryFn = ReturnType<typeof PortfolioSelectors.postQueryFn>\ntype EntitiesByQueryFn$ = Observable<ReturnType<typeof PortfolioSelectors.postEntitiesByQueryFn>>\n\n@Component({\n  selector: 'app-post-master',\n  templateUrl: './post-master.component.html',\n  styleUrls: ['./post-master.component.css'],\n})\nexport class PostMasterComponent implements OnInit {\n  @Select(PortfolioSelectors.postQueryFn) postQueryFn$: Observable<PostQueryFn>\n  @Select(PortfolioSelectors.postEntitiesByQueryFn) postEntitiesByQueryFn$: EntitiesByQueryFn$\n  pagination: PostRequestOptions = { page: 1, perPage: 8 }\n\n  posts$: Observable<Post[]>\n  query$: Observable<ReturnType<PostQueryFn>>\n  isFetching$: Observable<boolean>\n\n  constructor(private store: Store) {\n    this.posts$ = this.postEntitiesByQueryFn$.pipe(\n      map((postsForQuery) => postsForQuery(this.pagination)),\n      map((postEntities) => postEntities.map((p) => p.entity)),\n    )\n    this.query$ = this.postQueryFn$.pipe(map((getPostQuery) => getPostQuery(this.pagination)))\n    this.isFetching$ = this.query$.pipe(\n      map((q) => Object.values(q.pages).some((p) => p.isFetching)),\n    )\n  }\n\n  ngOnInit() {\n    this.loadPage()\n  }\n  loadPage() {\n    this.store.dispatch(new GetPostPage(this.pagination))\n  }\n  requestNextPage() {\n    this.pagination.page++\n    this.loadPage()\n  }\n\n  getTeaser(text: string) {\n    text = text.replace(linebreakRegex, '')\n\n    if (text.length < 150) {\n      return text\n    }\n    return `${text.slice(0, 145)}...`\n  }\n}\n","import { RouterModule, Routes } from '@angular/router'\n\nimport { PostDetailComponent } from './views/post-detail/post-detail.component'\nimport { PostMasterComponent } from './views/post-master/post-master.component'\n\nconst routes: Routes = [\n  { path: '', component: PostMasterComponent },\n  { path: ':id', component: PostDetailComponent },\n]\n\nexport const PortfolioRoutes = RouterModule.forChild(routes)\n","import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\n\nimport { LoadingSpinnerComponent } from './loading-spinner.component'\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [LoadingSpinnerComponent],\n  exports: [LoadingSpinnerComponent],\n})\nexport class LoadingSpinnerModule {}\n","import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { YouTubePlayerModule } from '@angular/youtube-player'\n\nimport { LoadingSpinnerModule } from 'src/app/shared/components/loading-spinner/loading-spinner.module'\n\nimport { BriefingComponent } from '../../components/briefing/briefing.component'\nimport { ShowcaseComponent } from '../../components/showcase/showcase.component'\n\nimport { PostDetailComponent } from './post-detail.component'\n\n@NgModule({\n  imports: [CommonModule, YouTubePlayerModule, LoadingSpinnerModule],\n  declarations: [PostDetailComponent, ShowcaseComponent, BriefingComponent],\n})\nexport class PostDetailModule {}\n","import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { RouterModule } from '@angular/router'\n\nimport { LoadingSpinnerModule } from 'src/app/shared/components/loading-spinner/loading-spinner.module'\n\nimport { PostMasterComponent } from './post-master.component'\n\n@NgModule({\n  imports: [CommonModule, RouterModule, LoadingSpinnerModule],\n  providers: [],\n  declarations: [PostMasterComponent],\n})\nexport class PostMasterModule {}\n","import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\n\nimport { NgxsModule } from '@ngxs/store'\n\nimport { PortfolioRoutes } from './portfolio.module.routing'\nimport { PortfolioState } from './store/portfolio.state'\nimport { PostDetailModule } from './views/post-detail/post-detail.module'\nimport { PostMasterModule } from './views/post-master/post-master.module'\n\n@NgModule({\n  imports: [\n    CommonModule,\n    PortfolioRoutes,\n    PostMasterModule,\n    PostDetailModule,\n    NgxsModule.forFeature([PortfolioState]),\n  ],\n  declarations: [],\n})\nexport class PortfolioModule {}\n"]}