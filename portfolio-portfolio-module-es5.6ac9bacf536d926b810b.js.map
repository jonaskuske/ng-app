{"version":3,"sources":["webpack:///src/app/portfolio/store/portfolio.actions.ts","webpack:///src/app/shared/store/selectors.ts","webpack:///src/app/shared/util/index.ts","webpack:///src/app/shared/util/store.ts","webpack:///src/app/portfolio/posts.service.ts","webpack:///src/app/portfolio/store/portfolio.selectors.ts","webpack:///src/app/portfolio/store/portfolio.state.ts","webpack:///node_modules/rxjs/_esm2015/internal/operators/withLatestFrom.js","webpack:///node_modules/@angular/youtube-player/fesm2015/youtube-player.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/skipWhile.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/combineLatest.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/publish.js","webpack:///src/app/portfolio/components/showcase/showcase.component.html","webpack:///src/app/portfolio/components/showcase/showcase.component.ts","webpack:///src/app/portfolio/components/briefing/briefing.component.html","webpack:///src/app/portfolio/components/briefing/briefing.component.ts","webpack:///src/app/shared/components/loading-spinner/loading-spinner.component.ts","webpack:///src/app/shared/components/loading-spinner/loading-spinner.component.html","webpack:///src/app/portfolio/views/post-detail/post-detail.component.html","webpack:///src/app/portfolio/views/post-detail/post-detail.component.ts","webpack:///src/app/portfolio/views/post-master/post-master.component.html","webpack:///src/app/portfolio/views/post-master/post-master.component.ts","webpack:///src/app/portfolio/views/post-master/post-master.module.ts","webpack:///src/app/portfolio/views/post-detail/post-detail.module.ts","webpack:///src/app/shared/components/loading-spinner/loading-spinner.module.ts","webpack:///src/app/portfolio/portfolio.module.routing.ts","webpack:///src/app/portfolio/portfolio.module.ts"],"names":["GetPost","id","type","GetPostSuccess","post","GetPostError","error","GetPostPage","page","GetPostPageSuccess","payload","GetPostPageError","stateClass","state","entities","Object","values","keys","pageIds","map","isArray","item","Array","serializePageQuery","URLSearchParams","params","createEntity","entity","lastUpdatedAt","Date","toISOString","isFetching","isRefreshing","isError","uniq","some","i","includes","concat","filter","updateEntity","prevEntity","PostsService","PortfolioSelectors","PortfolioState","apiUrl","headersGetTotal","headers","wpTotal","get","Error","Number","headersGetTotalPages","wpTotalPages","getPostPageFromResponse","response","body","total","totalPages","http","this","perPage","fromObject","String","per_page","observe","pipe","initialState","ids","pagination","postsService","store","ctx","dispatch","existing","getState","setState","toString","getPost","catchError","console","query","existingQuery","pages","patchState","getPosts","reduce","obj","p","name","defaults","options","getPageQuery","flat","getEntities","getEntityIds","posts","getEntityList","postQueryFn","withLatestFrom","args","source","project","length","pop","lift","WithLatestFromOperator","YouTubePlayer","observables","subscriber","subscribe","destination","super","toRespond","len","push","observable","add","subscribeToResult","outerValue","innerValue","outerIndex","innerIndex","innerSub","found","indexOf","splice","value","_tryProject","next","result","apply","err","OuterSubscriber","SkipWhileOperator","predicate","skipping","index","tryCallPredicate","Boolean","Subscriber","_c0","_ngZone","platformId","_videoId","BehaviorSubject","_height","_width","_startSeconds","_endSeconds","_suggestedQuality","ready","stateChange","apiChange","playbackQualityChange","playbackRateChange","_youtubeContainer","Subject","_destroyed","_isBrowser","window","iframeApiAvailableObs","of","YT","showBeforeIframeApiLoads","iframeApiAvailableSubject","_existingApiReadyCallback","onYouTubeIframeAPIReady","run","take","startWith","onAbort","playerObs","youtubeContainer","videoIdObs","widthObs","heightObs","events","ngZone","notifier","playerOptions","combineLatest","videoId","width","height","slice","call","from","scan","syncPlayerState","distinctUntilChanged","createEventsBoundInZone","player","playerIsReady","destroy","Observable","emitter","aborted","resolved","addEventListener","event","onReady","target","removeEventListener","takeUntil","multicast","_player","_pendingPlayerState","_initializePlayer","setSize","suggestedQualityObs","suggestedQuality","setPlaybackQuality","startSecondsObs","endSecondsObs","destroyed","cueOptionsObs","startSeconds","endSeconds","filteredCueOptions","filterOnOther","getPlayerState","changedVideoId","changedPlayer","cueOptions","merge","cueVideoById","assign","connect","output","Map","forEach","observers","_runInZone","emit","nativeElement","complete","callback","playVideo","_getPendingState","playbackState","pauseVideo","stopVideo","seconds","allowSeekAhead","seekTo","seek","mute","muted","unMute","isMuted","volume","setVolume","getVolume","playbackRate","setPlaybackRate","getPlaybackRate","getAvailablePlaybackRates","getVideoLoadedFraction","getCurrentTime","getPlaybackQuality","getAvailableQualityLevels","getDuration","getVideoUrl","getVideoEmbedCode","ɵfac","t","ɵcmp","selectors","viewQuery","rf","_t","first","inputs","outputs","decls","vars","consts","template","encapsulation","changeDetection","container","videoOptions","newPlayer","runOutsideAngular","Player","otherObs","filterFn","other","YouTubePlayerModule","ɵmod","ɵinj","factory","ShowcaseComponent","document","url","opts","fuzzy","test","patterns","exec","tokens","split","video","loadYouTubeAPI","tag","createElement","src","appendChild","LoadingSpinnerComponent","BriefingComponent","PostDetailComponent","route","rawId","snapshot","paramMap","postEntity$","postEntityByIdFn$","postEntityById","post$","isFetching$","scrollIntoView","block","behavior","postEntityByIdFn","PostMasterComponent","PostMasterModule","PostDetailModule","LoadingSpinnerModule","linebreakRegex","PortfolioRoutes","forChild","path","component","posts$","postEntitiesByQueryFn$","postsForQuery","postEntities","query$","postQueryFn$","getPostQuery","q","loadPage","text","replace","postEntitiesByQueryFn","PortfolioModule","forFeature"],"mappings":"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","file":"x","sourcesContent":["import { Page } from '../../shared/models'\nimport { Post } from '../models/post.model'\nimport { PostRequestOptions } from '../posts.service'\n\nexport class GetPost {\n  static readonly type = '[Portfolio] Get Post'\n  constructor(public id: number) {}\n}\nexport class GetPostSuccess {\n  static readonly type = '[Portfolio API] Get Post Success'\n  constructor(public post: Post) {}\n}\nexport class GetPostError {\n  static readonly type = '[Portfolio API] Get Post Error'\n  constructor(public id: number, public error: Error) {}\n}\n\nexport class GetPostPage {\n  static readonly type = '[Portfolio] Get Post Page'\n  constructor(public page: PostRequestOptions) {}\n}\nexport class GetPostPageSuccess {\n  static readonly type = '[Portfolio API] Get Post Page Success'\n  constructor(public page: PostRequestOptions, public payload: Page<Post>) {}\n}\nexport class GetPostPageError {\n  static readonly type = '[Portfolio API] Get Post Page Error'\n  constructor(public page: PostRequestOptions, public error: Error) {}\n}\n","import { createSelector } from '@ngxs/store'\nimport { Entity } from '../models'\n\nexport class SharedSelectors {\n  static getEntities<T>(stateClass) {\n    return createSelector([stateClass], state => state.entities as { [id: string]: Entity<T> })\n  }\n\n  static getEntityList<T>(stateClass) {\n    return createSelector([stateClass], state => Object.values(state.entities) as Entity<T>[])\n  }\n\n  static getEntityIds(stateClass) {\n    return createSelector([stateClass], state => Object.keys(state.entities))\n  }\n\n  static getEntityListByPageFn(stateClass) {\n    return (pageIds: number[]) => {\n      return createSelector([stateClass], state => pageIds.map(id => state.entities[id]))\n    }\n  }\n}\n","export const isArray = (item: any): item is any[] => Array.isArray(item)\n\nexport const serializePageQuery = ({ page, ...params }: any) => `?${new URLSearchParams(params)}`\n\nexport const getYoutubeId = (url: string, opts = { fuzzy: true }) => {\n  if (!/youtu\\.?be/.test(url)) return null\n\n  // Look first for known patterns\n  let i: number\n  const patterns = [\n    /youtu\\.be\\/([^#&?]{11})/, // youtu.be/<id>\n    /\\?v=([^#&?]{11})/, // ?v=<id>\n    /&v=([^#&?]{11})/, // &v=<id>\n    /embed\\/([^#&?]{11})/, // embed/<id>\n    /\\/v\\/([^#&?]{11})/, // /v/<id>\n  ]\n\n  // If any pattern matches, return the ID\n  for (i = 0; i < patterns.length; ++i) {\n    if (patterns[i].test(url)) {\n      return patterns[i].exec(url)[1]\n    }\n  }\n\n  if (opts.fuzzy) {\n    // If that fails, break it apart by certain characters and look\n    // for the 11 character key\n    const tokens = url.split(/[/&?=#.\\s]/g)\n    for (i = 0; i < tokens.length; ++i) {\n      if (/^[^#&?]{11}$/.test(tokens[i])) {\n        return tokens[i]\n      }\n    }\n  }\n}\n","import { StateOperator } from '@ngxs/store'\nimport { patch } from '@ngxs/store/operators'\nimport { Entity, EntityPartial, PaginatedEntities } from '../models'\n\nimport { isArray } from '.'\n\nexport const createEntity = <T>(id: Entity<T>['id'], entity: T = null): Entity<T> => ({\n  id,\n  entity,\n  lastUpdatedAt: new Date().toISOString(),\n  isFetching: false,\n  isRefreshing: false,\n  isError: false,\n})\n\nexport function uniq(item: any | any[]): StateOperator<any[]> {\n  return (state: any[]) => {\n    const noUniq = isArray(item) ? item.some(i => !state.includes(i)) : state.includes(item)\n    if (noUniq) {\n      return state\n    }\n\n    return state.concat(isArray(item) ? item.filter(i => !state.includes(i)) : item)\n  }\n}\n\nexport function addEntity<T>(entity: Entity<T>): StateOperator<PaginatedEntities<T>> {\n  const id = entity.id.toString()\n  return patch<PaginatedEntities<T>>({ ids: uniq(id), entities: patch({ [id]: entity }) })\n}\n\nexport function addEntities<T>(payload: Entity<T>[]): StateOperator<PaginatedEntities<T>> {\n  const entities = payload.reduce((obj, entity) => ((obj[entity.id] = entity), obj), {})\n  return patch<PaginatedEntities<T>>({\n    ids: uniq(payload.map(p => p.id.toString())),\n    entities: patch(entities),\n  })\n}\n\nexport function updateEntity<T>(payload: EntityPartial<T>): StateOperator<PaginatedEntities<T>> {\n  return (state: PaginatedEntities<T>) => {\n    const prevEntity = state.entities[payload.id]\n    return {\n      ...state,\n      entities: { ...state.entities, [payload.id]: { ...prevEntity, ...payload } },\n    }\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams, HttpResponse } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\n\nimport { map } from 'rxjs/operators'\nimport { environment } from 'src/environments/environment'\n\nimport { Page } from '../shared/models'\n\nimport { Post } from './models/post.model'\n\nexport interface PostRequestOptions {\n  page: number\n  perPage?: number\n}\n\nconst { apiUrl } = environment\n\nconst headersGetTotal = (headers: HttpHeaders) => {\n  const wpTotal = headers.get('x-wp-total')\n  if (wpTotal == null) throw Error('Header \"x-wp-total\" missing in response')\n\n  return Number(wpTotal)\n}\nconst headersGetTotalPages = (headers: HttpHeaders) => {\n  const wpTotalPages = headers.get('x-wp-totalpages')\n  if (wpTotalPages == null) throw Error('Header \"x-wp-totalpages\" missing in response')\n\n  return Number(wpTotalPages)\n}\n\nconst getPostPageFromResponse = (response: HttpResponse<Post[]>): Page<Post> => {\n  const { body, headers } = response\n  return { body, total: headersGetTotal(headers), totalPages: headersGetTotalPages(headers) }\n}\n\n@Injectable({ providedIn: 'root' })\nexport class PostsService {\n  constructor(private http: HttpClient) {}\n\n  getPost(id: number) {\n    return this.http.get<Post>(`${apiUrl}posts/${id}`)\n  }\n\n  getPosts({ page, perPage = 10 }: PostRequestOptions) {\n    const params = new HttpParams({\n      fromObject: {\n        page: String(page),\n        per_page: String(perPage),\n      },\n    })\n\n    return this.http\n      .get<Post[]>(`${apiUrl}posts`, { params, observe: 'response' })\n      .pipe(map(getPostPageFromResponse))\n  }\n}\n","import { SharedSelectors } from 'src/app/shared/store/selectors'\nimport { serializePageQuery } from 'src/app/shared/util'\n\nimport { Selector } from '@ngxs/store'\nimport { Post } from '../models/post.model'\nimport { PostRequestOptions } from '../posts.service'\n\nimport { PortfolioState, PortfolioStateModel } from './portfolio.state'\n\nexport class PortfolioSelectors {\n  static entities = SharedSelectors.getEntities<Post>(PortfolioState)\n  static ids = SharedSelectors.getEntityIds(PortfolioState)\n  static posts = SharedSelectors.getEntityList<Post>(PortfolioState)\n\n  @Selector([PortfolioState])\n  static pagination(state: PortfolioStateModel) {\n    return state.pagination\n  }\n  @Selector([PortfolioSelectors.entities])\n  static postEntityByIdFn(entities: ReturnType<typeof PortfolioSelectors.entities>) {\n    return (id: number) => entities[id]\n  }\n  @Selector([PortfolioSelectors.pagination])\n  static postQueryFn(pagination: ReturnType<typeof PortfolioSelectors.pagination>) {\n    return (options: PostRequestOptions) => pagination[serializePageQuery(options)]\n  }\n  @Selector([PortfolioSelectors.postQueryFn])\n  static postQueryPageFn(getPageQuery: ReturnType<typeof PortfolioSelectors.postQueryFn>) {\n    return (options: PostRequestOptions) => getPageQuery(options).pages[options.page]\n  }\n  @Selector([PortfolioSelectors.entities, PortfolioSelectors.postQueryFn])\n  static postEntitiesByQueryFn(\n    entities: ReturnType<typeof PortfolioSelectors.entities>,\n    getPageQuery: ReturnType<typeof PortfolioSelectors.postQueryFn>,\n  ) {\n    return (options: PostRequestOptions) => {\n      const pages = Object.values(getPageQuery(options).pages).filter(p => !p.isFetching)\n      const ids = pages.map(p => p.entity).flat()\n      return ids.map(id => entities[id])\n    }\n  }\n}\n","import { Injectable } from '@angular/core'\n\nimport { catchError, map } from 'rxjs/operators'\n\nimport { Action, NgxsOnInit, State, StateContext, Store } from '@ngxs/store'\nimport { patch } from '@ngxs/store/operators'\nimport { PaginatedEntities } from '../../shared/models'\nimport { serializePageQuery } from '../../shared/util'\nimport { addEntities, addEntity, createEntity, updateEntity } from '../../shared/util/store'\nimport { Post } from '../models/post.model'\nimport { PostsService } from '../posts.service'\n\nimport {\n  GetPost,\n  GetPostError,\n  GetPostPage,\n  GetPostPageError,\n  GetPostPageSuccess,\n  GetPostSuccess,\n} from './portfolio.actions'\n\nexport type PortfolioStateModel = PaginatedEntities<Post>\nexport type PortfolioStateContext = StateContext<PortfolioStateModel>\n\nconst initialState: PortfolioStateModel = { entities: {}, ids: [], pagination: {} }\n\n@State<PortfolioStateModel>({ name: 'portfolio', defaults: initialState })\n@Injectable()\nexport class PortfolioState implements NgxsOnInit {\n  constructor(private postsService: PostsService, private store: Store) {}\n\n  ngxsOnInit(ctx: PortfolioStateContext) {\n    ctx.dispatch(new GetPostPage({ page: 1, perPage: 8 }))\n  }\n\n  @Action(GetPost)\n  getPost(ctx: PortfolioStateContext, { id }: GetPost) {\n    const existing = ctx.getState().entities[id]\n    if (existing && !existing.isError) {\n      return ctx.dispatch(new GetPostSuccess(existing.entity))\n    }\n\n    ctx.setState(\n      addEntity<Post>({ ...createEntity<Post>(id), isFetching: true }),\n    )\n\n    return this.postsService.getPost(id).pipe(\n      map(response => ctx.dispatch(new GetPostSuccess(response))),\n      catchError(error => ctx.dispatch(new GetPostError(id, error))),\n    )\n  }\n\n  @Action(GetPostSuccess)\n  getPostSuccess(ctx: PortfolioStateContext, { post }: GetPostSuccess) {\n    ctx.setState(updateEntity<Post>(createEntity<Post>(post.id, post)))\n  }\n\n  @Action(GetPostError)\n  getPostError(ctx: PortfolioStateContext, { id, error }: GetPostError) {\n    ctx.setState(updateEntity({ id, isError: true, isFetching: false, isRefreshing: false }))\n    console.error(error)\n  }\n\n  @Action(GetPostPage)\n  getPostPage(ctx: PortfolioStateContext, { page }: GetPostPage) {\n    const state = ctx.getState()\n    const query = serializePageQuery(page)\n\n    const existingQuery = ctx.getState().pagination[query]\n    if (existingQuery && existingQuery.pages[page.page]) return\n\n    if (!existingQuery) {\n      ctx.patchState({\n        pagination: { ...state.pagination, [query]: { total: 0, totalPages: 0, pages: {} } },\n      })\n    }\n\n    ctx.setState(\n      patch({\n        pagination: patch({\n          [query]: patch({\n            pages: patch({ [page.page]: { ...createEntity(page.page), isFetching: true } }),\n          }),\n        }),\n      }),\n    )\n\n    return this.postsService.getPosts(page).pipe(\n      map(response => ctx.dispatch(new GetPostPageSuccess(page, response))),\n      catchError(error => ctx.dispatch(new GetPostPageError(page, error))),\n    )\n  }\n\n  @Action(GetPostPageSuccess)\n  getPostPageSuccess(ctx: PortfolioStateContext, { page, payload }: GetPostPageSuccess) {\n    const query = serializePageQuery(page)\n\n    const entities = payload.body.map(item => createEntity(item.id, item))\n    const pageIds = payload.body.map(item => item.id.toString())\n    ctx.setState(addEntities(entities))\n\n    ctx.setState(\n      patch({\n        pagination: patch({\n          [query]: patch({\n            total: payload.total,\n            totalPages: payload.totalPages,\n            pages: patch({ [page.page]: { ...createEntity(page.page, pageIds) } }),\n          }),\n        }),\n      }),\n    )\n  }\n\n  @Action(GetPostPageError)\n  getPostPageError(ctx: PortfolioStateContext, { page, error }: GetPostPageError) {\n    const query = serializePageQuery(page)\n    ctx.setState(\n      patch({\n        pagination: patch({\n          [query]: patch({\n            pages: patch({\n              [page.page]: patch({ isError: true, isRefreshing: false, isFetching: false }),\n            }),\n          }),\n        }),\n      }),\n    )\n    console.error(error)\n  }\n}\n","import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function withLatestFrom(...args) {\n    return (source) => {\n        let project;\n        if (typeof args[args.length - 1] === 'function') {\n            project = args.pop();\n        }\n        const observables = args;\n        return source.lift(new WithLatestFromOperator(observables, project));\n    };\n}\nclass WithLatestFromOperator {\n    constructor(observables, project) {\n        this.observables = observables;\n        this.project = project;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n    }\n}\nclass WithLatestFromSubscriber extends OuterSubscriber {\n    constructor(destination, observables, project) {\n        super(destination);\n        this.observables = observables;\n        this.project = project;\n        this.toRespond = [];\n        const len = observables.length;\n        this.values = new Array(len);\n        for (let i = 0; i < len; i++) {\n            this.toRespond.push(i);\n        }\n        for (let i = 0; i < len; i++) {\n            let observable = observables[i];\n            this.add(subscribeToResult(this, observable, observable, i));\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        const toRespond = this.toRespond;\n        if (toRespond.length > 0) {\n            const found = toRespond.indexOf(outerIndex);\n            if (found !== -1) {\n                toRespond.splice(found, 1);\n            }\n        }\n    }\n    notifyComplete() {\n    }\n    _next(value) {\n        if (this.toRespond.length === 0) {\n            const args = [value, ...this.values];\n            if (this.project) {\n                this._tryProject(args);\n            }\n            else {\n                this.destination.next(args);\n            }\n        }\n    }\n    _tryProject(args) {\n        let result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    }\n}\n//# sourceMappingURL=withLatestFrom.js.map","import { EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, NgZone, Optional, Inject, PLATFORM_ID, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { BehaviorSubject, Subject, of, combineLatest, pipe, Observable, merge } from 'rxjs';\nimport { take, startWith, combineLatest as combineLatest$1, skipWhile, map, scan, distinctUntilChanged, flatMap, takeUntil, publish, withLatestFrom, filter } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/youtube-player/youtube-player.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nimport * as ɵngcc0 from '@angular/core';\n\nconst _c0 = [\"youtubeContainer\"];\nconst DEFAULT_PLAYER_WIDTH = 640;\n/** @type {?} */\nconst DEFAULT_PLAYER_HEIGHT = 390;\n/**\n * @record\n */\nfunction Player() { }\nif (false) {\n    /** @type {?|undefined} */\n    Player.prototype.videoId;\n}\n/**\n * Object used to store the state of the player if the\n * user tries to interact with the API before it has been loaded.\n * @record\n */\nfunction PendingPlayerState() { }\nif (false) {\n    /** @type {?|undefined} */\n    PendingPlayerState.prototype.playbackState;\n    /** @type {?|undefined} */\n    PendingPlayerState.prototype.playbackRate;\n    /** @type {?|undefined} */\n    PendingPlayerState.prototype.volume;\n    /** @type {?|undefined} */\n    PendingPlayerState.prototype.muted;\n    /** @type {?|undefined} */\n    PendingPlayerState.prototype.seek;\n}\n/**\n * Angular component that renders a YouTube player via the YouTube player\n * iframe API.\n * @see https://developers.google.com/youtube/iframe_api_reference\n */\nclass YouTubePlayer {\n    /**\n     * @param {?} _ngZone\n     * @param {?=} platformId\n     */\n    constructor(_ngZone, \n    /**\n     * @deprecated `platformId` parameter to become required.\n     * @breaking-change 10.0.0\n     */\n    platformId) {\n        this._ngZone = _ngZone;\n        this._videoId = new BehaviorSubject(undefined);\n        this._height = new BehaviorSubject(DEFAULT_PLAYER_HEIGHT);\n        this._width = new BehaviorSubject(DEFAULT_PLAYER_WIDTH);\n        this._startSeconds = new BehaviorSubject(undefined);\n        this._endSeconds = new BehaviorSubject(undefined);\n        this._suggestedQuality = new BehaviorSubject(undefined);\n        /**\n         * Outputs are direct proxies from the player itself.\n         */\n        this.ready = new EventEmitter();\n        this.stateChange = new EventEmitter();\n        this.error = new EventEmitter();\n        this.apiChange = new EventEmitter();\n        this.playbackQualityChange = new EventEmitter();\n        this.playbackRateChange = new EventEmitter();\n        this._youtubeContainer = new Subject();\n        this._destroyed = new Subject();\n        // @breaking-change 10.0.0 Remove null check for `platformId`.\n        this._isBrowser =\n            platformId ? isPlatformBrowser(platformId) : typeof window === 'object' && !!window;\n    }\n    /**\n     * YouTube Video ID to view\n     * @return {?}\n     */\n    get videoId() { return this._videoId.value; }\n    /**\n     * @param {?} videoId\n     * @return {?}\n     */\n    set videoId(videoId) {\n        this._videoId.next(videoId);\n    }\n    /**\n     * Height of video player\n     * @return {?}\n     */\n    get height() { return this._height.value; }\n    /**\n     * @param {?} height\n     * @return {?}\n     */\n    set height(height) {\n        this._height.next(height || DEFAULT_PLAYER_HEIGHT);\n    }\n    /**\n     * Width of video player\n     * @return {?}\n     */\n    get width() { return this._width.value; }\n    /**\n     * @param {?} width\n     * @return {?}\n     */\n    set width(width) {\n        this._width.next(width || DEFAULT_PLAYER_WIDTH);\n    }\n    /**\n     * The moment when the player is supposed to start playing\n     * @param {?} startSeconds\n     * @return {?}\n     */\n    set startSeconds(startSeconds) {\n        this._startSeconds.next(startSeconds);\n    }\n    /**\n     * The moment when the player is supposed to stop playing\n     * @param {?} endSeconds\n     * @return {?}\n     */\n    set endSeconds(endSeconds) {\n        this._endSeconds.next(endSeconds);\n    }\n    /**\n     * The suggested quality of the player\n     * @param {?} suggestedQuality\n     * @return {?}\n     */\n    set suggestedQuality(suggestedQuality) {\n        this._suggestedQuality.next(suggestedQuality);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        // Don't do anything if we're not in a browser environment.\n        if (!this._isBrowser) {\n            return;\n        }\n        /** @type {?} */\n        let iframeApiAvailableObs = of(true);\n        if (!window.YT) {\n            if (this.showBeforeIframeApiLoads) {\n                throw new Error('Namespace YT not found, cannot construct embedded youtube player. ' +\n                    'Please install the YouTube Player API Reference for iframe Embeds: ' +\n                    'https://developers.google.com/youtube/iframe_api_reference');\n            }\n            /** @type {?} */\n            const iframeApiAvailableSubject = new Subject();\n            this._existingApiReadyCallback = window.onYouTubeIframeAPIReady;\n            window.onYouTubeIframeAPIReady = (/**\n             * @return {?}\n             */\n            () => {\n                if (this._existingApiReadyCallback) {\n                    this._existingApiReadyCallback();\n                }\n                this._ngZone.run((/**\n                 * @return {?}\n                 */\n                () => iframeApiAvailableSubject.next(true)));\n            });\n            iframeApiAvailableObs = iframeApiAvailableSubject.pipe(take(1), startWith(false));\n        }\n        // An observable of the currently loaded player.\n        /** @type {?} */\n        const playerObs = createPlayerObservable(this._youtubeContainer, this._videoId, iframeApiAvailableObs, this._width, this._height, this.createEventsBoundInZone(), this._ngZone).pipe(waitUntilReady((/**\n         * @param {?} player\n         * @return {?}\n         */\n        player => {\n            // Destroy the player if loading was aborted so that we don't end up leaking memory.\n            if (!playerIsReady(player)) {\n                player.destroy();\n            }\n        })), takeUntil(this._destroyed), publish());\n        // Set up side effects to bind inputs to the player.\n        playerObs.subscribe((/**\n         * @param {?} player\n         * @return {?}\n         */\n        player => {\n            this._player = player;\n            if (player && this._pendingPlayerState) {\n                this._initializePlayer(player, this._pendingPlayerState);\n            }\n            this._pendingPlayerState = undefined;\n        }));\n        bindSizeToPlayer(playerObs, this._width, this._height);\n        bindSuggestedQualityToPlayer(playerObs, this._suggestedQuality);\n        bindCueVideoCall(playerObs, this._videoId, this._startSeconds, this._endSeconds, this._suggestedQuality, this._destroyed);\n        // After all of the subscriptions are set up, connect the observable.\n        ((/** @type {?} */ (playerObs))).connect();\n    }\n    /**\n     * @return {?}\n     */\n    createEventsBoundInZone() {\n        /** @type {?} */\n        const output = {};\n        /** @type {?} */\n        const events = new Map([\n            ['onReady', this.ready],\n            ['onStateChange', this.stateChange],\n            ['onPlaybackQualityChange', this.playbackQualityChange],\n            ['onPlaybackRateChange', this.playbackRateChange],\n            ['onError', this.error],\n            ['onApiChange', this.apiChange]\n        ]);\n        events.forEach((/**\n         * @param {?} emitter\n         * @param {?} name\n         * @return {?}\n         */\n        (emitter, name) => {\n            // Since these events all trigger change detection, only bind them if something is subscribed.\n            if (emitter.observers.length) {\n                output[name] = this._runInZone((/**\n                 * @param {?} event\n                 * @return {?}\n                 */\n                event => emitter.emit(event)));\n            }\n        }));\n        return output;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        this._youtubeContainer.next(this.youtubeContainer.nativeElement);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._player) {\n            this._player.destroy();\n            window.onYouTubeIframeAPIReady = this._existingApiReadyCallback;\n        }\n        this._videoId.complete();\n        this._height.complete();\n        this._width.complete();\n        this._startSeconds.complete();\n        this._endSeconds.complete();\n        this._suggestedQuality.complete();\n        this._youtubeContainer.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * @private\n     * @template T\n     * @param {?} callback\n     * @return {?}\n     */\n    _runInZone(callback) {\n        return (/**\n         * @param {...?} args\n         * @return {?}\n         */\n        (...args) => this._ngZone.run((/**\n         * @return {?}\n         */\n        () => callback(...args))));\n    }\n    /** Proxied methods. */\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#playVideo\n     * @return {?}\n     */\n    playVideo() {\n        if (this._player) {\n            this._player.playVideo();\n        }\n        else {\n            this._getPendingState().playbackState = 1 /* PLAYING */;\n        }\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#pauseVideo\n     * @return {?}\n     */\n    pauseVideo() {\n        if (this._player) {\n            this._player.pauseVideo();\n        }\n        else {\n            this._getPendingState().playbackState = 2 /* PAUSED */;\n        }\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#stopVideo\n     * @return {?}\n     */\n    stopVideo() {\n        if (this._player) {\n            this._player.stopVideo();\n        }\n        else {\n            // It seems like YouTube sets the player to CUED when it's stopped.\n            this._getPendingState().playbackState = 5 /* CUED */;\n        }\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#seekTo\n     * @param {?} seconds\n     * @param {?} allowSeekAhead\n     * @return {?}\n     */\n    seekTo(seconds, allowSeekAhead) {\n        if (this._player) {\n            this._player.seekTo(seconds, allowSeekAhead);\n        }\n        else {\n            this._getPendingState().seek = { seconds, allowSeekAhead };\n        }\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#mute\n     * @return {?}\n     */\n    mute() {\n        if (this._player) {\n            this._player.mute();\n        }\n        else {\n            this._getPendingState().muted = true;\n        }\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#unMute\n     * @return {?}\n     */\n    unMute() {\n        if (this._player) {\n            this._player.unMute();\n        }\n        else {\n            this._getPendingState().muted = false;\n        }\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#isMuted\n     * @return {?}\n     */\n    isMuted() {\n        if (this._player) {\n            return this._player.isMuted();\n        }\n        if (this._pendingPlayerState) {\n            return !!this._pendingPlayerState.muted;\n        }\n        return false;\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#setVolume\n     * @param {?} volume\n     * @return {?}\n     */\n    setVolume(volume) {\n        if (this._player) {\n            this._player.setVolume(volume);\n        }\n        else {\n            this._getPendingState().volume = volume;\n        }\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#getVolume\n     * @return {?}\n     */\n    getVolume() {\n        if (this._player) {\n            return this._player.getVolume();\n        }\n        if (this._pendingPlayerState && this._pendingPlayerState.volume != null) {\n            return this._pendingPlayerState.volume;\n        }\n        return 0;\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#setPlaybackRate\n     * @param {?} playbackRate\n     * @return {?}\n     */\n    setPlaybackRate(playbackRate) {\n        if (this._player) {\n            return this._player.setPlaybackRate(playbackRate);\n        }\n        else {\n            this._getPendingState().playbackRate = playbackRate;\n        }\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#getPlaybackRate\n     * @return {?}\n     */\n    getPlaybackRate() {\n        if (this._player) {\n            return this._player.getPlaybackRate();\n        }\n        if (this._pendingPlayerState && this._pendingPlayerState.playbackRate != null) {\n            return this._pendingPlayerState.playbackRate;\n        }\n        return 0;\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#getAvailablePlaybackRates\n     * @return {?}\n     */\n    getAvailablePlaybackRates() {\n        return this._player ? this._player.getAvailablePlaybackRates() : [];\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#getVideoLoadedFraction\n     * @return {?}\n     */\n    getVideoLoadedFraction() {\n        return this._player ? this._player.getVideoLoadedFraction() : 0;\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#getPlayerState\n     * @return {?}\n     */\n    getPlayerState() {\n        if (!this._isBrowser || !window.YT) {\n            return undefined;\n        }\n        if (this._player) {\n            return this._player.getPlayerState();\n        }\n        if (this._pendingPlayerState && this._pendingPlayerState.playbackState != null) {\n            return this._pendingPlayerState.playbackState;\n        }\n        return -1 /* UNSTARTED */;\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#getCurrentTime\n     * @return {?}\n     */\n    getCurrentTime() {\n        if (this._player) {\n            return this._player.getCurrentTime();\n        }\n        if (this._pendingPlayerState && this._pendingPlayerState.seek) {\n            return this._pendingPlayerState.seek.seconds;\n        }\n        return 0;\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#getPlaybackQuality\n     * @return {?}\n     */\n    getPlaybackQuality() {\n        return this._player ? this._player.getPlaybackQuality() : 'default';\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#getAvailableQualityLevels\n     * @return {?}\n     */\n    getAvailableQualityLevels() {\n        return this._player ? this._player.getAvailableQualityLevels() : [];\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#getDuration\n     * @return {?}\n     */\n    getDuration() {\n        return this._player ? this._player.getDuration() : 0;\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#getVideoUrl\n     * @return {?}\n     */\n    getVideoUrl() {\n        return this._player ? this._player.getVideoUrl() : '';\n    }\n    /**\n     * See https://developers.google.com/youtube/iframe_api_reference#getVideoEmbedCode\n     * @return {?}\n     */\n    getVideoEmbedCode() {\n        return this._player ? this._player.getVideoEmbedCode() : '';\n    }\n    /**\n     * Gets an object that should be used to store the temporary API state.\n     * @private\n     * @return {?}\n     */\n    _getPendingState() {\n        if (!this._pendingPlayerState) {\n            this._pendingPlayerState = {};\n        }\n        return this._pendingPlayerState;\n    }\n    /**\n     * Initializes a player from a temporary state.\n     * @private\n     * @param {?} player\n     * @param {?} state\n     * @return {?}\n     */\n    _initializePlayer(player, state) {\n        const { playbackState, playbackRate, volume, muted, seek } = state;\n        switch (playbackState) {\n            case 1 /* PLAYING */:\n                player.playVideo();\n                break;\n            case 2 /* PAUSED */:\n                player.pauseVideo();\n                break;\n            case 5 /* CUED */:\n                player.stopVideo();\n                break;\n        }\n        if (playbackRate != null) {\n            player.setPlaybackRate(playbackRate);\n        }\n        if (volume != null) {\n            player.setVolume(volume);\n        }\n        if (muted != null) {\n            muted ? player.mute() : player.unMute();\n        }\n        if (seek != null) {\n            player.seekTo(seek.seconds, seek.allowSeekAhead);\n        }\n    }\n}\nYouTubePlayer.ɵfac = function YouTubePlayer_Factory(t) { return new (t || YouTubePlayer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID, 8)); };\nYouTubePlayer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: YouTubePlayer, selectors: [[\"youtube-player\"]], viewQuery: function YouTubePlayer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.youtubeContainer = _t.first);\n    } }, inputs: { videoId: \"videoId\", height: \"height\", width: \"width\", startSeconds: \"startSeconds\", endSeconds: \"endSeconds\", suggestedQuality: \"suggestedQuality\", showBeforeIframeApiLoads: \"showBeforeIframeApiLoads\" }, outputs: { ready: \"ready\", stateChange: \"stateChange\", error: \"error\", apiChange: \"apiChange\", playbackQualityChange: \"playbackQualityChange\", playbackRateChange: \"playbackRateChange\" }, decls: 2, vars: 0, consts: [[\"youtubeContainer\", \"\"]], template: function YouTubePlayer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"div\", null, 0);\n    } }, encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nYouTubePlayer.ctorParameters = () => [\n    { type: NgZone },\n    { type: Object, decorators: [{ type: Optional }, { type: Inject, args: [PLATFORM_ID,] }] }\n];\nYouTubePlayer.propDecorators = {\n    videoId: [{ type: Input }],\n    height: [{ type: Input }],\n    width: [{ type: Input }],\n    startSeconds: [{ type: Input }],\n    endSeconds: [{ type: Input }],\n    suggestedQuality: [{ type: Input }],\n    showBeforeIframeApiLoads: [{ type: Input }],\n    ready: [{ type: Output }],\n    stateChange: [{ type: Output }],\n    error: [{ type: Output }],\n    apiChange: [{ type: Output }],\n    playbackQualityChange: [{ type: Output }],\n    playbackRateChange: [{ type: Output }],\n    youtubeContainer: [{ type: ViewChild, args: ['youtubeContainer',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(YouTubePlayer, [{\n        type: Component,\n        args: [{\n                selector: 'youtube-player',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                // This div is *replaced* by the YouTube player embed.\n                template: '<div #youtubeContainer></div>'\n            }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: Object, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }]; }, { ready: [{\n            type: Output\n        }], stateChange: [{\n            type: Output\n        }], error: [{\n            type: Output\n        }], apiChange: [{\n            type: Output\n        }], playbackQualityChange: [{\n            type: Output\n        }], playbackRateChange: [{\n            type: Output\n        }], videoId: [{\n            type: Input\n        }], height: [{\n            type: Input\n        }], width: [{\n            type: Input\n        }], startSeconds: [{\n            type: Input\n        }], endSeconds: [{\n            type: Input\n        }], suggestedQuality: [{\n            type: Input\n        }], showBeforeIframeApiLoads: [{\n            type: Input\n        }], youtubeContainer: [{\n            type: ViewChild,\n            args: ['youtubeContainer']\n        }] }); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    YouTubePlayer.prototype._videoId;\n    /**\n     * @type {?}\n     * @private\n     */\n    YouTubePlayer.prototype._height;\n    /**\n     * @type {?}\n     * @private\n     */\n    YouTubePlayer.prototype._width;\n    /**\n     * @type {?}\n     * @private\n     */\n    YouTubePlayer.prototype._startSeconds;\n    /**\n     * @type {?}\n     * @private\n     */\n    YouTubePlayer.prototype._endSeconds;\n    /**\n     * @type {?}\n     * @private\n     */\n    YouTubePlayer.prototype._suggestedQuality;\n    /**\n     * Whether the iframe will attempt to load regardless of the status of the api on the\n     * page. Set this to true if you don't want the `onYouTubeIframeAPIReady` field to be\n     * set on the global window.\n     * @type {?}\n     */\n    YouTubePlayer.prototype.showBeforeIframeApiLoads;\n    /**\n     * Outputs are direct proxies from the player itself.\n     * @type {?}\n     */\n    YouTubePlayer.prototype.ready;\n    /** @type {?} */\n    YouTubePlayer.prototype.stateChange;\n    /** @type {?} */\n    YouTubePlayer.prototype.error;\n    /** @type {?} */\n    YouTubePlayer.prototype.apiChange;\n    /** @type {?} */\n    YouTubePlayer.prototype.playbackQualityChange;\n    /** @type {?} */\n    YouTubePlayer.prototype.playbackRateChange;\n    /**\n     * The element that will be replaced by the iframe.\n     * @type {?}\n     */\n    YouTubePlayer.prototype.youtubeContainer;\n    /**\n     * Whether we're currently rendering inside a browser.\n     * @type {?}\n     * @private\n     */\n    YouTubePlayer.prototype._isBrowser;\n    /**\n     * @type {?}\n     * @private\n     */\n    YouTubePlayer.prototype._youtubeContainer;\n    /**\n     * @type {?}\n     * @private\n     */\n    YouTubePlayer.prototype._destroyed;\n    /**\n     * @type {?}\n     * @private\n     */\n    YouTubePlayer.prototype._player;\n    /**\n     * @type {?}\n     * @private\n     */\n    YouTubePlayer.prototype._existingApiReadyCallback;\n    /**\n     * @type {?}\n     * @private\n     */\n    YouTubePlayer.prototype._pendingPlayerState;\n    /**\n     * @type {?}\n     * @private\n     */\n    YouTubePlayer.prototype._ngZone;\n}\n/**\n * Listens to changes to the given width and height and sets it on the player.\n * @param {?} playerObs\n * @param {?} widthObs\n * @param {?} heightObs\n * @return {?}\n */\nfunction bindSizeToPlayer(playerObs, widthObs, heightObs) {\n    return combineLatest([playerObs, widthObs, heightObs])\n        .subscribe((/**\n     * @param {?} __0\n     * @return {?}\n     */\n    ([player, width, height]) => player && player.setSize(width, height)));\n}\n/**\n * Listens to changes from the suggested quality and sets it on the given player.\n * @param {?} playerObs\n * @param {?} suggestedQualityObs\n * @return {?}\n */\nfunction bindSuggestedQualityToPlayer(playerObs, suggestedQualityObs) {\n    return combineLatest([\n        playerObs,\n        suggestedQualityObs\n    ]).subscribe((/**\n     * @param {?} __0\n     * @return {?}\n     */\n    ([player, suggestedQuality]) => player && suggestedQuality && player.setPlaybackQuality(suggestedQuality)));\n}\n/**\n * Returns an observable that emits the loaded player once it's ready. Certain properties/methods\n * won't be available until the iframe finishes loading.\n * @param {?} onAbort Callback function that will be invoked if the player loading was aborted before\n * it was able to complete. Can be used to clean up any loose references.\n * @return {?}\n */\nfunction waitUntilReady(onAbort) {\n    return flatMap((/**\n     * @param {?} player\n     * @return {?}\n     */\n    player => {\n        if (!player) {\n            return of(undefined);\n        }\n        if (playerIsReady(player)) {\n            return of((/** @type {?} */ (player)));\n        }\n        // Since removeEventListener is not on Player when it's initialized, we can't use fromEvent.\n        // The player is not initialized fully until the ready is called.\n        return new Observable((/**\n         * @param {?} emitter\n         * @return {?}\n         */\n        emitter => {\n            /** @type {?} */\n            let aborted = false;\n            /** @type {?} */\n            let resolved = false;\n            /** @type {?} */\n            const onReady = (/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                resolved = true;\n                if (!aborted) {\n                    event.target.removeEventListener('onReady', onReady);\n                    emitter.next(event.target);\n                }\n            });\n            player.addEventListener('onReady', onReady);\n            return (/**\n             * @return {?}\n             */\n            () => {\n                aborted = true;\n                if (!resolved) {\n                    onAbort(player);\n                }\n            });\n        })).pipe(take(1), startWith(undefined));\n    }));\n}\n/**\n * Create an observable for the player based on the given options.\n * @param {?} youtubeContainer\n * @param {?} videoIdObs\n * @param {?} iframeApiAvailableObs\n * @param {?} widthObs\n * @param {?} heightObs\n * @param {?} events\n * @param {?} ngZone\n * @return {?}\n */\nfunction createPlayerObservable(youtubeContainer, videoIdObs, iframeApiAvailableObs, widthObs, heightObs, events, ngZone) {\n    /** @type {?} */\n    const playerOptions = videoIdObs\n        .pipe(withLatestFrom(combineLatest([widthObs, heightObs])), map((/**\n     * @param {?} __0\n     * @return {?}\n     */\n    ([videoId, [width, height]]) => videoId ? ({ videoId, width, height, events }) : undefined)));\n    return combineLatest([youtubeContainer, playerOptions, of(ngZone)])\n        .pipe(skipUntilRememberLatest(iframeApiAvailableObs), scan(syncPlayerState, undefined), distinctUntilChanged());\n}\n/**\n * Skips the given observable until the other observable emits true, then emit the latest.\n * @template T\n * @param {?} notifier\n * @return {?}\n */\nfunction skipUntilRememberLatest(notifier) {\n    return pipe(combineLatest$1(notifier), skipWhile((/**\n     * @param {?} __0\n     * @return {?}\n     */\n    ([_, doneSkipping]) => !doneSkipping)), map((/**\n     * @param {?} __0\n     * @return {?}\n     */\n    ([value]) => value)));\n}\n/**\n * Destroy the player if there are no options, or create the player if there are options.\n * @param {?} player\n * @param {?} __1\n * @return {?}\n */\nfunction syncPlayerState(player, [container, videoOptions, ngZone]) {\n    if (!videoOptions) {\n        if (player) {\n            player.destroy();\n        }\n        return;\n    }\n    if (player) {\n        return player;\n    }\n    // Important! We need to create the Player object outside of the `NgZone`, because it kicks\n    // off a 250ms setInterval which will continually trigger change detection if we don't.\n    /** @type {?} */\n    const newPlayer = ngZone.runOutsideAngular((/**\n     * @return {?}\n     */\n    () => new YT.Player(container, videoOptions)));\n    // Bind videoId for future use.\n    newPlayer.videoId = videoOptions.videoId;\n    return newPlayer;\n}\n/**\n * Call cueVideoById if the videoId changes, or when start or end seconds change. cueVideoById will\n * change the loaded video id to the given videoId, and set the start and end times to the given\n * start/end seconds.\n * @param {?} playerObs\n * @param {?} videoIdObs\n * @param {?} startSecondsObs\n * @param {?} endSecondsObs\n * @param {?} suggestedQualityObs\n * @param {?} destroyed\n * @return {?}\n */\nfunction bindCueVideoCall(playerObs, videoIdObs, startSecondsObs, endSecondsObs, suggestedQualityObs, destroyed) {\n    /** @type {?} */\n    const cueOptionsObs = combineLatest([startSecondsObs, endSecondsObs])\n        .pipe(map((/**\n     * @param {?} __0\n     * @return {?}\n     */\n    ([startSeconds, endSeconds]) => ({ startSeconds, endSeconds }))));\n    // Only respond to changes in cue options if the player is not running.\n    /** @type {?} */\n    const filteredCueOptions = cueOptionsObs\n        .pipe(filterOnOther(playerObs, (/**\n     * @param {?} player\n     * @return {?}\n     */\n    player => !!player && !hasPlayerStarted(player))));\n    // If the video id changed, there's no reason to run 'cue' unless the player\n    // was initialized with a different video id.\n    /** @type {?} */\n    const changedVideoId = videoIdObs\n        .pipe(filterOnOther(playerObs, (/**\n     * @param {?} player\n     * @param {?} videoId\n     * @return {?}\n     */\n    (player, videoId) => !!player && player.videoId !== videoId)));\n    // If the player changed, there's no reason to run 'cue' unless there are cue options.\n    /** @type {?} */\n    const changedPlayer = playerObs.pipe(filterOnOther(combineLatest([videoIdObs, cueOptionsObs]), (/**\n     * @param {?} __0\n     * @param {?} player\n     * @return {?}\n     */\n    ([videoId, cueOptions], player) => !!player &&\n        (videoId != player.videoId || !!cueOptions.startSeconds || !!cueOptions.endSeconds))));\n    merge(changedPlayer, changedVideoId, filteredCueOptions)\n        .pipe(withLatestFrom(combineLatest([playerObs, videoIdObs, cueOptionsObs, suggestedQualityObs])), map((/**\n     * @param {?} __0\n     * @return {?}\n     */\n    ([_, values]) => values)), takeUntil(destroyed))\n        .subscribe((/**\n     * @param {?} __0\n     * @return {?}\n     */\n    ([player, videoId, cueOptions, suggestedQuality]) => {\n        if (!videoId || !player) {\n            return;\n        }\n        player.videoId = videoId;\n        player.cueVideoById(Object.assign({ videoId,\n            suggestedQuality }, cueOptions));\n    }));\n}\n/**\n * @param {?} player\n * @return {?}\n */\nfunction hasPlayerStarted(player) {\n    /** @type {?} */\n    const state = player.getPlayerState();\n    return state !== -1 /* UNSTARTED */ && state !== 5 /* CUED */;\n}\n/**\n * @param {?} player\n * @return {?}\n */\nfunction playerIsReady(player) {\n    return 'getPlayerStatus' in player;\n}\n/**\n * Combines the two observables temporarily for the filter function.\n * @template R, T\n * @param {?} otherObs\n * @param {?} filterFn\n * @return {?}\n */\nfunction filterOnOther(otherObs, filterFn) {\n    return pipe(withLatestFrom(otherObs), filter((/**\n     * @param {?} __0\n     * @return {?}\n     */\n    ([value, other]) => filterFn(other, value))), map((/**\n     * @param {?} __0\n     * @return {?}\n     */\n    ([value]) => value)));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/youtube-player/youtube-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst COMPONENTS = [YouTubePlayer];\nclass YouTubePlayerModule {\n}\nYouTubePlayerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: YouTubePlayerModule });\nYouTubePlayerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function YouTubePlayerModule_Factory(t) { return new (t || YouTubePlayerModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(YouTubePlayerModule, { declarations: [YouTubePlayer], exports: [YouTubePlayer] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(YouTubePlayerModule, [{\n        type: NgModule,\n        args: [{\n                declarations: COMPONENTS,\n                exports: COMPONENTS\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/youtube-player/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { YouTubePlayer, YouTubePlayerModule };\n\n//# sourceMappingURL=youtube-player.js.map","import { Subscriber } from '../Subscriber';\nexport function skipWhile(predicate) {\n    return (source) => source.lift(new SkipWhileOperator(predicate));\n}\nclass SkipWhileOperator {\n    constructor(predicate) {\n        this.predicate = predicate;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n    }\n}\nclass SkipWhileSubscriber extends Subscriber {\n    constructor(destination, predicate) {\n        super(destination);\n        this.predicate = predicate;\n        this.skipping = true;\n        this.index = 0;\n    }\n    _next(value) {\n        const destination = this.destination;\n        if (this.skipping) {\n            this.tryCallPredicate(value);\n        }\n        if (!this.skipping) {\n            destination.next(value);\n        }\n    }\n    tryCallPredicate(value) {\n        try {\n            const result = this.predicate(value, this.index++);\n            this.skipping = Boolean(result);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    }\n}\n//# sourceMappingURL=skipWhile.js.map","import { isArray } from '../util/isArray';\nimport { CombineLatestOperator } from '../observable/combineLatest';\nimport { from } from '../observable/from';\nconst none = {};\nexport function combineLatest(...observables) {\n    let project = null;\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0].slice();\n    }\n    return (source) => source.lift.call(from([source, ...observables]), new CombineLatestOperator(project));\n}\n//# sourceMappingURL=combineLatest.js.map","import { Subject } from '../Subject';\nimport { multicast } from './multicast';\nexport function publish(selector) {\n    return selector ?\n        multicast(() => new Subject(), selector) :\n        multicast(new Subject());\n}\n//# sourceMappingURL=publish.js.map","<ng-container [ngSwitch]=\"type\">\n  <img\n    *ngSwitchCase=\"'image'\"\n    [src]=\"image.sizes.large\"\n    [alt]=\"image.alt || image.title || image.name || ''\"\n    [width]=\"image.sizes['large-width']\"\n    [height]=\"image.sizes['large-height']\"\n  />\n\n  <div *ngSwitchCase=\"'video'\" class=\"showcase__iframe-container\">\n    <youtube-player [videoId]=\"videoId\" data-testid=\"yt-player\"></youtube-player>\n  </div>\n</ng-container>\n","import { Component, Input, OnInit, Inject } from '@angular/core'\n\nimport { getYoutubeId } from 'src/app/shared/util'\n\nimport { Image, ShowcaseFormat, YoutubeURL } from '../../models/post.model'\nimport { DOCUMENT } from '@angular/common'\n\n@Component({\n  selector: 'app-showcase',\n  templateUrl: './showcase.component.html',\n  styleUrls: ['./showcase.component.css'],\n})\nexport class ShowcaseComponent implements OnInit {\n  @Input() type: ShowcaseFormat\n  @Input() image: Image\n  @Input() video: YoutubeURL\n\n  public videoId: string\n\n  constructor(@Inject(DOCUMENT) private document: Document) {}\n\n  ngOnInit() {\n    if (this.type === 'video') {\n      this.videoId = getYoutubeId(this.video)\n\n      if (typeof YT === 'undefined') this.loadYouTubeAPI()\n    }\n  }\n\n  private loadYouTubeAPI() {\n    const tag = document.createElement('script')\n    tag.src = 'https://www.youtube.com/iframe_api'\n    this.document.body.appendChild(tag)\n  }\n}\n","<table>\n  <tbody>\n    <tr>\n      <th scope=\"row\">Kategorie:</th>\n      <td [innerHTML]=\"data.modul.name\"></td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Semester:</th>\n      <td>\n        <span *ngFor=\"let s of data.semester\" [innerHTML]=\"s.name + '<br>'\"></span>\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Erstellunsjahr:</th>\n      <td [innerHTML]=\"data.erstellungsjahr\"></td>\n    </tr>\n    <tr>\n      <th scope=\"row\">{{ data.studierende.length > 1 ? 'Studierende' : 'Student*in' }}:</th>\n      <td>\n        <span *ngFor=\"let s of data.studierende\" [innerHTML]=\"s.name + '<br>'\"></span>\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">{{ data.dozierende.length > 1 ? 'Dozierende' : 'Dozent*in' }}:</th>\n      <td>\n        <span *ngFor=\"let d of data.dozierende\" [innerHTML]=\"d.name + '<br>'\"></span>\n      </td>\n    </tr>\n  </tbody>\n</table>\n","import { Component, Input, OnInit } from '@angular/core'\n\nimport { Post } from '../../models/post.model'\n\n@Component({\n  selector: 'app-briefing',\n  templateUrl: './briefing.component.html',\n  styleUrls: ['./briefing.component.css'],\n})\nexport class BriefingComponent implements OnInit {\n  @Input() data: Post['acf']\n\n  ngOnInit() {}\n}\n","import { Component, OnInit } from '@angular/core'\n\n@Component({\n  selector: 'app-loading-spinner',\n  templateUrl: './loading-spinner.component.html',\n  styleUrls: ['./loading-spinner.component.css'],\n})\nexport class LoadingSpinnerComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n","<span class=\"post-detail__spinner\" style=\"font-style: normal;\" role=\"img\" aria-hidden=\"true\"\n  >⏳</span\n>\n","<ng-container *ngIf=\"(isFetching$ | async) === false; else loadingSpinner\">\n  <section *ngIf=\"post$ | async as post; else notFound\">\n    <h2 [innerHTML]=\"post.title.rendered\"></h2>\n    <p class=\"post-detail__category\">\n      {{ post.acf.page.post_title }}\n      <span *ngIf=\"post.acf.schlagworte.length\" class=\"post-detail__category__tags\">\n        – <span *ngFor=\"let tag of post.acf.schlagworte\">{{ tag.name }}</span>\n      </span>\n    </p>\n\n    <app-showcase\n      [type]=\"post.acf.showcaseFormat\"\n      [image]=\"post.acf.showcase\"\n      [video]=\"post.acf.youtube\"\n    ></app-showcase>\n    <p [innerHTML]=\"post.acf.beschreibung\"></p>\n\n    <h3>Steckbrief</h3>\n    <app-briefing [data]=\"post.acf\"></app-briefing>\n\n    <h3 *ngIf=\"post.acf.galerie.length\">Galerie</h3>\n    <img\n      *ngFor=\"let image of post.acf.galerie\"\n      [src]=\"image.sizes.medium\"\n      [alt]=\"image.alt || image.title || image.name || ''\"\n      [width]=\"image.sizes['medium-width']\"\n      [height]=\"image.sizes['medium-height']\"\n    />\n\n    <footer class=\"post-detail__footer\">\n      <button type=\"button\" (click)=\"toTop()\">Nach oben</button>\n    </footer>\n  </section>\n</ng-container>\n\n<ng-template #notFound>\n  <p class=\"post-detail__status-msg\">\n    Projekt mit ID »{{ rawId }}« nicht gefunden.\n    <span style=\"font-style: normal;\" role=\"img\" aria-label=\"Sad cat\">😿</span>\n  </p>\n</ng-template>\n\n<ng-template #loadingSpinner>\n  <p class=\"post-detail__status-msg\">Wird geladen... <app-loading-spinner></app-loading-spinner></p>\n</ng-template>\n","import { Component, OnInit } from '@angular/core'\nimport { ActivatedRoute } from '@angular/router'\n\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nimport { Select, Store } from '@ngxs/store'\nimport { GetPost } from '../../store/portfolio.actions'\nimport { PortfolioSelectors } from '../../store/portfolio.selectors'\n\ntype PostEntityByIdFn = ReturnType<typeof PortfolioSelectors.postEntityByIdFn>\n\n@Component({\n  selector: 'app-post-detail',\n  templateUrl: './post-detail.component.html',\n  styleUrls: ['./post-detail.component.css'],\n})\nexport class PostDetailComponent implements OnInit {\n  @Select(PortfolioSelectors.postEntityByIdFn) postEntityByIdFn$: Observable<PostEntityByIdFn>\n  rawId: string\n  id: number\n\n  postEntity$: Observable<ReturnType<PostEntityByIdFn>>\n  post$: Observable<ReturnType<PostEntityByIdFn>['entity']>\n  isFetching$: Observable<boolean>\n\n  constructor(route: ActivatedRoute, private store: Store) {\n    this.rawId = route.snapshot.paramMap.get('id')\n    this.id = Number(this.rawId)\n\n    this.postEntity$ = this.postEntityByIdFn$.pipe(map(postEntityById => postEntityById(this.id)))\n    this.post$ = this.postEntity$.pipe(map(post => post.entity))\n    this.isFetching$ = this.postEntity$.pipe(map(post => post.isFetching))\n  }\n\n  ngOnInit() {\n    this.store.dispatch(new GetPost(this.id)).subscribe()\n  }\n\n  toTop() {\n    document.body.scrollIntoView({ block: 'start', behavior: 'smooth' })\n  }\n}\n","<h2>DMP Portfolio</h2>\n<ng-container *ngIf=\"(posts$ | async).length; else noPosts\">\n  <section *ngFor=\"let post of posts$ | async\">\n    <h3 [innerHTML]=\"post.title.rendered\"></h3>\n    <p [innerHTML]=\"getTeaser(post.acf.beschreibung)\"></p>\n    <a routerLink=\"{{ post.id }}\">Projekt ansehen →</a>\n    <hr />\n  </section>\n\n  <footer class=\"post-master__footer\">\n    <button\n      *ngIf=\"(query$ | async).totalPages > pagination.page && (isFetching$ | async) === false\"\n      (click)=\"requestNextPage()\"\n      type=\"button\"\n    >\n      Mehr laden...\n    </button>\n  </footer>\n</ng-container>\n\n<ng-template #noPosts>\n  <p *ngIf=\"(isFetching$ | async) === false\" class=\"post-master__status-msg\">\n    Keine Projekte vorhanden. <span aria-hidden=\"true\" style=\"font-style: normal\">🚫</span>\n  </p>\n</ng-template>\n\n<p *ngIf=\"isFetching$ | async\" class=\"post-master__status-msg\">\n  Projekte werden geladen... <app-loading-spinner></app-loading-spinner>\n</p>\n","import { Component, OnInit } from '@angular/core'\n\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nimport { Select, Store } from '@ngxs/store'\nimport { Post } from '../../models/post.model'\nimport { PostRequestOptions } from '../../posts.service'\nimport { GetPostPage } from '../../store/portfolio.actions'\nimport { PortfolioSelectors } from '../../store/portfolio.selectors'\n\nconst linebreakRegex = /<br\\s?\\/?>(<\\/br>)?/g\n\ntype PostQueryFn = ReturnType<typeof PortfolioSelectors.postQueryFn>\ntype EntitiesByQueryFn$ = Observable<ReturnType<typeof PortfolioSelectors.postEntitiesByQueryFn>>\n\n@Component({\n  selector: 'app-post-master',\n  templateUrl: './post-master.component.html',\n  styleUrls: ['./post-master.component.css'],\n})\nexport class PostMasterComponent implements OnInit {\n  @Select(PortfolioSelectors.postQueryFn) postQueryFn$: Observable<PostQueryFn>\n  @Select(PortfolioSelectors.postEntitiesByQueryFn) postEntitiesByQueryFn$: EntitiesByQueryFn$\n  pagination: PostRequestOptions = { page: 1, perPage: 8 }\n\n  posts$: Observable<Post[]>\n  query$: Observable<ReturnType<PostQueryFn>>\n  isFetching$: Observable<boolean>\n\n  constructor(private store: Store) {\n    this.posts$ = this.postEntitiesByQueryFn$.pipe(\n      map(postsForQuery => postsForQuery(this.pagination)),\n      map(postEntities => postEntities.map(p => p.entity)),\n    )\n    this.query$ = this.postQueryFn$.pipe(map(getPostQuery => getPostQuery(this.pagination)))\n    this.isFetching$ = this.query$.pipe(map(q => Object.values(q.pages).some(p => p.isFetching)))\n  }\n\n  ngOnInit() {\n    this.loadPage()\n  }\n  loadPage() {\n    this.store.dispatch(new GetPostPage(this.pagination))\n  }\n  requestNextPage() {\n    this.pagination.page++\n    this.loadPage()\n  }\n\n  getTeaser(text: string) {\n    text = text.replace(linebreakRegex, '')\n\n    if (text.length < 150) {\n      return text\n    }\n    return `${text.slice(0, 145)}...`\n  }\n}\n","import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { RouterModule } from '@angular/router'\n\nimport { LoadingSpinnerModule } from 'src/app/shared/components/loading-spinner/loading-spinner.module'\n\nimport { PostMasterComponent } from './post-master.component'\n\n@NgModule({\n  imports: [CommonModule, RouterModule, LoadingSpinnerModule],\n  providers: [],\n  declarations: [PostMasterComponent],\n})\nexport class PostMasterModule {}\n","import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { YouTubePlayerModule } from '@angular/youtube-player'\n\nimport { LoadingSpinnerModule } from 'src/app/shared/components/loading-spinner/loading-spinner.module'\n\nimport { BriefingComponent } from '../../components/briefing/briefing.component'\nimport { ShowcaseComponent } from '../../components/showcase/showcase.component'\n\nimport { PostDetailComponent } from './post-detail.component'\n\n@NgModule({\n  imports: [CommonModule, YouTubePlayerModule, LoadingSpinnerModule],\n  declarations: [PostDetailComponent, ShowcaseComponent, BriefingComponent],\n})\nexport class PostDetailModule {}\n","import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\n\nimport { LoadingSpinnerComponent } from './loading-spinner.component'\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [LoadingSpinnerComponent],\n  exports: [LoadingSpinnerComponent],\n})\nexport class LoadingSpinnerModule {}\n","import { RouterModule, Routes } from '@angular/router'\n\nimport { PostDetailComponent } from './views/post-detail/post-detail.component'\nimport { PostMasterComponent } from './views/post-master/post-master.component'\n\nconst routes: Routes = [\n  { path: '', component: PostMasterComponent },\n  { path: ':id', component: PostDetailComponent },\n]\n\nexport const PortfolioRoutes = RouterModule.forChild(routes)\n","import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\n\nimport { NgxsModule } from '@ngxs/store'\n\nimport { PortfolioRoutes } from './portfolio.module.routing'\nimport { PortfolioState } from './store/portfolio.state'\nimport { PostDetailModule } from './views/post-detail/post-detail.module'\nimport { PostMasterModule } from './views/post-master/post-master.module'\n\n@NgModule({\n  imports: [\n    CommonModule,\n    PortfolioRoutes,\n    PostMasterModule,\n    PostDetailModule,\n    NgxsModule.forFeature([PortfolioState]),\n  ],\n  declarations: [],\n})\nexport class PortfolioModule {}\n"]}