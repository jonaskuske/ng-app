{"version":3,"mappings":"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","names":["GetPost","constructor","id","GetPostSuccess","post","GetPostError","error","this","GetPostPage","page","GetPostPageSuccess","payload","GetPostPageError","getEntities","stateClass","createSelector","state","entities","Object","values","keys","pageIds","map","isArray","item","Array","serializePageQuery","_a","params","URLSearchParams","value","patchObject","existing","clone","k","newValue","existingPropValue","newPropValue","isStateOperator","assign","createEntity","entity","lastUpdatedAt","Date","toISOString","isFetching","isRefreshing","isError","some","i","includes","concat","filter","prevEntity","apiUrl","environment","headersGetTotal","headers","wpTotal","get","Error","Number","headersGetTotalPages","wpTotalPages","getPageFromResponse","response","body","total","totalPages","PostsService","http","getCategory","getPostFromBasePost","categories","pipe","category","categoryName","name","getPost","switchMap","basePost","getPosts","perPage","HttpParams","fromObject","String","per_page","observe","forkJoin","i0","factory","PortfolioState","postsService","store","ngxsOnInit","ctx","dispatch","getState","setState","toString","patch","ids","uniq","catchError","getPostSuccess","updateEntity","getPostError","console","getPostPage","query","existingQuery","pagination","pages","patchState","getPostPageSuccess","reduce","obj","p","getPostPageError","__decorate","Action","u","h","State","defaults","options","getPageQuery","flat","PortfolioSelectors","SharedSelectors","Selector","f","postQueryFn","addHandler","removeHandler","resultSelector","fromEventPattern","args","Observable","subscriber","handler","e","next","length","retValue","err","isFunction","source","project","pop","lift","WithLatestFromOperator","observables","call","subscribe","WithLatestFromSubscriber","OuterSubscriber","destination","super","toRespond","len","push","add","subscribeToResult","undefined","notifyNext","_outerValue","innerValue","outerIndex","found","indexOf","splice","notifyComplete","_next","_tryProject","result","apply","predicate","SkipWhileSubscriber","Subscriber","skipping","index","tryCallPredicate","Boolean","_c0","YouTubePlayer","_ngZone","platformId","_youtubeContainer","Subject","_destroyed","_playerChanges","BehaviorSubject","_videoId","_height","_width","_startSeconds","_endSeconds","_suggestedQuality","_playerVars","ready","_getLazyEmitter","stateChange","apiChange","playbackQualityChange","playbackRateChange","_isBrowser","isPlatformBrowser","videoId","height","DEFAULT_PLAYER_HEIGHT","width","DEFAULT_PLAYER_WIDTH","startSeconds","endSeconds","suggestedQuality","playerVars","ngOnInit","iframeApiAvailableObs","of","window","YT","Player","iframeApiAvailableSubject","_existingApiReadyCallback","onYouTubeIframeAPIReady","run","take","startWith","playerObs","youtubeContainer","videoIdObs","widthObs","heightObs","playerVarsObs","ngZone","playerOptions","combineLatest","withLatestFrom","constructorOptions","sizeOptions","notifier","slice","from","CombineLatestOperator","SkipWhileOperator","_","doneSkipping","scan","syncPlayerState","distinctUntilChanged","tap","player","mergeMap","playerIsReady","emitter","aborted","resolved","onReady","event","target","removeEventListener","addEventListener","destroy","takeUntil","multicast","_player","_pendingPlayerState","_initializePlayer","setSize","suggestedQualityObs","setPlaybackQuality","startSecondsObs","endSecondsObs","destroyed","cueOptionsObs","filteredCueOptions","filterOnOther","getPlayerState","PlayerState","UNSTARTED","CUED","changedVideoId","changedPlayer","cueOptions","merge","cueVideoById","connect","createEventsBoundInZone","ngAfterViewInit","nativeElement","ngOnDestroy","complete","playVideo","_getPendingState","playbackState","PLAYING","pauseVideo","PAUSED","stopVideo","seekTo","seconds","allowSeekAhead","seek","mute","muted","unMute","isMuted","setVolume","volume","getVolume","setPlaybackRate","playbackRate","getPlaybackRate","getAvailablePlaybackRates","getVideoLoadedFraction","getCurrentTime","getPlaybackQuality","getAvailableQualityLevels","getDuration","getVideoUrl","getVideoEmbedCode","listener","observer","ɵfac","t","ɵngcc0","PLATFORM_ID","ɵcmp","type","selectors","viewQuery","rf","_t","first","inputs","showBeforeIframeApiLoads","outputs","decls","vars","consts","template","encapsulation","changeDetection","container","videoOptions","newPlayer","runOutsideAngular","otherObs","filterFn","other","YouTubePlayerModule","ɵmod","ɵinj","ShowcaseComponent","document","url","opts","fuzzy","test","patterns","exec","tokens","split","video","loadYouTubeAPI","tag","createElement","src","appendChild","DOCUMENT","BriefingComponent","LoadingSpinnerComponent","route","rawId","snapshot","paramMap","postEntity$","postEntityByIdFn$","postEntityById","post$","isFetching$","toTop","scrollIntoView","block","behavior","PostDetailComponent","Select","T","linebreakRegex","posts$","postEntitiesByQueryFn$","postsForQuery","postEntities","query$","postQueryFn$","getPostQuery","q","loadPage","requestNextPage","getTeaser","text","replace","PostMasterComponent","b","PortfolioRoutes","RouterModule","path","component","LoadingSpinnerModule","CommonModule","PostDetailModule","PostMasterModule","imports","PortfolioModule","NgxsModule"],"sources":["webpack:///src/app/portfolio/store/portfolio.actions.ts","webpack:///src/app/shared/store/selectors.ts","webpack:///src/app/shared/util/index.ts","webpack:///node_modules/@ngxs/store/__ivy_ngcc__/fesm2015/ngxs-store-operators.js","webpack:///src/app/shared/util/store.ts","webpack:///src/app/portfolio/posts.service.ts","webpack:///src/app/portfolio/store/portfolio.state.ts","webpack:///src/app/portfolio/store/portfolio.selectors.ts","webpack:///node_modules/rxjs/_esm2015/internal/observable/fromEventPattern.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/withLatestFrom.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/skipWhile.js","webpack:///node_modules/@angular/youtube-player/fesm2015/youtube-player.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/combineLatest.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/publish.js","webpack:///src/app/portfolio/components/showcase/showcase.component.html","webpack:///src/app/portfolio/components/showcase/showcase.component.ts","webpack:///src/app/portfolio/components/briefing/briefing.component.html","webpack:///src/app/portfolio/components/briefing/briefing.component.ts","webpack:///src/app/shared/components/loading-spinner/loading-spinner.component.ts","webpack:///src/app/shared/components/loading-spinner/loading-spinner.component.html","webpack:///src/app/portfolio/views/post-detail/post-detail.component.html","webpack:///src/app/portfolio/views/post-detail/post-detail.component.ts","webpack:///src/app/portfolio/views/post-master/post-master.component.html","webpack:///src/app/portfolio/views/post-master/post-master.component.ts","webpack:///src/app/portfolio/portfolio.module.routing.ts","webpack:///src/app/shared/components/loading-spinner/loading-spinner.module.ts","webpack:///src/app/portfolio/views/post-detail/post-detail.module.ts","webpack:///src/app/portfolio/views/post-master/post-master.module.ts","webpack:///src/app/portfolio/portfolio.module.ts"],"sourcesContent":["import { Page } from '../../shared/models'\nimport { Post } from '../models/post.model'\nimport { PostRequestOptions } from '../posts.service'\n\nexport class GetPost {\n  static readonly type = '[Portfolio] Get Post'\n  constructor(public id: number) {}\n}\nexport class GetPostSuccess {\n  static readonly type = '[Portfolio API] Get Post Success'\n  constructor(public post: Post) {}\n}\nexport class GetPostError {\n  static readonly type = '[Portfolio API] Get Post Error'\n  constructor(public id: number, public error: Error) {}\n}\n\nexport class GetPostPage {\n  static readonly type = '[Portfolio] Get Post Page'\n  constructor(public page: PostRequestOptions) {}\n}\nexport class GetPostPageSuccess {\n  static readonly type = '[Portfolio API] Get Post Page Success'\n  constructor(public page: PostRequestOptions, public payload: Page<Post>) {}\n}\nexport class GetPostPageError {\n  static readonly type = '[Portfolio API] Get Post Page Error'\n  constructor(public page: PostRequestOptions, public error: Error) {}\n}\n","import { createSelector } from '@ngxs/store'\nimport { Entity } from '../models'\n\nexport class SharedSelectors {\n  static getEntities<T>(stateClass) {\n    return createSelector([stateClass], (state) => state.entities as { [id: string]: Entity<T> })\n  }\n\n  static getEntityList<T>(stateClass) {\n    return createSelector([stateClass], (state) => Object.values(state.entities) as Entity<T>[])\n  }\n\n  static getEntityIds(stateClass) {\n    return createSelector([stateClass], (state) => Object.keys(state.entities))\n  }\n\n  static getEntityListByPageFn(stateClass) {\n    return (pageIds: number[]) => {\n      return createSelector([stateClass], (state) => pageIds.map((id) => state.entities[id]))\n    }\n  }\n}\n","export const isArray = (item: any): item is any[] => Array.isArray(item)\n\nexport const serializePageQuery = ({ page, ...params }: any) => `?${new URLSearchParams(params)}`\n\nexport const getYoutubeId = (url: string, opts = { fuzzy: true }) => {\n  if (!/youtu\\.?be/.test(url)) return null\n\n  // Look first for known patterns\n  let i: number\n  const patterns = [\n    /youtu\\.be\\/([^#&?]{11})/, // youtu.be/<id>\n    /\\?v=([^#&?]{11})/, // ?v=<id>\n    /&v=([^#&?]{11})/, // &v=<id>\n    /embed\\/([^#&?]{11})/, // embed/<id>\n    /\\/v\\/([^#&?]{11})/, // /v/<id>\n  ]\n\n  // If any pattern matches, return the ID\n  for (i = 0; i < patterns.length; ++i) {\n    if (patterns[i].test(url)) {\n      return patterns[i].exec(url)[1]\n    }\n  }\n\n  if (opts.fuzzy) {\n    // If that fails, break it apart by certain characters and look\n    // for the 11 character key\n    const tokens = url.split(/[/&?=#.\\s]/g)\n    for (i = 0; i < tokens.length; ++i) {\n      if (/^[^#&?]{11}$/.test(tokens[i])) {\n        return tokens[i]\n      }\n    }\n  }\n}\n","/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T\r\n * @param {?} items - Specific items to append to the end of an array\r\n * @return {?}\r\n */\r\nfunction append(items) {\r\n    return (/**\r\n     * @param {?} existing\r\n     * @return {?}\r\n     */\r\n    function appendOperator(existing) {\r\n        // If `items` is `undefined` or `null` or `[]` but `existing` is provided\r\n        // just return `existing`\r\n        /** @type {?} */\r\n        const itemsNotProvidedButExistingIs = (!items || !items.length) && existing;\r\n        if (itemsNotProvidedButExistingIs) {\r\n            return (/** @type {?} */ (existing));\r\n        }\r\n        if (Array.isArray(existing)) {\r\n            return existing.concat((/** @type {?} */ (items)));\r\n        }\r\n        // For example if some property is added dynamically\r\n        // and didn't exist before thus it's not `ArrayLike`\r\n        return (/** @type {?} */ (items));\r\n    });\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T\r\n * @param {...?} operators\r\n * @return {?}\r\n */\r\nfunction compose(...operators) {\r\n    return (/**\r\n     * @param {?} existing\r\n     * @return {?}\r\n     */\r\n    function composeOperator(existing) {\r\n        return operators.reduce((/**\r\n         * @param {?} accumulator\r\n         * @param {?} operator\r\n         * @return {?}\r\n         */\r\n        (accumulator, operator) => operator(accumulator)), existing);\r\n    });\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isStateOperator(value) {\r\n    return typeof value === 'function';\r\n}\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isUndefined(value) {\r\n    return typeof value === 'undefined';\r\n}\r\n/**\r\n * @template T\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isPredicate(value) {\r\n    return typeof value === 'function';\r\n}\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isNumber(value) {\r\n    return typeof value === 'number';\r\n}\r\n/**\r\n * @param {?} index\r\n * @return {?}\r\n */\r\nfunction invalidIndex(index) {\r\n    return Number.isNaN(index) || index === -1;\r\n}\r\n/**\r\n * @template T\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isNil(value) {\r\n    return value === null || isUndefined(value);\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T\r\n * @param {?} operatorOrValue\r\n * @param {?=} existing\r\n * @return {?}\r\n */\r\nfunction retrieveValue(operatorOrValue, existing) {\r\n    // If state operator is a function\r\n    // then call it with an original value\r\n    if (isStateOperator(operatorOrValue)) {\r\n        /** @type {?} */\r\n        const value = operatorOrValue((/** @type {?} */ ((/** @type {?} */ (existing)))));\r\n        return (/** @type {?} */ (value));\r\n    }\r\n    // If operator or value was not provided\r\n    // e.g. `elseOperatorOrValue` is `undefined`\r\n    // then we just return an original value\r\n    if (isUndefined(operatorOrValue)) {\r\n        return (/** @type {?} */ ((/** @type {?} */ (((/** @type {?} */ (existing)))))));\r\n    }\r\n    return (/** @type {?} */ (operatorOrValue));\r\n}\r\n/**\r\n * @template T\r\n * @param {?} condition - Condition can be a plain boolean value or a function,\r\n * that returns boolean, also this function can take a value as an argument\r\n * to which this state operator applies\r\n * @param {?} trueOperatorOrValue - Any value or a state operator\r\n * @param {?=} elseOperatorOrValue - Any value or a state operator\r\n * @return {?}\r\n */\r\nfunction iif(condition, trueOperatorOrValue, elseOperatorOrValue) {\r\n    return (/**\r\n     * @param {?} existing\r\n     * @return {?}\r\n     */\r\n    function iifOperator(existing) {\r\n        // Convert the value to a boolean\r\n        /** @type {?} */\r\n        let result = !!condition;\r\n        // but if it is a function then run it to get the result\r\n        if (isPredicate(condition)) {\r\n            result = condition(existing);\r\n        }\r\n        if (result) {\r\n            return retrieveValue(trueOperatorOrValue, (/** @type {?} */ (existing)));\r\n        }\r\n        return retrieveValue((/** @type {?} */ (elseOperatorOrValue)), (/** @type {?} */ (existing)));\r\n    });\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T\r\n * @param {?} value - Value to insert\r\n * @param {?=} beforePosition\r\n * @return {?}\r\n */\r\nfunction insertItem(value, beforePosition) {\r\n    return (/**\r\n     * @param {?} existing\r\n     * @return {?}\r\n     */\r\n    function insertItemOperator(existing) {\r\n        // Have to check explicitly for `null` and `undefined`\r\n        // because `value` can be `0`, thus `!value` will return `true`\r\n        if (isNil(value) && existing) {\r\n            return (/** @type {?} */ (existing));\r\n        }\r\n        // Property may be dynamic and might not existed before\r\n        if (!Array.isArray(existing)) {\r\n            return [(/** @type {?} */ (value))];\r\n        }\r\n        /** @type {?} */\r\n        const clone = existing.slice();\r\n        /** @type {?} */\r\n        let index = 0;\r\n        // No need to call `isNumber`\r\n        // as we are checking `> 0` not `>= 0`\r\n        // everything except number will return false here\r\n        if ((/** @type {?} */ (beforePosition)) > 0) {\r\n            index = (/** @type {?} */ (beforePosition));\r\n        }\r\n        clone.splice(index, 0, (/** @type {?} */ (value)));\r\n        return clone;\r\n    });\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T\r\n * @param {?} patchObject\r\n * @return {?}\r\n */\r\nfunction patch(patchObject) {\r\n    return (/**\r\n     * @template U\r\n     * @param {?} existing\r\n     * @return {?}\r\n     */\r\n    function patchStateOperator(existing) {\r\n        /** @type {?} */\r\n        let clone = null;\r\n        for (const k in patchObject) {\r\n            /** @type {?} */\r\n            const newValue = patchObject[k];\r\n            /** @type {?} */\r\n            const existingPropValue = existing[k];\r\n            /** @type {?} */\r\n            const newPropValue = isStateOperator(newValue)\r\n                ? newValue((/** @type {?} */ (existingPropValue)))\r\n                : newValue;\r\n            if (newPropValue !== existingPropValue) {\r\n                if (!clone) {\r\n                    clone = Object.assign({}, ((/** @type {?} */ (existing))));\r\n                }\r\n                clone[k] = newPropValue;\r\n            }\r\n        }\r\n        return clone || existing;\r\n    });\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T\r\n * @param {?} selector - Index of item in the array or a predicate function\r\n * that can be provided in `Array.prototype.findIndex`\r\n * @param {?} operatorOrValue - New value under the `selector` index or a\r\n * function that can be applied to an existing value\r\n * @return {?}\r\n */\r\nfunction updateItem(selector, operatorOrValue) {\r\n    return (/**\r\n     * @param {?} existing\r\n     * @return {?}\r\n     */\r\n    function updateItemOperator(existing) {\r\n        /** @type {?} */\r\n        let index = -1;\r\n        if (isPredicate(selector)) {\r\n            index = existing.findIndex(selector);\r\n        }\r\n        else if (isNumber(selector)) {\r\n            index = selector;\r\n        }\r\n        if (invalidIndex(index)) {\r\n            return (/** @type {?} */ (existing));\r\n        }\r\n        /** @type {?} */\r\n        let value = (/** @type {?} */ (null));\r\n        // Need to check if the new item value will change the existing item value\r\n        // then, only if it will change it then clone the array and set the item\r\n        if (isStateOperator(operatorOrValue)) {\r\n            value = operatorOrValue((/** @type {?} */ (existing[index])));\r\n        }\r\n        else {\r\n            value = operatorOrValue;\r\n        }\r\n        // If the value hasn't been mutated\r\n        // then we just return `existing` array\r\n        if (value === existing[index]) {\r\n            return (/** @type {?} */ (existing));\r\n        }\r\n        /** @type {?} */\r\n        const clone = existing.slice();\r\n        clone[index] = (/** @type {?} */ (value));\r\n        return clone;\r\n    });\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T\r\n * @param {?} selector - index or predicate to remove an item from an array by\r\n * @return {?}\r\n */\r\nfunction removeItem(selector) {\r\n    return (/**\r\n     * @param {?} existing\r\n     * @return {?}\r\n     */\r\n    function removeItemOperator(existing) {\r\n        /** @type {?} */\r\n        let index = -1;\r\n        if (isPredicate(selector)) {\r\n            index = existing.findIndex(selector);\r\n        }\r\n        else if (isNumber(selector)) {\r\n            index = selector;\r\n        }\r\n        if (invalidIndex(index)) {\r\n            return (/** @type {?} */ (existing));\r\n        }\r\n        /** @type {?} */\r\n        const clone = existing.slice();\r\n        clone.splice(index, 1);\r\n        return clone;\r\n    });\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { append, compose, iif, insertItem, isStateOperator, patch, removeItem, updateItem };\n\n","import { StateOperator } from '@ngxs/store'\nimport { patch } from '@ngxs/store/operators'\nimport { Entity, EntityPartial, PaginatedEntities } from '../models'\n\nimport { isArray } from '.'\n\nexport const createEntity = <T>(id: Entity<T>['id'], entity: T = null): Entity<T> => ({\n  id,\n  entity,\n  lastUpdatedAt: new Date().toISOString(),\n  isFetching: false,\n  isRefreshing: false,\n  isError: false,\n})\n\nexport function uniq(item: any | any[]): StateOperator<any[]> {\n  return (state: any[]) => {\n    const noUniq = isArray(item) ? item.some((i) => !state.includes(i)) : state.includes(item)\n    if (noUniq) {\n      return state\n    }\n\n    return state.concat(isArray(item) ? item.filter((i) => !state.includes(i)) : item)\n  }\n}\n\nexport function addEntity<T>(entity: Entity<T>): StateOperator<PaginatedEntities<T>> {\n  const id = entity.id.toString()\n  return patch<PaginatedEntities<T>>({ ids: uniq(id), entities: patch({ [id]: entity }) })\n}\n\nexport function addEntities<T>(payload: Entity<T>[]): StateOperator<PaginatedEntities<T>> {\n  const entities = payload.reduce((obj, entity) => ((obj[entity.id] = entity), obj), {})\n  return patch<PaginatedEntities<T>>({\n    ids: uniq(payload.map((p) => p.id.toString())),\n    entities: patch(entities),\n  })\n}\n\nexport function updateEntity<T>(payload: EntityPartial<T>): StateOperator<PaginatedEntities<T>> {\n  return (state: PaginatedEntities<T>) => {\n    const prevEntity = state.entities[payload.id]\n    return {\n      ...state,\n      entities: { ...state.entities, [payload.id]: { ...prevEntity, ...payload } },\n    }\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams, HttpResponse } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { forkJoin } from 'rxjs'\n\nimport { map, switchMap } from 'rxjs/operators'\nimport { environment } from 'src/environments/environment'\n\nimport { Page } from '../shared/models'\n\nimport { BasePost, Category, Post } from './models/post.model'\n\nexport interface PostRequestOptions {\n  page: number\n  perPage?: number\n}\n\nconst { apiUrl } = environment\n\nconst headersGetTotal = (headers: HttpHeaders) => {\n  const wpTotal = headers.get('x-wp-total')\n  if (wpTotal == null) throw Error('Header \"x-wp-total\" missing in response')\n\n  return Number(wpTotal)\n}\nconst headersGetTotalPages = (headers: HttpHeaders) => {\n  const wpTotalPages = headers.get('x-wp-totalpages')\n  if (wpTotalPages == null) throw Error('Header \"x-wp-totalpages\" missing in response')\n\n  return Number(wpTotalPages)\n}\n\nconst getPageFromResponse = <T>(response: HttpResponse<T[]>): Page<T> => {\n  const { body, headers } = response\n  return { body, total: headersGetTotal(headers), totalPages: headersGetTotalPages(headers) }\n}\n\n@Injectable({ providedIn: 'root' })\nexport class PostsService {\n  constructor(private http: HttpClient) {}\n\n  getCategory(id: number) {\n    return this.http.get<Category>(`${apiUrl}categories/${id}`)\n  }\n\n  getPostFromBasePost(post: BasePost) {\n    return this.http\n      .get<Category>(`${apiUrl}categories/${post.categories[0]}`)\n      .pipe(map((category) => ({ ...post, categoryName: category.name } as Post)))\n  }\n\n  getPost(id: number) {\n    return this.http\n      .get<BasePost>(`${apiUrl}posts/${id}`)\n      .pipe(switchMap((basePost) => this.getPostFromBasePost(basePost)))\n  }\n\n  getPosts({ page, perPage = 10 }: PostRequestOptions) {\n    const params = new HttpParams({\n      fromObject: { page: String(page), per_page: String(perPage) },\n    })\n\n    return this.http\n      .get<BasePost[]>(`${apiUrl}posts`, { params, observe: 'response' })\n      .pipe(\n        switchMap((response) => {\n          return forkJoin(response.body.map((basePost) => this.getPostFromBasePost(basePost))).pipe(\n            map((body) => ({ ...response, body })),\n          )\n        }),\n        map(getPageFromResponse),\n      )\n  }\n}\n","import { Injectable } from '@angular/core'\n\nimport { catchError, map } from 'rxjs/operators'\n\nimport { Action, NgxsOnInit, State, StateContext, Store } from '@ngxs/store'\nimport { patch } from '@ngxs/store/operators'\nimport { PaginatedEntities } from '../../shared/models'\nimport { serializePageQuery } from '../../shared/util'\nimport { addEntities, addEntity, createEntity, updateEntity } from '../../shared/util/store'\nimport { Post } from '../models/post.model'\nimport { PostsService } from '../posts.service'\n\nimport {\n  GetPost,\n  GetPostError,\n  GetPostPage,\n  GetPostPageError,\n  GetPostPageSuccess,\n  GetPostSuccess,\n} from './portfolio.actions'\n\nexport type PortfolioStateModel = PaginatedEntities<Post>\nexport type PortfolioStateContext = StateContext<PortfolioStateModel>\n\nconst initialState: PortfolioStateModel = { entities: {}, ids: [], pagination: {} }\n\n@State<PortfolioStateModel>({ name: 'portfolio', defaults: initialState })\n@Injectable()\nexport class PortfolioState implements NgxsOnInit {\n  constructor(private postsService: PostsService, private store: Store) {}\n\n  ngxsOnInit(ctx: PortfolioStateContext) {\n    ctx.dispatch(new GetPostPage({ page: 1, perPage: 8 }))\n  }\n\n  @Action(GetPost)\n  getPost(ctx: PortfolioStateContext, { id }: GetPost) {\n    const existing = ctx.getState().entities[id]\n    if (existing && !existing.isError) {\n      return ctx.dispatch(new GetPostSuccess(existing.entity))\n    }\n\n    ctx.setState(\n      addEntity<Post>({ ...createEntity<Post>(id), isFetching: true }),\n    )\n\n    return this.postsService.getPost(id).pipe(\n      map((response) => ctx.dispatch(new GetPostSuccess(response))),\n      catchError((error) => ctx.dispatch(new GetPostError(id, error))),\n    )\n  }\n\n  @Action(GetPostSuccess)\n  getPostSuccess(ctx: PortfolioStateContext, { post }: GetPostSuccess) {\n    ctx.setState(updateEntity<Post>(createEntity<Post>(post.id, post)))\n  }\n\n  @Action(GetPostError)\n  getPostError(ctx: PortfolioStateContext, { id, error }: GetPostError) {\n    ctx.setState(updateEntity({ id, isError: true, isFetching: false, isRefreshing: false }))\n    console.error(error)\n  }\n\n  @Action(GetPostPage)\n  getPostPage(ctx: PortfolioStateContext, { page }: GetPostPage) {\n    const state = ctx.getState()\n    const query = serializePageQuery(page)\n\n    const existingQuery = ctx.getState().pagination[query]\n    if (existingQuery && existingQuery.pages[page.page]) return\n\n    if (!existingQuery) {\n      ctx.patchState({\n        pagination: { ...state.pagination, [query]: { total: 0, totalPages: 0, pages: {} } },\n      })\n    }\n\n    ctx.setState(\n      patch({\n        pagination: patch({\n          [query]: patch({\n            pages: patch({ [page.page]: { ...createEntity(page.page), isFetching: true } }),\n          }),\n        }),\n      }),\n    )\n\n    return this.postsService.getPosts(page).pipe(\n      map((response) => ctx.dispatch(new GetPostPageSuccess(page, response))),\n      catchError((error) => ctx.dispatch(new GetPostPageError(page, error))),\n    )\n  }\n\n  @Action(GetPostPageSuccess)\n  getPostPageSuccess(ctx: PortfolioStateContext, { page, payload }: GetPostPageSuccess) {\n    const query = serializePageQuery(page)\n\n    const entities = payload.body.map((item) => createEntity(item.id, item))\n    const pageIds = payload.body.map((item) => item.id.toString())\n    ctx.setState(addEntities(entities))\n\n    ctx.setState(\n      patch({\n        pagination: patch({\n          [query]: patch({\n            total: payload.total,\n            totalPages: payload.totalPages,\n            pages: patch({ [page.page]: { ...createEntity(page.page, pageIds) } }),\n          }),\n        }),\n      }),\n    )\n  }\n\n  @Action(GetPostPageError)\n  getPostPageError(ctx: PortfolioStateContext, { page, error }: GetPostPageError) {\n    const query = serializePageQuery(page)\n    ctx.setState(\n      patch({\n        pagination: patch({\n          [query]: patch({\n            pages: patch({\n              [page.page]: patch({ isError: true, isRefreshing: false, isFetching: false }),\n            }),\n          }),\n        }),\n      }),\n    )\n    console.error(error)\n  }\n}\n","import { SharedSelectors } from 'src/app/shared/store/selectors'\nimport { serializePageQuery } from 'src/app/shared/util'\n\nimport { Selector } from '@ngxs/store'\nimport { Post } from '../models/post.model'\nimport { PostRequestOptions } from '../posts.service'\n\nimport { PortfolioState, PortfolioStateModel } from './portfolio.state'\n\nexport class PortfolioSelectors {\n  static entities = SharedSelectors.getEntities<Post>(PortfolioState)\n  static ids = SharedSelectors.getEntityIds(PortfolioState)\n  static posts = SharedSelectors.getEntityList<Post>(PortfolioState)\n\n  @Selector([PortfolioState])\n  static pagination(state: PortfolioStateModel) {\n    return state.pagination\n  }\n  @Selector([PortfolioSelectors.entities])\n  static postEntityByIdFn(entities: ReturnType<typeof PortfolioSelectors.entities>) {\n    return (id: number) => entities[id]\n  }\n  @Selector([PortfolioSelectors.pagination])\n  static postQueryFn(pagination: ReturnType<typeof PortfolioSelectors.pagination>) {\n    return (options: PostRequestOptions) => pagination[serializePageQuery(options)]\n  }\n  @Selector([PortfolioSelectors.postQueryFn])\n  static postQueryPageFn(getPageQuery: ReturnType<typeof PortfolioSelectors.postQueryFn>) {\n    return (options: PostRequestOptions) => getPageQuery(options).pages[options.page]\n  }\n  @Selector([PortfolioSelectors.entities, PortfolioSelectors.postQueryFn])\n  static postEntitiesByQueryFn(\n    entities: ReturnType<typeof PortfolioSelectors.entities>,\n    getPageQuery: ReturnType<typeof PortfolioSelectors.postQueryFn>,\n  ) {\n    return (options: PostRequestOptions) => {\n      const pages = Object.values(getPageQuery(options).pages).filter((p) => !p.isFetching)\n      const ids = pages.map((p) => p.entity).flat()\n      return ids.map((id) => entities[id])\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { isFunction } from '../util/isFunction';\nimport { map } from '../operators/map';\nexport function fromEventPattern(addHandler, removeHandler, resultSelector) {\n    if (resultSelector) {\n        return fromEventPattern(addHandler, removeHandler).pipe(map(args => isArray(args) ? resultSelector(...args) : resultSelector(args)));\n    }\n    return new Observable(subscriber => {\n        const handler = (...e) => subscriber.next(e.length === 1 ? e[0] : e);\n        let retValue;\n        try {\n            retValue = addHandler(handler);\n        }\n        catch (err) {\n            subscriber.error(err);\n            return undefined;\n        }\n        if (!isFunction(removeHandler)) {\n            return undefined;\n        }\n        return () => removeHandler(handler, retValue);\n    });\n}\n","import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function withLatestFrom(...args) {\n    return (source) => {\n        let project;\n        if (typeof args[args.length - 1] === 'function') {\n            project = args.pop();\n        }\n        const observables = args;\n        return source.lift(new WithLatestFromOperator(observables, project));\n    };\n}\nclass WithLatestFromOperator {\n    constructor(observables, project) {\n        this.observables = observables;\n        this.project = project;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n    }\n}\nclass WithLatestFromSubscriber extends OuterSubscriber {\n    constructor(destination, observables, project) {\n        super(destination);\n        this.observables = observables;\n        this.project = project;\n        this.toRespond = [];\n        const len = observables.length;\n        this.values = new Array(len);\n        for (let i = 0; i < len; i++) {\n            this.toRespond.push(i);\n        }\n        for (let i = 0; i < len; i++) {\n            let observable = observables[i];\n            this.add(subscribeToResult(this, observable, undefined, i));\n        }\n    }\n    notifyNext(_outerValue, innerValue, outerIndex) {\n        this.values[outerIndex] = innerValue;\n        const toRespond = this.toRespond;\n        if (toRespond.length > 0) {\n            const found = toRespond.indexOf(outerIndex);\n            if (found !== -1) {\n                toRespond.splice(found, 1);\n            }\n        }\n    }\n    notifyComplete() {\n    }\n    _next(value) {\n        if (this.toRespond.length === 0) {\n            const args = [value, ...this.values];\n            if (this.project) {\n                this._tryProject(args);\n            }\n            else {\n                this.destination.next(args);\n            }\n        }\n    }\n    _tryProject(args) {\n        let result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    }\n}\n","import { Subscriber } from '../Subscriber';\nexport function skipWhile(predicate) {\n    return (source) => source.lift(new SkipWhileOperator(predicate));\n}\nclass SkipWhileOperator {\n    constructor(predicate) {\n        this.predicate = predicate;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n    }\n}\nclass SkipWhileSubscriber extends Subscriber {\n    constructor(destination, predicate) {\n        super(destination);\n        this.predicate = predicate;\n        this.skipping = true;\n        this.index = 0;\n    }\n    _next(value) {\n        const destination = this.destination;\n        if (this.skipping) {\n            this.tryCallPredicate(value);\n        }\n        if (!this.skipping) {\n            destination.next(value);\n        }\n    }\n    tryCallPredicate(value) {\n        try {\n            const result = this.predicate(value, this.index++);\n            this.skipping = Boolean(result);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    }\n}\n","import { Component, ChangeDetectionStrategy, ViewEncapsulation, NgZone, Inject, PLATFORM_ID, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Subject, BehaviorSubject, of, combineLatest, pipe, Observable, fromEventPattern, merge } from 'rxjs';\nimport { take, startWith, combineLatest as combineLatest$1, skipWhile, map, scan, distinctUntilChanged, tap, mergeMap, takeUntil, publish, switchMap, withLatestFrom, filter } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\n\nconst _c0 = [\"youtubeContainer\"];\nconst DEFAULT_PLAYER_WIDTH = 640;\nconst DEFAULT_PLAYER_HEIGHT = 390;\n/**\n * Angular component that renders a YouTube player via the YouTube player\n * iframe API.\n * @see https://developers.google.com/youtube/iframe_api_reference\n */\nclass YouTubePlayer {\n    constructor(_ngZone, platformId) {\n        this._ngZone = _ngZone;\n        this._youtubeContainer = new Subject();\n        this._destroyed = new Subject();\n        this._playerChanges = new BehaviorSubject(undefined);\n        this._videoId = new BehaviorSubject(undefined);\n        this._height = new BehaviorSubject(DEFAULT_PLAYER_HEIGHT);\n        this._width = new BehaviorSubject(DEFAULT_PLAYER_WIDTH);\n        this._startSeconds = new BehaviorSubject(undefined);\n        this._endSeconds = new BehaviorSubject(undefined);\n        this._suggestedQuality = new BehaviorSubject(undefined);\n        this._playerVars = new BehaviorSubject(undefined);\n        /** Outputs are direct proxies from the player itself. */\n        this.ready = this._getLazyEmitter('onReady');\n        this.stateChange = this._getLazyEmitter('onStateChange');\n        this.error = this._getLazyEmitter('onError');\n        this.apiChange = this._getLazyEmitter('onApiChange');\n        this.playbackQualityChange = this._getLazyEmitter('onPlaybackQualityChange');\n        this.playbackRateChange = this._getLazyEmitter('onPlaybackRateChange');\n        this._isBrowser = isPlatformBrowser(platformId);\n    }\n    /** YouTube Video ID to view */\n    get videoId() { return this._videoId.value; }\n    set videoId(videoId) {\n        this._videoId.next(videoId);\n    }\n    /** Height of video player */\n    get height() { return this._height.value; }\n    set height(height) {\n        this._height.next(height || DEFAULT_PLAYER_HEIGHT);\n    }\n    /** Width of video player */\n    get width() { return this._width.value; }\n    set width(width) {\n        this._width.next(width || DEFAULT_PLAYER_WIDTH);\n    }\n    /** The moment when the player is supposed to start playing */\n    set startSeconds(startSeconds) {\n        this._startSeconds.next(startSeconds);\n    }\n    /** The moment when the player is supposed to stop playing */\n    set endSeconds(endSeconds) {\n        this._endSeconds.next(endSeconds);\n    }\n    /** The suggested quality of the player */\n    set suggestedQuality(suggestedQuality) {\n        this._suggestedQuality.next(suggestedQuality);\n    }\n    /**\n     * Extra parameters used to configure the player. See:\n     * https://developers.google.com/youtube/player_parameters.html?playerVersion=HTML5#Parameters\n     */\n    get playerVars() { return this._playerVars.value; }\n    set playerVars(playerVars) {\n        this._playerVars.next(playerVars);\n    }\n    ngOnInit() {\n        // Don't do anything if we're not in a browser environment.\n        if (!this._isBrowser) {\n            return;\n        }\n        let iframeApiAvailableObs = of(true);\n        if (!window.YT || !window.YT.Player) {\n            if (this.showBeforeIframeApiLoads && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw new Error('Namespace YT not found, cannot construct embedded youtube player. ' +\n                    'Please install the YouTube Player API Reference for iframe Embeds: ' +\n                    'https://developers.google.com/youtube/iframe_api_reference');\n            }\n            const iframeApiAvailableSubject = new Subject();\n            this._existingApiReadyCallback = window.onYouTubeIframeAPIReady;\n            window.onYouTubeIframeAPIReady = () => {\n                if (this._existingApiReadyCallback) {\n                    this._existingApiReadyCallback();\n                }\n                this._ngZone.run(() => iframeApiAvailableSubject.next(true));\n            };\n            iframeApiAvailableObs = iframeApiAvailableSubject.pipe(take(1), startWith(false));\n        }\n        // An observable of the currently loaded player.\n        const playerObs = createPlayerObservable(this._youtubeContainer, this._videoId, iframeApiAvailableObs, this._width, this._height, this._playerVars, this._ngZone).pipe(tap(player => {\n            // Emit this before the `waitUntilReady` call so that we can bind to\n            // events that happen as the player is being initialized (e.g. `onReady`).\n            this._playerChanges.next(player);\n        }), waitUntilReady(player => {\n            // Destroy the player if loading was aborted so that we don't end up leaking memory.\n            if (!playerIsReady(player)) {\n                player.destroy();\n            }\n        }), takeUntil(this._destroyed), publish());\n        // Set up side effects to bind inputs to the player.\n        playerObs.subscribe(player => {\n            this._player = player;\n            if (player && this._pendingPlayerState) {\n                this._initializePlayer(player, this._pendingPlayerState);\n            }\n            this._pendingPlayerState = undefined;\n        });\n        bindSizeToPlayer(playerObs, this._width, this._height);\n        bindSuggestedQualityToPlayer(playerObs, this._suggestedQuality);\n        bindCueVideoCall(playerObs, this._videoId, this._startSeconds, this._endSeconds, this._suggestedQuality, this._destroyed);\n        // After all of the subscriptions are set up, connect the observable.\n        playerObs.connect();\n    }\n    /**\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 11.0.0\n     */\n    createEventsBoundInZone() {\n        return {};\n    }\n    ngAfterViewInit() {\n        this._youtubeContainer.next(this.youtubeContainer.nativeElement);\n    }\n    ngOnDestroy() {\n        if (this._player) {\n            this._player.destroy();\n            window.onYouTubeIframeAPIReady = this._existingApiReadyCallback;\n        }\n        this._playerChanges.complete();\n        this._videoId.complete();\n        this._height.complete();\n        this._width.complete();\n        this._startSeconds.complete();\n        this._endSeconds.complete();\n        this._suggestedQuality.complete();\n        this._youtubeContainer.complete();\n        this._playerVars.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#playVideo */\n    playVideo() {\n        if (this._player) {\n            this._player.playVideo();\n        }\n        else {\n            this._getPendingState().playbackState = YT.PlayerState.PLAYING;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#pauseVideo */\n    pauseVideo() {\n        if (this._player) {\n            this._player.pauseVideo();\n        }\n        else {\n            this._getPendingState().playbackState = YT.PlayerState.PAUSED;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#stopVideo */\n    stopVideo() {\n        if (this._player) {\n            this._player.stopVideo();\n        }\n        else {\n            // It seems like YouTube sets the player to CUED when it's stopped.\n            this._getPendingState().playbackState = YT.PlayerState.CUED;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#seekTo */\n    seekTo(seconds, allowSeekAhead) {\n        if (this._player) {\n            this._player.seekTo(seconds, allowSeekAhead);\n        }\n        else {\n            this._getPendingState().seek = { seconds, allowSeekAhead };\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#mute */\n    mute() {\n        if (this._player) {\n            this._player.mute();\n        }\n        else {\n            this._getPendingState().muted = true;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#unMute */\n    unMute() {\n        if (this._player) {\n            this._player.unMute();\n        }\n        else {\n            this._getPendingState().muted = false;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#isMuted */\n    isMuted() {\n        if (this._player) {\n            return this._player.isMuted();\n        }\n        if (this._pendingPlayerState) {\n            return !!this._pendingPlayerState.muted;\n        }\n        return false;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#setVolume */\n    setVolume(volume) {\n        if (this._player) {\n            this._player.setVolume(volume);\n        }\n        else {\n            this._getPendingState().volume = volume;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getVolume */\n    getVolume() {\n        if (this._player) {\n            return this._player.getVolume();\n        }\n        if (this._pendingPlayerState && this._pendingPlayerState.volume != null) {\n            return this._pendingPlayerState.volume;\n        }\n        return 0;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#setPlaybackRate */\n    setPlaybackRate(playbackRate) {\n        if (this._player) {\n            return this._player.setPlaybackRate(playbackRate);\n        }\n        else {\n            this._getPendingState().playbackRate = playbackRate;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getPlaybackRate */\n    getPlaybackRate() {\n        if (this._player) {\n            return this._player.getPlaybackRate();\n        }\n        if (this._pendingPlayerState && this._pendingPlayerState.playbackRate != null) {\n            return this._pendingPlayerState.playbackRate;\n        }\n        return 0;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getAvailablePlaybackRates */\n    getAvailablePlaybackRates() {\n        return this._player ? this._player.getAvailablePlaybackRates() : [];\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getVideoLoadedFraction */\n    getVideoLoadedFraction() {\n        return this._player ? this._player.getVideoLoadedFraction() : 0;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getPlayerState */\n    getPlayerState() {\n        if (!this._isBrowser || !window.YT) {\n            return undefined;\n        }\n        if (this._player) {\n            return this._player.getPlayerState();\n        }\n        if (this._pendingPlayerState && this._pendingPlayerState.playbackState != null) {\n            return this._pendingPlayerState.playbackState;\n        }\n        return YT.PlayerState.UNSTARTED;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getCurrentTime */\n    getCurrentTime() {\n        if (this._player) {\n            return this._player.getCurrentTime();\n        }\n        if (this._pendingPlayerState && this._pendingPlayerState.seek) {\n            return this._pendingPlayerState.seek.seconds;\n        }\n        return 0;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getPlaybackQuality */\n    getPlaybackQuality() {\n        return this._player ? this._player.getPlaybackQuality() : 'default';\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getAvailableQualityLevels */\n    getAvailableQualityLevels() {\n        return this._player ? this._player.getAvailableQualityLevels() : [];\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getDuration */\n    getDuration() {\n        return this._player ? this._player.getDuration() : 0;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getVideoUrl */\n    getVideoUrl() {\n        return this._player ? this._player.getVideoUrl() : '';\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getVideoEmbedCode */\n    getVideoEmbedCode() {\n        return this._player ? this._player.getVideoEmbedCode() : '';\n    }\n    /** Gets an object that should be used to store the temporary API state. */\n    _getPendingState() {\n        if (!this._pendingPlayerState) {\n            this._pendingPlayerState = {};\n        }\n        return this._pendingPlayerState;\n    }\n    /** Initializes a player from a temporary state. */\n    _initializePlayer(player, state) {\n        const { playbackState, playbackRate, volume, muted, seek } = state;\n        switch (playbackState) {\n            case YT.PlayerState.PLAYING:\n                player.playVideo();\n                break;\n            case YT.PlayerState.PAUSED:\n                player.pauseVideo();\n                break;\n            case YT.PlayerState.CUED:\n                player.stopVideo();\n                break;\n        }\n        if (playbackRate != null) {\n            player.setPlaybackRate(playbackRate);\n        }\n        if (volume != null) {\n            player.setVolume(volume);\n        }\n        if (muted != null) {\n            muted ? player.mute() : player.unMute();\n        }\n        if (seek != null) {\n            player.seekTo(seek.seconds, seek.allowSeekAhead);\n        }\n    }\n    /** Gets an observable that adds an event listener to the player when a user subscribes to it. */\n    _getLazyEmitter(name) {\n        // Start with the stream of players. This way the events will be transferred\n        // over to the new player if it gets swapped out under-the-hood.\n        return this._playerChanges.pipe(\n        // Switch to the bound event. `switchMap` ensures that the old event is removed when the\n        // player is changed. If there's no player, return an observable that never emits.\n        switchMap(player => {\n            return player ? fromEventPattern((listener) => {\n                player.addEventListener(name, listener);\n            }, (listener) => {\n                // The API seems to throw when we try to unbind from a destroyed player and it doesn't\n                // expose whether the player has been destroyed so we have to wrap it in a try/catch to\n                // prevent the entire stream from erroring out.\n                try {\n                    if (player.removeEventListener) {\n                        player.removeEventListener(name, listener);\n                    }\n                }\n                catch (_a) { }\n            }) : of();\n        }), \n        // By default we run all the API interactions outside the zone\n        // so we have to bring the events back in manually when they emit.\n        (source) => new Observable(observer => source.subscribe({\n            next: value => this._ngZone.run(() => observer.next(value)),\n            error: error => observer.error(error),\n            complete: () => observer.complete()\n        })), \n        // Ensures that everything is cleared out on destroy.\n        takeUntil(this._destroyed));\n    }\n}\nYouTubePlayer.ɵfac = function YouTubePlayer_Factory(t) { return new (t || YouTubePlayer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };\nYouTubePlayer.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: YouTubePlayer, selectors: [[\"youtube-player\"]], viewQuery: function YouTubePlayer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.youtubeContainer = _t.first);\n    } }, inputs: { videoId: \"videoId\", height: \"height\", width: \"width\", startSeconds: \"startSeconds\", endSeconds: \"endSeconds\", suggestedQuality: \"suggestedQuality\", playerVars: \"playerVars\", showBeforeIframeApiLoads: \"showBeforeIframeApiLoads\" }, outputs: { ready: \"ready\", stateChange: \"stateChange\", error: \"error\", apiChange: \"apiChange\", playbackQualityChange: \"playbackQualityChange\", playbackRateChange: \"playbackRateChange\" }, decls: 2, vars: 0, consts: [[\"youtubeContainer\", \"\"]], template: function YouTubePlayer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"div\", null, 0);\n    } }, encapsulation: 2, changeDetection: 0 });\nYouTubePlayer.ctorParameters = () => [\n    { type: NgZone },\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\n];\nYouTubePlayer.propDecorators = {\n    videoId: [{ type: Input }],\n    height: [{ type: Input }],\n    width: [{ type: Input }],\n    startSeconds: [{ type: Input }],\n    endSeconds: [{ type: Input }],\n    suggestedQuality: [{ type: Input }],\n    playerVars: [{ type: Input }],\n    showBeforeIframeApiLoads: [{ type: Input }],\n    ready: [{ type: Output }],\n    stateChange: [{ type: Output }],\n    error: [{ type: Output }],\n    apiChange: [{ type: Output }],\n    playbackQualityChange: [{ type: Output }],\n    playbackRateChange: [{ type: Output }],\n    youtubeContainer: [{ type: ViewChild, args: ['youtubeContainer',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(YouTubePlayer, [{\n        type: Component,\n        args: [{\n                selector: 'youtube-player',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                // This div is *replaced* by the YouTube player embed.\n                template: '<div #youtubeContainer></div>'\n            }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: Object, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }]; }, { ready: [{\n            type: Output\n        }], stateChange: [{\n            type: Output\n        }], error: [{\n            type: Output\n        }], apiChange: [{\n            type: Output\n        }], playbackQualityChange: [{\n            type: Output\n        }], playbackRateChange: [{\n            type: Output\n        }], videoId: [{\n            type: Input\n        }], height: [{\n            type: Input\n        }], width: [{\n            type: Input\n        }], startSeconds: [{\n            type: Input\n        }], endSeconds: [{\n            type: Input\n        }], suggestedQuality: [{\n            type: Input\n        }], playerVars: [{\n            type: Input\n        }], showBeforeIframeApiLoads: [{\n            type: Input\n        }], youtubeContainer: [{\n            type: ViewChild,\n            args: ['youtubeContainer']\n        }] }); })();\n/** Listens to changes to the given width and height and sets it on the player. */\nfunction bindSizeToPlayer(playerObs, widthObs, heightObs) {\n    return combineLatest([playerObs, widthObs, heightObs])\n        .subscribe(([player, width, height]) => player && player.setSize(width, height));\n}\n/** Listens to changes from the suggested quality and sets it on the given player. */\nfunction bindSuggestedQualityToPlayer(playerObs, suggestedQualityObs) {\n    return combineLatest([\n        playerObs,\n        suggestedQualityObs\n    ]).subscribe(([player, suggestedQuality]) => player && suggestedQuality && player.setPlaybackQuality(suggestedQuality));\n}\n/**\n * Returns an observable that emits the loaded player once it's ready. Certain properties/methods\n * won't be available until the iframe finishes loading.\n * @param onAbort Callback function that will be invoked if the player loading was aborted before\n * it was able to complete. Can be used to clean up any loose references.\n */\nfunction waitUntilReady(onAbort) {\n    return mergeMap(player => {\n        if (!player) {\n            return of(undefined);\n        }\n        if (playerIsReady(player)) {\n            return of(player);\n        }\n        // Since removeEventListener is not on Player when it's initialized, we can't use fromEvent.\n        // The player is not initialized fully until the ready is called.\n        return new Observable(emitter => {\n            let aborted = false;\n            let resolved = false;\n            const onReady = (event) => {\n                resolved = true;\n                if (!aborted) {\n                    event.target.removeEventListener('onReady', onReady);\n                    emitter.next(event.target);\n                }\n            };\n            player.addEventListener('onReady', onReady);\n            return () => {\n                aborted = true;\n                if (!resolved) {\n                    onAbort(player);\n                }\n            };\n        }).pipe(take(1), startWith(undefined));\n    });\n}\n/** Create an observable for the player based on the given options. */\nfunction createPlayerObservable(youtubeContainer, videoIdObs, iframeApiAvailableObs, widthObs, heightObs, playerVarsObs, ngZone) {\n    const playerOptions = combineLatest([videoIdObs, playerVarsObs]).pipe(withLatestFrom(combineLatest([widthObs, heightObs])), map(([constructorOptions, sizeOptions]) => {\n        const [videoId, playerVars] = constructorOptions;\n        const [width, height] = sizeOptions;\n        return videoId ? ({ videoId, playerVars, width, height }) : undefined;\n    }));\n    return combineLatest([youtubeContainer, playerOptions, of(ngZone)])\n        .pipe(skipUntilRememberLatest(iframeApiAvailableObs), scan(syncPlayerState, undefined), distinctUntilChanged());\n}\n/** Skips the given observable until the other observable emits true, then emit the latest. */\nfunction skipUntilRememberLatest(notifier) {\n    return pipe(combineLatest$1(notifier), skipWhile(([_, doneSkipping]) => !doneSkipping), map(([value]) => value));\n}\n/** Destroy the player if there are no options, or create the player if there are options. */\nfunction syncPlayerState(player, [container, videoOptions, ngZone]) {\n    if (player && videoOptions && player.playerVars !== videoOptions.playerVars) {\n        // The player needs to be recreated if the playerVars are different.\n        player.destroy();\n    }\n    else if (!videoOptions) {\n        if (player) {\n            // Destroy the player if the videoId was removed.\n            player.destroy();\n        }\n        return;\n    }\n    else if (player) {\n        return player;\n    }\n    // Important! We need to create the Player object outside of the `NgZone`, because it kicks\n    // off a 250ms setInterval which will continually trigger change detection if we don't.\n    const newPlayer = ngZone.runOutsideAngular(() => new YT.Player(container, videoOptions));\n    newPlayer.videoId = videoOptions.videoId;\n    newPlayer.playerVars = videoOptions.playerVars;\n    return newPlayer;\n}\n/**\n * Call cueVideoById if the videoId changes, or when start or end seconds change. cueVideoById will\n * change the loaded video id to the given videoId, and set the start and end times to the given\n * start/end seconds.\n */\nfunction bindCueVideoCall(playerObs, videoIdObs, startSecondsObs, endSecondsObs, suggestedQualityObs, destroyed) {\n    const cueOptionsObs = combineLatest([startSecondsObs, endSecondsObs])\n        .pipe(map(([startSeconds, endSeconds]) => ({ startSeconds, endSeconds })));\n    // Only respond to changes in cue options if the player is not running.\n    const filteredCueOptions = cueOptionsObs\n        .pipe(filterOnOther(playerObs, player => !!player && !hasPlayerStarted(player)));\n    // If the video id changed, there's no reason to run 'cue' unless the player\n    // was initialized with a different video id.\n    const changedVideoId = videoIdObs\n        .pipe(filterOnOther(playerObs, (player, videoId) => !!player && player.videoId !== videoId));\n    // If the player changed, there's no reason to run 'cue' unless there are cue options.\n    const changedPlayer = playerObs.pipe(filterOnOther(combineLatest([videoIdObs, cueOptionsObs]), ([videoId, cueOptions], player) => !!player &&\n        (videoId != player.videoId || !!cueOptions.startSeconds || !!cueOptions.endSeconds)));\n    merge(changedPlayer, changedVideoId, filteredCueOptions)\n        .pipe(withLatestFrom(combineLatest([playerObs, videoIdObs, cueOptionsObs, suggestedQualityObs])), map(([_, values]) => values), takeUntil(destroyed))\n        .subscribe(([player, videoId, cueOptions, suggestedQuality]) => {\n        if (!videoId || !player) {\n            return;\n        }\n        player.videoId = videoId;\n        player.cueVideoById(Object.assign({ videoId,\n            suggestedQuality }, cueOptions));\n    });\n}\nfunction hasPlayerStarted(player) {\n    const state = player.getPlayerState();\n    return state !== YT.PlayerState.UNSTARTED && state !== YT.PlayerState.CUED;\n}\nfunction playerIsReady(player) {\n    return 'getPlayerStatus' in player;\n}\n/** Combines the two observables temporarily for the filter function. */\nfunction filterOnOther(otherObs, filterFn) {\n    return pipe(withLatestFrom(otherObs), filter(([value, other]) => filterFn(other, value)), map(([value]) => value));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst COMPONENTS = [YouTubePlayer];\nclass YouTubePlayerModule {\n}\nYouTubePlayerModule.ɵfac = function YouTubePlayerModule_Factory(t) { return new (t || YouTubePlayerModule)(); };\nYouTubePlayerModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: YouTubePlayerModule });\nYouTubePlayerModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(YouTubePlayerModule, [{\n        type: NgModule,\n        args: [{\n                declarations: COMPONENTS,\n                exports: COMPONENTS\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(YouTubePlayerModule, { declarations: [YouTubePlayer], exports: [YouTubePlayer] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { YouTubePlayer, YouTubePlayerModule };\n\n","import { isArray } from '../util/isArray';\nimport { CombineLatestOperator } from '../observable/combineLatest';\nimport { from } from '../observable/from';\nconst none = {};\nexport function combineLatest(...observables) {\n    let project = null;\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0].slice();\n    }\n    return (source) => source.lift.call(from([source, ...observables]), new CombineLatestOperator(project));\n}\n","import { Subject } from '../Subject';\nimport { multicast } from './multicast';\nexport function publish(selector) {\n    return selector ?\n        multicast(() => new Subject(), selector) :\n        multicast(new Subject());\n}\n","<ng-container [ngSwitch]=\"type\">\n  <img\n    *ngSwitchCase=\"'image'\"\n    [src]=\"image.sizes.large\"\n    [alt]=\"image.alt || image.title || image.name || ''\"\n    [width]=\"image.sizes['large-width']\"\n    [height]=\"image.sizes['large-height']\"\n  />\n\n  <div *ngSwitchCase=\"'video'\" class=\"showcase__iframe-container\">\n    <youtube-player [videoId]=\"videoId\" data-testid=\"yt-player\"></youtube-player>\n  </div>\n</ng-container>\n","import { Component, Input, OnInit, Inject } from '@angular/core'\n\nimport { getYoutubeId } from 'src/app/shared/util'\n\nimport { Image, ShowcaseType, VideoURL } from '../../models/post.model'\nimport { DOCUMENT } from '@angular/common'\n\n@Component({\n  selector: 'app-showcase',\n  templateUrl: './showcase.component.html',\n  styleUrls: ['./showcase.component.css'],\n})\nexport class ShowcaseComponent implements OnInit {\n  @Input() type: ShowcaseType\n  @Input() image: Image\n  @Input() video: VideoURL\n\n  public videoId: string\n\n  constructor(@Inject(DOCUMENT) private document: Document) {}\n\n  ngOnInit() {\n    if (this.type === 'video') {\n      this.videoId = getYoutubeId(this.video)\n\n      if (typeof YT === 'undefined') this.loadYouTubeAPI()\n    }\n  }\n\n  private loadYouTubeAPI() {\n    const tag = document.createElement('script')\n    tag.src = 'https://www.youtube.com/iframe_api'\n    this.document.body.appendChild(tag)\n  }\n}\n","<table>\n  <tbody>\n    <tr>\n      <th scope=\"row\">Kategorie:</th>\n      <td [innerHTML]=\"data.topic.name\"></td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Semester:</th>\n      <td>\n        <span *ngFor=\"let s of data.semester\" [innerHTML]=\"s.name + '<br>'\"></span>\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Erstellunsjahr:</th>\n      <td [innerHTML]=\"data.year\"></td>\n    </tr>\n    <tr>\n      <th scope=\"row\">{{ data.students.length > 1 ? 'Studierende' : 'Student*in' }}:</th>\n      <td>\n        <span *ngFor=\"let s of data.students\" [innerHTML]=\"s.name + '<br>'\"></span>\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">{{ data.lecturers.length > 1 ? 'Dozierende' : 'Dozent*in' }}:</th>\n      <td>\n        <span *ngFor=\"let d of data.lecturers\" [innerHTML]=\"d.name + '<br>'\"></span>\n      </td>\n    </tr>\n  </tbody>\n</table>\n","import { Component, Input, OnInit } from '@angular/core'\n\nimport { Post } from '../../models/post.model'\n\n@Component({\n  selector: 'app-briefing',\n  templateUrl: './briefing.component.html',\n  styleUrls: ['./briefing.component.css'],\n})\nexport class BriefingComponent implements OnInit {\n  @Input() data: Post['acf']\n\n  ngOnInit() {}\n}\n","import { Component, OnInit } from '@angular/core'\n\n@Component({\n  selector: 'app-loading-spinner',\n  templateUrl: './loading-spinner.component.html',\n  styleUrls: ['./loading-spinner.component.css'],\n})\nexport class LoadingSpinnerComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n","<span class=\"post-detail__spinner\" style=\"font-style: normal;\" role=\"img\" aria-hidden=\"true\"\n  >⏳</span\n>\n","<ng-container *ngIf=\"(isFetching$ | async) === false; else loadingSpinner\">\n  <section *ngIf=\"post$ | async as post; else notFound\">\n    <h2 [innerHTML]=\"post.title.rendered\"></h2>\n    <p class=\"post-detail__category\">\n      {{ post.categoryName }}\n      <span *ngIf=\"post.acf.tags.length\" class=\"post-detail__category__tags\">\n        – <span *ngFor=\"let tag of post.acf.tags\">{{ tag.name }}</span>\n      </span>\n    </p>\n\n    <app-showcase\n      [type]=\"post.acf.showcaseType\"\n      [image]=\"post.acf.showcaseImage\"\n      [video]=\"post.acf.showcaseVideo\"\n    ></app-showcase>\n    <div [innerHTML]=\"post.acf.description\"></div>\n\n    <h3>Steckbrief</h3>\n    <app-briefing [data]=\"post.acf\"></app-briefing>\n\n    <h3 *ngIf=\"post.acf.gallery.length\">Galerie</h3>\n    <img\n      *ngFor=\"let image of post.acf.gallery\"\n      [src]=\"image.sizes.medium\"\n      [alt]=\"image.alt || image.title || image.name || ''\"\n      [width]=\"image.sizes['medium-width']\"\n      [height]=\"image.sizes['medium-height']\"\n    />\n\n    <footer class=\"post-detail__footer\">\n      <button type=\"button\" (click)=\"toTop()\">Nach oben</button>\n    </footer>\n  </section>\n</ng-container>\n\n<ng-template #notFound>\n  <p class=\"post-detail__status-msg\">\n    Projekt mit ID »{{ rawId }}« nicht gefunden.\n    <span style=\"font-style: normal\" role=\"img\" aria-label=\"Sad cat\">😿</span>\n  </p>\n</ng-template>\n\n<ng-template #loadingSpinner>\n  <p class=\"post-detail__status-msg\">Wird geladen... <app-loading-spinner></app-loading-spinner></p>\n</ng-template>\n","import { Component, OnInit } from '@angular/core'\nimport { ActivatedRoute } from '@angular/router'\n\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nimport { Select, Store } from '@ngxs/store'\nimport { GetPost } from '../../store/portfolio.actions'\nimport { PortfolioSelectors } from '../../store/portfolio.selectors'\n\ntype PostEntityByIdFn = ReturnType<typeof PortfolioSelectors.postEntityByIdFn>\n\n@Component({\n  selector: 'app-post-detail',\n  templateUrl: './post-detail.component.html',\n  styleUrls: ['./post-detail.component.css'],\n})\nexport class PostDetailComponent implements OnInit {\n  @Select(PortfolioSelectors.postEntityByIdFn) postEntityByIdFn$: Observable<PostEntityByIdFn>\n  rawId: string\n  id: number\n\n  postEntity$: Observable<ReturnType<PostEntityByIdFn>>\n  post$: Observable<ReturnType<PostEntityByIdFn>['entity']>\n  isFetching$: Observable<boolean>\n\n  constructor(route: ActivatedRoute, private store: Store) {\n    this.rawId = route.snapshot.paramMap.get('id')\n    this.id = Number(this.rawId)\n\n    this.postEntity$ = this.postEntityByIdFn$.pipe(map((postEntityById) => postEntityById(this.id)))\n    this.post$ = this.postEntity$.pipe(map((post) => post.entity))\n    this.isFetching$ = this.postEntity$.pipe(map((post) => post.isFetching))\n  }\n\n  ngOnInit() {\n    this.store.dispatch(new GetPost(this.id)).subscribe()\n  }\n\n  toTop() {\n    document.body.scrollIntoView({ block: 'start', behavior: 'smooth' })\n  }\n}\n","<h2>DMP Portfolio</h2>\n<ng-container *ngIf=\"(posts$ | async).length; else noPosts\">\n  <section *ngFor=\"let post of posts$ | async; first as isFirst\">\n    <hr *ngIf=\"!isFirst\" />\n    <h3 [innerHTML]=\"post.title.rendered\"></h3>\n    <div>\n      <div [innerHTML]=\"getTeaser(post.acf.description)\"></div>\n      <a routerLink=\"{{ post.id }}\">Projekt ansehen →</a>\n    </div>\n  </section>\n\n  <footer class=\"post-master__footer\">\n    <button\n      *ngIf=\"(query$ | async).totalPages > pagination.page && (isFetching$ | async) === false\"\n      (click)=\"requestNextPage()\"\n      type=\"button\"\n    >\n      Mehr laden...\n    </button>\n  </footer>\n</ng-container>\n\n<ng-template #noPosts>\n  <p *ngIf=\"(isFetching$ | async) === false\" class=\"post-master__status-msg\">\n    Keine Projekte vorhanden. <span aria-hidden=\"true\" style=\"font-style: normal\">🚫</span>\n  </p>\n</ng-template>\n\n<p *ngIf=\"isFetching$ | async\" class=\"post-master__status-msg\">\n  Projekte werden geladen... <app-loading-spinner></app-loading-spinner>\n</p>\n","import { Component, OnInit } from '@angular/core'\n\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nimport { Select, Store } from '@ngxs/store'\nimport { Post } from '../../models/post.model'\nimport { PostRequestOptions } from '../../posts.service'\nimport { GetPostPage } from '../../store/portfolio.actions'\nimport { PortfolioSelectors } from '../../store/portfolio.selectors'\n\nconst linebreakRegex = /<br\\s?\\/?>(<\\/br>)?/g\n\ntype PostQueryFn = ReturnType<typeof PortfolioSelectors.postQueryFn>\ntype EntitiesByQueryFn$ = Observable<ReturnType<typeof PortfolioSelectors.postEntitiesByQueryFn>>\n\n@Component({\n  selector: 'app-post-master',\n  templateUrl: './post-master.component.html',\n  styleUrls: ['./post-master.component.css'],\n})\nexport class PostMasterComponent implements OnInit {\n  @Select(PortfolioSelectors.postQueryFn) postQueryFn$: Observable<PostQueryFn>\n  @Select(PortfolioSelectors.postEntitiesByQueryFn) postEntitiesByQueryFn$: EntitiesByQueryFn$\n  pagination: PostRequestOptions = { page: 1, perPage: 8 }\n\n  posts$: Observable<Post[]>\n  query$: Observable<ReturnType<PostQueryFn>>\n  isFetching$: Observable<boolean>\n\n  constructor(private store: Store) {\n    this.posts$ = this.postEntitiesByQueryFn$.pipe(\n      map((postsForQuery) => postsForQuery(this.pagination)),\n      map((postEntities) => postEntities.map((p) => p.entity)),\n    )\n    this.query$ = this.postQueryFn$.pipe(map((getPostQuery) => getPostQuery(this.pagination)))\n    this.isFetching$ = this.query$.pipe(\n      map((q) => Object.values(q.pages).some((p) => p.isFetching)),\n    )\n  }\n\n  ngOnInit() {\n    this.loadPage()\n  }\n  loadPage() {\n    this.store.dispatch(new GetPostPage(this.pagination))\n  }\n  requestNextPage() {\n    this.pagination.page++\n    this.loadPage()\n  }\n\n  getTeaser(text: string) {\n    text = text.replace(linebreakRegex, '')\n\n    return text.length < 160 ? text : `${text.slice(0, 160)}...`\n  }\n}\n","import { RouterModule, Routes } from '@angular/router'\n\nimport { PostDetailComponent } from './views/post-detail/post-detail.component'\nimport { PostMasterComponent } from './views/post-master/post-master.component'\n\nconst routes: Routes = [\n  { path: '', component: PostMasterComponent },\n  { path: ':id', component: PostDetailComponent },\n]\n\nexport const PortfolioRoutes = RouterModule.forChild(routes)\n","import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\n\nimport { LoadingSpinnerComponent } from './loading-spinner.component'\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [LoadingSpinnerComponent],\n  exports: [LoadingSpinnerComponent],\n})\nexport class LoadingSpinnerModule {}\n","import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { YouTubePlayerModule } from '@angular/youtube-player'\n\nimport { LoadingSpinnerModule } from 'src/app/shared/components/loading-spinner/loading-spinner.module'\n\nimport { BriefingComponent } from '../../components/briefing/briefing.component'\nimport { ShowcaseComponent } from '../../components/showcase/showcase.component'\n\nimport { PostDetailComponent } from './post-detail.component'\n\n@NgModule({\n  imports: [CommonModule, YouTubePlayerModule, LoadingSpinnerModule],\n  declarations: [PostDetailComponent, ShowcaseComponent, BriefingComponent],\n})\nexport class PostDetailModule {}\n","import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { RouterModule } from '@angular/router'\n\nimport { LoadingSpinnerModule } from 'src/app/shared/components/loading-spinner/loading-spinner.module'\n\nimport { PostMasterComponent } from './post-master.component'\n\n@NgModule({\n  imports: [CommonModule, RouterModule, LoadingSpinnerModule],\n  providers: [],\n  declarations: [PostMasterComponent],\n})\nexport class PostMasterModule {}\n","import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\n\nimport { NgxsModule } from '@ngxs/store'\n\nimport { PortfolioRoutes } from './portfolio.module.routing'\nimport { PortfolioState } from './store/portfolio.state'\nimport { PostDetailModule } from './views/post-detail/post-detail.module'\nimport { PostMasterModule } from './views/post-master/post-master.module'\n\n@NgModule({\n  imports: [\n    CommonModule,\n    PortfolioRoutes,\n    PostMasterModule,\n    PostDetailModule,\n    NgxsModule.forFeature([PortfolioState]),\n  ],\n  declarations: [],\n})\nexport class PortfolioModule {}\n"]}