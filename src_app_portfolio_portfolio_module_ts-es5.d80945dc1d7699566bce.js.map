{"version":3,"mappings":"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","names":["n","GetPost","constructor","id","GetPostSuccess","post","GetPostError","error","this","GetPostPage","page","GetPostPageSuccess","payload","GetPostPageError","U","getEntities","stateClass","createSelector","state","entities","Object","values","keys","pageIds","map","isArray","item","Array","serializePageQuery","_a","params","h","URLSearchParams","value","patchObject","existing","clone","k","newValue","existingPropValue","newPropValue","isStateOperator","assign","createEntity","entity","arguments","lastUpdatedAt","Date","toISOString","isFetching","isRefreshing","isError","some","i","includes","concat","filter","prevEntity","apiUrl","environment","headersGetTotal","headers","wpTotal","get","Error","Number","headersGetTotalPages","wpTotalPages","getPageFromResponse","response","body","total","totalPages","PostsService","http","getCategory","getPostFromBasePost","categories","pipe","category","categoryName","name","getPost","switchMap","basePost","getPosts","_ref","_ref$perPage","perPage","HttpParams","fromObject","String","per_page","observe","forkJoin","i0","factory","ɵfac","PortfolioState","postsService","store","ngxsOnInit","ctx","dispatch","getState","setState","toString","patch","ids","uniq","catchError","getPostSuccess","updateEntity","getPostError","console","getPostPage","query","existingQuery","pagination","pages","patchState","getPostPageSuccess","reduce","obj","p","getPostPageError","__decorate","Action","u","State","defaults","f","options","getPageQuery","flat","PortfolioSelectors","SharedSelectors","Selector","postQueryFn","addHandler","removeHandler","resultSelector","fromEventPattern","args","Observable","subscriber","retValue","handler","e","_key","next","length","err","isFunction","source","project","pop","lift","WithLatestFromOperator","Ut","observables","call","subscribe","WithLatestFromSubscriber","Ot","destination","super","toRespond","len","push","add","subscribeToResult","notifyNext","_outerValue","innerValue","outerIndex","found","indexOf","splice","notifyComplete","_next","_tryProject","result","apply","OuterSubscriber","Rt","predicate","SkipWhileSubscriber","Jt","skipping","index","tryCallPredicate","Boolean","Subscriber","_c0","YouTubePlayer","_ngZone","platformId","_youtubeContainer","Subject","_destroyed","_playerChanges","BehaviorSubject","_videoId","_height","_width","_startSeconds","_endSeconds","_suggestedQuality","_playerVars","ready","_getLazyEmitter","stateChange","apiChange","playbackQualityChange","playbackRateChange","_isBrowser","isPlatformBrowser","videoId","height","DEFAULT_PLAYER_HEIGHT","width","DEFAULT_PLAYER_WIDTH","startSeconds","endSeconds","suggestedQuality","playerVars","ngOnInit","iframeApiAvailableObs","of","window","YT","Player","iframeApiAvailableSubject","_existingApiReadyCallback","onYouTubeIframeAPIReady","run","take","startWith","playerObs","youtubeContainer","videoIdObs","widthObs","heightObs","playerVarsObs","ngZone","playerOptions","combineLatest","withLatestFrom","sizeOptions","constructorOptions","_v","_R","notifier","slice","from","CombineLatestOperator","SkipWhileOperator","doneSkipping","scan","syncPlayerState","undefined","distinctUntilChanged","tap","player","mergeMap","playerIsReady","emitter","aborted","resolved","addEventListener","event","onReady","target","removeEventListener","destroy","takeUntil","multicast","_player","_pendingPlayerState","_initializePlayer","_ref15","setSize","suggestedQualityObs","_ref17","setPlaybackQuality","startSecondsObs","endSecondsObs","destroyed","cueOptionsObs","_ref19","filteredCueOptions","filterOnOther","getPlayerState","PlayerState","UNSTARTED","CUED","changedVideoId","changedPlayer","_ref21","cueOptions","merge","cueVideoById","connect","createEventsBoundInZone","ngAfterViewInit","nativeElement","ngOnDestroy","complete","playVideo","_getPendingState","playbackState","PLAYING","pauseVideo","PAUSED","stopVideo","seekTo","seconds","allowSeekAhead","seek","mute","muted","unMute","isMuted","setVolume","volume","getVolume","setPlaybackRate","playbackRate","getPlaybackRate","getAvailablePlaybackRates","getVideoLoadedFraction","getCurrentTime","getPlaybackQuality","getAvailableQualityLevels","getDuration","getVideoUrl","getVideoEmbedCode","listener","observer","t","ɵngcc0","PLATFORM_ID","ɵcmp","type","selectors","viewQuery","rf","_t","first","inputs","showBeforeIframeApiLoads","outputs","decls","vars","consts","template","encapsulation","changeDetection","_ref26","container","videoOptions","newPlayer","runOutsideAngular","otherObs","filterFn","_ref29","other","YouTubePlayerModule","ɵmod","ɵinj","ShowcaseComponent","document","url","opts","fuzzy","test","patterns","exec","tokens","split","video","loadYouTubeAPI","tag","createElement","src","appendChild","DOCUMENT","BriefingComponent","LoadingSpinnerComponent","T","route","rawId","snapshot","paramMap","postEntity$","postEntityByIdFn$","postEntityById","post$","isFetching$","toTop","scrollIntoView","block","behavior","PostDetailComponent","Select","linebreakRegex","b","posts$","postEntitiesByQueryFn$","postsForQuery","postEntities","query$","postQueryFn$","getPostQuery","q","loadPage","requestNextPage","getTeaser","text","replace","PostMasterComponent","PortfolioRoutes","RouterModule","path","component","LoadingSpinnerModule","CommonModule","PostDetailModule","PostMasterModule","imports","PortfolioModule","NgxsModule"],"sources":["webpack:///src/app/portfolio/store/portfolio.actions.ts","webpack:///src/app/shared/store/selectors.ts","webpack:///src/app/shared/util/index.ts","webpack:///node_modules/@ngxs/store/__ivy_ngcc__/fesm2015/ngxs-store-operators.js","webpack:///src/app/shared/util/store.ts","webpack:///src/app/portfolio/posts.service.ts","webpack:///src/app/portfolio/store/portfolio.state.ts","webpack:///src/app/portfolio/store/portfolio.selectors.ts","webpack:///node_modules/rxjs/_esm2015/internal/observable/fromEventPattern.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/withLatestFrom.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/skipWhile.js","webpack:///node_modules/@angular/youtube-player/fesm2015/youtube-player.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/combineLatest.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/publish.js","webpack:///src/app/portfolio/components/showcase/showcase.component.html","webpack:///src/app/portfolio/components/showcase/showcase.component.ts","webpack:///src/app/portfolio/components/briefing/briefing.component.html","webpack:///src/app/portfolio/components/briefing/briefing.component.ts","webpack:///src/app/shared/components/loading-spinner/loading-spinner.component.ts","webpack:///src/app/shared/components/loading-spinner/loading-spinner.component.html","webpack:///src/app/portfolio/views/post-detail/post-detail.component.html","webpack:///src/app/portfolio/views/post-detail/post-detail.component.ts","webpack:///src/app/portfolio/views/post-master/post-master.component.html","webpack:///src/app/portfolio/views/post-master/post-master.component.ts","webpack:///src/app/portfolio/portfolio.module.routing.ts","webpack:///src/app/shared/components/loading-spinner/loading-spinner.module.ts","webpack:///src/app/portfolio/views/post-detail/post-detail.module.ts","webpack:///src/app/portfolio/views/post-master/post-master.module.ts","webpack:///src/app/portfolio/portfolio.module.ts"],"sourcesContent":["import { Page } from '../../shared/models'\nimport { Post } from '../models/post.model'\nimport { PostRequestOptions } from '../posts.service'\n\nexport class GetPost {\n  static readonly type = '[Portfolio] Get Post'\n  constructor(public id: number) {}\n}\nexport class GetPostSuccess {\n  static readonly type = '[Portfolio API] Get Post Success'\n  constructor(public post: Post) {}\n}\nexport class GetPostError {\n  static readonly type = '[Portfolio API] Get Post Error'\n  constructor(public id: number, public error: Error) {}\n}\n\nexport class GetPostPage {\n  static readonly type = '[Portfolio] Get Post Page'\n  constructor(public page: PostRequestOptions) {}\n}\nexport class GetPostPageSuccess {\n  static readonly type = '[Portfolio API] Get Post Page Success'\n  constructor(public page: PostRequestOptions, public payload: Page<Post>) {}\n}\nexport class GetPostPageError {\n  static readonly type = '[Portfolio API] Get Post Page Error'\n  constructor(public page: PostRequestOptions, public error: Error) {}\n}\n","import { createSelector } from '@ngxs/store'\nimport { Entity } from '../models'\n\nexport class SharedSelectors {\n  static getEntities<T>(stateClass) {\n    return createSelector([stateClass], (state) => state.entities as { [id: string]: Entity<T> })\n  }\n\n  static getEntityList<T>(stateClass) {\n    return createSelector([stateClass], (state) => Object.values(state.entities) as Entity<T>[])\n  }\n\n  static getEntityIds(stateClass) {\n    return createSelector([stateClass], (state) => Object.keys(state.entities))\n  }\n\n  static getEntityListByPageFn(stateClass) {\n    return (pageIds: number[]) => {\n      return createSelector([stateClass], (state) => pageIds.map((id) => state.entities[id]))\n    }\n  }\n}\n","export const isArray = (item: any): item is any[] => Array.isArray(item)\n\nexport const serializePageQuery = ({ page, ...params }: any) => `?${new URLSearchParams(params)}`\n\nexport const getYoutubeId = (url: string, opts = { fuzzy: true }) => {\n  if (!/youtu\\.?be/.test(url)) return null\n\n  // Look first for known patterns\n  let i: number\n  const patterns = [\n    /youtu\\.be\\/([^#&?]{11})/, // youtu.be/<id>\n    /\\?v=([^#&?]{11})/, // ?v=<id>\n    /&v=([^#&?]{11})/, // &v=<id>\n    /embed\\/([^#&?]{11})/, // embed/<id>\n    /\\/v\\/([^#&?]{11})/, // /v/<id>\n  ]\n\n  // If any pattern matches, return the ID\n  for (i = 0; i < patterns.length; ++i) {\n    if (patterns[i].test(url)) {\n      return patterns[i].exec(url)[1]\n    }\n  }\n\n  if (opts.fuzzy) {\n    // If that fails, break it apart by certain characters and look\n    // for the 11 character key\n    const tokens = url.split(/[/&?=#.\\s]/g)\n    for (i = 0; i < tokens.length; ++i) {\n      if (/^[^#&?]{11}$/.test(tokens[i])) {\n        return tokens[i]\n      }\n    }\n  }\n}\n","/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T\r\n * @param {?} items - Specific items to append to the end of an array\r\n * @return {?}\r\n */\r\nfunction append(items) {\r\n    return (/**\r\n     * @param {?} existing\r\n     * @return {?}\r\n     */\r\n    function appendOperator(existing) {\r\n        // If `items` is `undefined` or `null` or `[]` but `existing` is provided\r\n        // just return `existing`\r\n        /** @type {?} */\r\n        const itemsNotProvidedButExistingIs = (!items || !items.length) && existing;\r\n        if (itemsNotProvidedButExistingIs) {\r\n            return (/** @type {?} */ (existing));\r\n        }\r\n        if (Array.isArray(existing)) {\r\n            return existing.concat((/** @type {?} */ (items)));\r\n        }\r\n        // For example if some property is added dynamically\r\n        // and didn't exist before thus it's not `ArrayLike`\r\n        return (/** @type {?} */ (items));\r\n    });\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T\r\n * @param {...?} operators\r\n * @return {?}\r\n */\r\nfunction compose(...operators) {\r\n    return (/**\r\n     * @param {?} existing\r\n     * @return {?}\r\n     */\r\n    function composeOperator(existing) {\r\n        return operators.reduce((/**\r\n         * @param {?} accumulator\r\n         * @param {?} operator\r\n         * @return {?}\r\n         */\r\n        (accumulator, operator) => operator(accumulator)), existing);\r\n    });\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isStateOperator(value) {\r\n    return typeof value === 'function';\r\n}\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isUndefined(value) {\r\n    return typeof value === 'undefined';\r\n}\r\n/**\r\n * @template T\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isPredicate(value) {\r\n    return typeof value === 'function';\r\n}\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isNumber(value) {\r\n    return typeof value === 'number';\r\n}\r\n/**\r\n * @param {?} index\r\n * @return {?}\r\n */\r\nfunction invalidIndex(index) {\r\n    return Number.isNaN(index) || index === -1;\r\n}\r\n/**\r\n * @template T\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isNil(value) {\r\n    return value === null || isUndefined(value);\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T\r\n * @param {?} operatorOrValue\r\n * @param {?=} existing\r\n * @return {?}\r\n */\r\nfunction retrieveValue(operatorOrValue, existing) {\r\n    // If state operator is a function\r\n    // then call it with an original value\r\n    if (isStateOperator(operatorOrValue)) {\r\n        /** @type {?} */\r\n        const value = operatorOrValue((/** @type {?} */ ((/** @type {?} */ (existing)))));\r\n        return (/** @type {?} */ (value));\r\n    }\r\n    // If operator or value was not provided\r\n    // e.g. `elseOperatorOrValue` is `undefined`\r\n    // then we just return an original value\r\n    if (isUndefined(operatorOrValue)) {\r\n        return (/** @type {?} */ ((/** @type {?} */ (((/** @type {?} */ (existing)))))));\r\n    }\r\n    return (/** @type {?} */ (operatorOrValue));\r\n}\r\n/**\r\n * @template T\r\n * @param {?} condition - Condition can be a plain boolean value or a function,\r\n * that returns boolean, also this function can take a value as an argument\r\n * to which this state operator applies\r\n * @param {?} trueOperatorOrValue - Any value or a state operator\r\n * @param {?=} elseOperatorOrValue - Any value or a state operator\r\n * @return {?}\r\n */\r\nfunction iif(condition, trueOperatorOrValue, elseOperatorOrValue) {\r\n    return (/**\r\n     * @param {?} existing\r\n     * @return {?}\r\n     */\r\n    function iifOperator(existing) {\r\n        // Convert the value to a boolean\r\n        /** @type {?} */\r\n        let result = !!condition;\r\n        // but if it is a function then run it to get the result\r\n        if (isPredicate(condition)) {\r\n            result = condition(existing);\r\n        }\r\n        if (result) {\r\n            return retrieveValue(trueOperatorOrValue, (/** @type {?} */ (existing)));\r\n        }\r\n        return retrieveValue((/** @type {?} */ (elseOperatorOrValue)), (/** @type {?} */ (existing)));\r\n    });\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T\r\n * @param {?} value - Value to insert\r\n * @param {?=} beforePosition\r\n * @return {?}\r\n */\r\nfunction insertItem(value, beforePosition) {\r\n    return (/**\r\n     * @param {?} existing\r\n     * @return {?}\r\n     */\r\n    function insertItemOperator(existing) {\r\n        // Have to check explicitly for `null` and `undefined`\r\n        // because `value` can be `0`, thus `!value` will return `true`\r\n        if (isNil(value) && existing) {\r\n            return (/** @type {?} */ (existing));\r\n        }\r\n        // Property may be dynamic and might not existed before\r\n        if (!Array.isArray(existing)) {\r\n            return [(/** @type {?} */ (value))];\r\n        }\r\n        /** @type {?} */\r\n        const clone = existing.slice();\r\n        /** @type {?} */\r\n        let index = 0;\r\n        // No need to call `isNumber`\r\n        // as we are checking `> 0` not `>= 0`\r\n        // everything except number will return false here\r\n        if ((/** @type {?} */ (beforePosition)) > 0) {\r\n            index = (/** @type {?} */ (beforePosition));\r\n        }\r\n        clone.splice(index, 0, (/** @type {?} */ (value)));\r\n        return clone;\r\n    });\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T\r\n * @param {?} patchObject\r\n * @return {?}\r\n */\r\nfunction patch(patchObject) {\r\n    return (/**\r\n     * @template U\r\n     * @param {?} existing\r\n     * @return {?}\r\n     */\r\n    function patchStateOperator(existing) {\r\n        /** @type {?} */\r\n        let clone = null;\r\n        for (const k in patchObject) {\r\n            /** @type {?} */\r\n            const newValue = patchObject[k];\r\n            /** @type {?} */\r\n            const existingPropValue = existing[k];\r\n            /** @type {?} */\r\n            const newPropValue = isStateOperator(newValue)\r\n                ? newValue((/** @type {?} */ (existingPropValue)))\r\n                : newValue;\r\n            if (newPropValue !== existingPropValue) {\r\n                if (!clone) {\r\n                    clone = Object.assign({}, ((/** @type {?} */ (existing))));\r\n                }\r\n                clone[k] = newPropValue;\r\n            }\r\n        }\r\n        return clone || existing;\r\n    });\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T\r\n * @param {?} selector - Index of item in the array or a predicate function\r\n * that can be provided in `Array.prototype.findIndex`\r\n * @param {?} operatorOrValue - New value under the `selector` index or a\r\n * function that can be applied to an existing value\r\n * @return {?}\r\n */\r\nfunction updateItem(selector, operatorOrValue) {\r\n    return (/**\r\n     * @param {?} existing\r\n     * @return {?}\r\n     */\r\n    function updateItemOperator(existing) {\r\n        /** @type {?} */\r\n        let index = -1;\r\n        if (isPredicate(selector)) {\r\n            index = existing.findIndex(selector);\r\n        }\r\n        else if (isNumber(selector)) {\r\n            index = selector;\r\n        }\r\n        if (invalidIndex(index)) {\r\n            return (/** @type {?} */ (existing));\r\n        }\r\n        /** @type {?} */\r\n        let value = (/** @type {?} */ (null));\r\n        // Need to check if the new item value will change the existing item value\r\n        // then, only if it will change it then clone the array and set the item\r\n        if (isStateOperator(operatorOrValue)) {\r\n            value = operatorOrValue((/** @type {?} */ (existing[index])));\r\n        }\r\n        else {\r\n            value = operatorOrValue;\r\n        }\r\n        // If the value hasn't been mutated\r\n        // then we just return `existing` array\r\n        if (value === existing[index]) {\r\n            return (/** @type {?} */ (existing));\r\n        }\r\n        /** @type {?} */\r\n        const clone = existing.slice();\r\n        clone[index] = (/** @type {?} */ (value));\r\n        return clone;\r\n    });\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T\r\n * @param {?} selector - index or predicate to remove an item from an array by\r\n * @return {?}\r\n */\r\nfunction removeItem(selector) {\r\n    return (/**\r\n     * @param {?} existing\r\n     * @return {?}\r\n     */\r\n    function removeItemOperator(existing) {\r\n        /** @type {?} */\r\n        let index = -1;\r\n        if (isPredicate(selector)) {\r\n            index = existing.findIndex(selector);\r\n        }\r\n        else if (isNumber(selector)) {\r\n            index = selector;\r\n        }\r\n        if (invalidIndex(index)) {\r\n            return (/** @type {?} */ (existing));\r\n        }\r\n        /** @type {?} */\r\n        const clone = existing.slice();\r\n        clone.splice(index, 1);\r\n        return clone;\r\n    });\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { append, compose, iif, insertItem, isStateOperator, patch, removeItem, updateItem };\n\n","import { StateOperator } from '@ngxs/store'\nimport { patch } from '@ngxs/store/operators'\nimport { Entity, EntityPartial, PaginatedEntities } from '../models'\n\nimport { isArray } from '.'\n\nexport const createEntity = <T>(id: Entity<T>['id'], entity: T = null): Entity<T> => ({\n  id,\n  entity,\n  lastUpdatedAt: new Date().toISOString(),\n  isFetching: false,\n  isRefreshing: false,\n  isError: false,\n})\n\nexport function uniq(item: any | any[]): StateOperator<any[]> {\n  return (state: any[]) => {\n    const noUniq = isArray(item) ? item.some((i) => !state.includes(i)) : state.includes(item)\n    if (noUniq) {\n      return state\n    }\n\n    return state.concat(isArray(item) ? item.filter((i) => !state.includes(i)) : item)\n  }\n}\n\nexport function addEntity<T>(entity: Entity<T>): StateOperator<PaginatedEntities<T>> {\n  const id = entity.id.toString()\n  return patch<PaginatedEntities<T>>({ ids: uniq(id), entities: patch({ [id]: entity }) })\n}\n\nexport function addEntities<T>(payload: Entity<T>[]): StateOperator<PaginatedEntities<T>> {\n  const entities = payload.reduce((obj, entity) => ((obj[entity.id] = entity), obj), {})\n  return patch<PaginatedEntities<T>>({\n    ids: uniq(payload.map((p) => p.id.toString())),\n    entities: patch(entities),\n  })\n}\n\nexport function updateEntity<T>(payload: EntityPartial<T>): StateOperator<PaginatedEntities<T>> {\n  return (state: PaginatedEntities<T>) => {\n    const prevEntity = state.entities[payload.id]\n    return {\n      ...state,\n      entities: { ...state.entities, [payload.id]: { ...prevEntity, ...payload } },\n    }\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams, HttpResponse } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { forkJoin } from 'rxjs'\n\nimport { map, switchMap } from 'rxjs/operators'\nimport { environment } from 'src/environments/environment'\n\nimport { Page } from '../shared/models'\n\nimport { BasePost, Category, Post } from './models/post.model'\n\nexport interface PostRequestOptions {\n  page: number\n  perPage?: number\n}\n\nconst { apiUrl } = environment\n\nconst headersGetTotal = (headers: HttpHeaders) => {\n  const wpTotal = headers.get('x-wp-total')\n  if (wpTotal == null) throw Error('Header \"x-wp-total\" missing in response')\n\n  return Number(wpTotal)\n}\nconst headersGetTotalPages = (headers: HttpHeaders) => {\n  const wpTotalPages = headers.get('x-wp-totalpages')\n  if (wpTotalPages == null) throw Error('Header \"x-wp-totalpages\" missing in response')\n\n  return Number(wpTotalPages)\n}\n\nconst getPageFromResponse = <T>(response: HttpResponse<T[]>): Page<T> => {\n  const { body, headers } = response\n  return { body, total: headersGetTotal(headers), totalPages: headersGetTotalPages(headers) }\n}\n\n@Injectable({ providedIn: 'root' })\nexport class PostsService {\n  constructor(private http: HttpClient) {}\n\n  getCategory(id: number) {\n    return this.http.get<Category>(`${apiUrl}categories/${id}`)\n  }\n\n  getPostFromBasePost(post: BasePost) {\n    return this.http\n      .get<Category>(`${apiUrl}categories/${post.categories[0]}`)\n      .pipe(map((category) => ({ ...post, categoryName: category.name } as Post)))\n  }\n\n  getPost(id: number) {\n    return this.http\n      .get<BasePost>(`${apiUrl}posts/${id}`)\n      .pipe(switchMap((basePost) => this.getPostFromBasePost(basePost)))\n  }\n\n  getPosts({ page, perPage = 10 }: PostRequestOptions) {\n    const params = new HttpParams({\n      fromObject: { page: String(page), per_page: String(perPage) },\n    })\n\n    return this.http\n      .get<BasePost[]>(`${apiUrl}posts`, { params, observe: 'response' })\n      .pipe(\n        switchMap((response) => {\n          return forkJoin(response.body.map((basePost) => this.getPostFromBasePost(basePost))).pipe(\n            map((body) => ({ ...response, body })),\n          )\n        }),\n        map(getPageFromResponse),\n      )\n  }\n}\n","import { Injectable } from '@angular/core'\n\nimport { catchError, map } from 'rxjs/operators'\n\nimport { Action, NgxsOnInit, State, StateContext, Store } from '@ngxs/store'\nimport { patch } from '@ngxs/store/operators'\nimport { PaginatedEntities } from '../../shared/models'\nimport { serializePageQuery } from '../../shared/util'\nimport { addEntities, addEntity, createEntity, updateEntity } from '../../shared/util/store'\nimport { Post } from '../models/post.model'\nimport { PostsService } from '../posts.service'\n\nimport {\n  GetPost,\n  GetPostError,\n  GetPostPage,\n  GetPostPageError,\n  GetPostPageSuccess,\n  GetPostSuccess,\n} from './portfolio.actions'\n\nexport type PortfolioStateModel = PaginatedEntities<Post>\nexport type PortfolioStateContext = StateContext<PortfolioStateModel>\n\nconst initialState: PortfolioStateModel = { entities: {}, ids: [], pagination: {} }\n\n@State<PortfolioStateModel>({ name: 'portfolio', defaults: initialState })\n@Injectable()\nexport class PortfolioState implements NgxsOnInit {\n  constructor(private postsService: PostsService, private store: Store) {}\n\n  ngxsOnInit(ctx: PortfolioStateContext) {\n    ctx.dispatch(new GetPostPage({ page: 1, perPage: 8 }))\n  }\n\n  @Action(GetPost)\n  getPost(ctx: PortfolioStateContext, { id }: GetPost) {\n    const existing = ctx.getState().entities[id]\n    if (existing && !existing.isError) {\n      return ctx.dispatch(new GetPostSuccess(existing.entity))\n    }\n\n    ctx.setState(\n      addEntity<Post>({ ...createEntity<Post>(id), isFetching: true }),\n    )\n\n    return this.postsService.getPost(id).pipe(\n      map((response) => ctx.dispatch(new GetPostSuccess(response))),\n      catchError((error) => ctx.dispatch(new GetPostError(id, error))),\n    )\n  }\n\n  @Action(GetPostSuccess)\n  getPostSuccess(ctx: PortfolioStateContext, { post }: GetPostSuccess) {\n    ctx.setState(updateEntity<Post>(createEntity<Post>(post.id, post)))\n  }\n\n  @Action(GetPostError)\n  getPostError(ctx: PortfolioStateContext, { id, error }: GetPostError) {\n    ctx.setState(updateEntity({ id, isError: true, isFetching: false, isRefreshing: false }))\n    console.error(error)\n  }\n\n  @Action(GetPostPage)\n  getPostPage(ctx: PortfolioStateContext, { page }: GetPostPage) {\n    const state = ctx.getState()\n    const query = serializePageQuery(page)\n\n    const existingQuery = ctx.getState().pagination[query]\n    if (existingQuery && existingQuery.pages[page.page]) return\n\n    if (!existingQuery) {\n      ctx.patchState({\n        pagination: { ...state.pagination, [query]: { total: 0, totalPages: 0, pages: {} } },\n      })\n    }\n\n    ctx.setState(\n      patch({\n        pagination: patch({\n          [query]: patch({\n            pages: patch({ [page.page]: { ...createEntity(page.page), isFetching: true } }),\n          }),\n        }),\n      }),\n    )\n\n    return this.postsService.getPosts(page).pipe(\n      map((response) => ctx.dispatch(new GetPostPageSuccess(page, response))),\n      catchError((error) => ctx.dispatch(new GetPostPageError(page, error))),\n    )\n  }\n\n  @Action(GetPostPageSuccess)\n  getPostPageSuccess(ctx: PortfolioStateContext, { page, payload }: GetPostPageSuccess) {\n    const query = serializePageQuery(page)\n\n    const entities = payload.body.map((item) => createEntity(item.id, item))\n    const pageIds = payload.body.map((item) => item.id.toString())\n    ctx.setState(addEntities(entities))\n\n    ctx.setState(\n      patch({\n        pagination: patch({\n          [query]: patch({\n            total: payload.total,\n            totalPages: payload.totalPages,\n            pages: patch({ [page.page]: { ...createEntity(page.page, pageIds) } }),\n          }),\n        }),\n      }),\n    )\n  }\n\n  @Action(GetPostPageError)\n  getPostPageError(ctx: PortfolioStateContext, { page, error }: GetPostPageError) {\n    const query = serializePageQuery(page)\n    ctx.setState(\n      patch({\n        pagination: patch({\n          [query]: patch({\n            pages: patch({\n              [page.page]: patch({ isError: true, isRefreshing: false, isFetching: false }),\n            }),\n          }),\n        }),\n      }),\n    )\n    console.error(error)\n  }\n}\n","import { SharedSelectors } from 'src/app/shared/store/selectors'\nimport { serializePageQuery } from 'src/app/shared/util'\n\nimport { Selector } from '@ngxs/store'\nimport { Post } from '../models/post.model'\nimport { PostRequestOptions } from '../posts.service'\n\nimport { PortfolioState, PortfolioStateModel } from './portfolio.state'\n\nexport class PortfolioSelectors {\n  static entities = SharedSelectors.getEntities<Post>(PortfolioState)\n  static ids = SharedSelectors.getEntityIds(PortfolioState)\n  static posts = SharedSelectors.getEntityList<Post>(PortfolioState)\n\n  @Selector([PortfolioState])\n  static pagination(state: PortfolioStateModel) {\n    return state.pagination\n  }\n  @Selector([PortfolioSelectors.entities])\n  static postEntityByIdFn(entities: ReturnType<typeof PortfolioSelectors.entities>) {\n    return (id: number) => entities[id]\n  }\n  @Selector([PortfolioSelectors.pagination])\n  static postQueryFn(pagination: ReturnType<typeof PortfolioSelectors.pagination>) {\n    return (options: PostRequestOptions) => pagination[serializePageQuery(options)]\n  }\n  @Selector([PortfolioSelectors.postQueryFn])\n  static postQueryPageFn(getPageQuery: ReturnType<typeof PortfolioSelectors.postQueryFn>) {\n    return (options: PostRequestOptions) => getPageQuery(options).pages[options.page]\n  }\n  @Selector([PortfolioSelectors.entities, PortfolioSelectors.postQueryFn])\n  static postEntitiesByQueryFn(\n    entities: ReturnType<typeof PortfolioSelectors.entities>,\n    getPageQuery: ReturnType<typeof PortfolioSelectors.postQueryFn>,\n  ) {\n    return (options: PostRequestOptions) => {\n      const pages = Object.values(getPageQuery(options).pages).filter((p) => !p.isFetching)\n      const ids = pages.map((p) => p.entity).flat()\n      return ids.map((id) => entities[id])\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { isFunction } from '../util/isFunction';\nimport { map } from '../operators/map';\nexport function fromEventPattern(addHandler, removeHandler, resultSelector) {\n    if (resultSelector) {\n        return fromEventPattern(addHandler, removeHandler).pipe(map(args => isArray(args) ? resultSelector(...args) : resultSelector(args)));\n    }\n    return new Observable(subscriber => {\n        const handler = (...e) => subscriber.next(e.length === 1 ? e[0] : e);\n        let retValue;\n        try {\n            retValue = addHandler(handler);\n        }\n        catch (err) {\n            subscriber.error(err);\n            return undefined;\n        }\n        if (!isFunction(removeHandler)) {\n            return undefined;\n        }\n        return () => removeHandler(handler, retValue);\n    });\n}\n","import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function withLatestFrom(...args) {\n    return (source) => {\n        let project;\n        if (typeof args[args.length - 1] === 'function') {\n            project = args.pop();\n        }\n        const observables = args;\n        return source.lift(new WithLatestFromOperator(observables, project));\n    };\n}\nclass WithLatestFromOperator {\n    constructor(observables, project) {\n        this.observables = observables;\n        this.project = project;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n    }\n}\nclass WithLatestFromSubscriber extends OuterSubscriber {\n    constructor(destination, observables, project) {\n        super(destination);\n        this.observables = observables;\n        this.project = project;\n        this.toRespond = [];\n        const len = observables.length;\n        this.values = new Array(len);\n        for (let i = 0; i < len; i++) {\n            this.toRespond.push(i);\n        }\n        for (let i = 0; i < len; i++) {\n            let observable = observables[i];\n            this.add(subscribeToResult(this, observable, undefined, i));\n        }\n    }\n    notifyNext(_outerValue, innerValue, outerIndex) {\n        this.values[outerIndex] = innerValue;\n        const toRespond = this.toRespond;\n        if (toRespond.length > 0) {\n            const found = toRespond.indexOf(outerIndex);\n            if (found !== -1) {\n                toRespond.splice(found, 1);\n            }\n        }\n    }\n    notifyComplete() {\n    }\n    _next(value) {\n        if (this.toRespond.length === 0) {\n            const args = [value, ...this.values];\n            if (this.project) {\n                this._tryProject(args);\n            }\n            else {\n                this.destination.next(args);\n            }\n        }\n    }\n    _tryProject(args) {\n        let result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    }\n}\n","import { Subscriber } from '../Subscriber';\nexport function skipWhile(predicate) {\n    return (source) => source.lift(new SkipWhileOperator(predicate));\n}\nclass SkipWhileOperator {\n    constructor(predicate) {\n        this.predicate = predicate;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n    }\n}\nclass SkipWhileSubscriber extends Subscriber {\n    constructor(destination, predicate) {\n        super(destination);\n        this.predicate = predicate;\n        this.skipping = true;\n        this.index = 0;\n    }\n    _next(value) {\n        const destination = this.destination;\n        if (this.skipping) {\n            this.tryCallPredicate(value);\n        }\n        if (!this.skipping) {\n            destination.next(value);\n        }\n    }\n    tryCallPredicate(value) {\n        try {\n            const result = this.predicate(value, this.index++);\n            this.skipping = Boolean(result);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    }\n}\n","import { Component, ChangeDetectionStrategy, ViewEncapsulation, NgZone, Inject, PLATFORM_ID, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Subject, BehaviorSubject, of, combineLatest, pipe, Observable, fromEventPattern, merge } from 'rxjs';\nimport { take, startWith, combineLatest as combineLatest$1, skipWhile, map, scan, distinctUntilChanged, tap, mergeMap, takeUntil, publish, switchMap, withLatestFrom, filter } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\n\nconst _c0 = [\"youtubeContainer\"];\nconst DEFAULT_PLAYER_WIDTH = 640;\nconst DEFAULT_PLAYER_HEIGHT = 390;\n/**\n * Angular component that renders a YouTube player via the YouTube player\n * iframe API.\n * @see https://developers.google.com/youtube/iframe_api_reference\n */\nclass YouTubePlayer {\n    constructor(_ngZone, platformId) {\n        this._ngZone = _ngZone;\n        this._youtubeContainer = new Subject();\n        this._destroyed = new Subject();\n        this._playerChanges = new BehaviorSubject(undefined);\n        this._videoId = new BehaviorSubject(undefined);\n        this._height = new BehaviorSubject(DEFAULT_PLAYER_HEIGHT);\n        this._width = new BehaviorSubject(DEFAULT_PLAYER_WIDTH);\n        this._startSeconds = new BehaviorSubject(undefined);\n        this._endSeconds = new BehaviorSubject(undefined);\n        this._suggestedQuality = new BehaviorSubject(undefined);\n        this._playerVars = new BehaviorSubject(undefined);\n        /** Outputs are direct proxies from the player itself. */\n        this.ready = this._getLazyEmitter('onReady');\n        this.stateChange = this._getLazyEmitter('onStateChange');\n        this.error = this._getLazyEmitter('onError');\n        this.apiChange = this._getLazyEmitter('onApiChange');\n        this.playbackQualityChange = this._getLazyEmitter('onPlaybackQualityChange');\n        this.playbackRateChange = this._getLazyEmitter('onPlaybackRateChange');\n        this._isBrowser = isPlatformBrowser(platformId);\n    }\n    /** YouTube Video ID to view */\n    get videoId() { return this._videoId.value; }\n    set videoId(videoId) {\n        this._videoId.next(videoId);\n    }\n    /** Height of video player */\n    get height() { return this._height.value; }\n    set height(height) {\n        this._height.next(height || DEFAULT_PLAYER_HEIGHT);\n    }\n    /** Width of video player */\n    get width() { return this._width.value; }\n    set width(width) {\n        this._width.next(width || DEFAULT_PLAYER_WIDTH);\n    }\n    /** The moment when the player is supposed to start playing */\n    set startSeconds(startSeconds) {\n        this._startSeconds.next(startSeconds);\n    }\n    /** The moment when the player is supposed to stop playing */\n    set endSeconds(endSeconds) {\n        this._endSeconds.next(endSeconds);\n    }\n    /** The suggested quality of the player */\n    set suggestedQuality(suggestedQuality) {\n        this._suggestedQuality.next(suggestedQuality);\n    }\n    /**\n     * Extra parameters used to configure the player. See:\n     * https://developers.google.com/youtube/player_parameters.html?playerVersion=HTML5#Parameters\n     */\n    get playerVars() { return this._playerVars.value; }\n    set playerVars(playerVars) {\n        this._playerVars.next(playerVars);\n    }\n    ngOnInit() {\n        // Don't do anything if we're not in a browser environment.\n        if (!this._isBrowser) {\n            return;\n        }\n        let iframeApiAvailableObs = of(true);\n        if (!window.YT || !window.YT.Player) {\n            if (this.showBeforeIframeApiLoads && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw new Error('Namespace YT not found, cannot construct embedded youtube player. ' +\n                    'Please install the YouTube Player API Reference for iframe Embeds: ' +\n                    'https://developers.google.com/youtube/iframe_api_reference');\n            }\n            const iframeApiAvailableSubject = new Subject();\n            this._existingApiReadyCallback = window.onYouTubeIframeAPIReady;\n            window.onYouTubeIframeAPIReady = () => {\n                if (this._existingApiReadyCallback) {\n                    this._existingApiReadyCallback();\n                }\n                this._ngZone.run(() => iframeApiAvailableSubject.next(true));\n            };\n            iframeApiAvailableObs = iframeApiAvailableSubject.pipe(take(1), startWith(false));\n        }\n        // An observable of the currently loaded player.\n        const playerObs = createPlayerObservable(this._youtubeContainer, this._videoId, iframeApiAvailableObs, this._width, this._height, this._playerVars, this._ngZone).pipe(tap(player => {\n            // Emit this before the `waitUntilReady` call so that we can bind to\n            // events that happen as the player is being initialized (e.g. `onReady`).\n            this._playerChanges.next(player);\n        }), waitUntilReady(player => {\n            // Destroy the player if loading was aborted so that we don't end up leaking memory.\n            if (!playerIsReady(player)) {\n                player.destroy();\n            }\n        }), takeUntil(this._destroyed), publish());\n        // Set up side effects to bind inputs to the player.\n        playerObs.subscribe(player => {\n            this._player = player;\n            if (player && this._pendingPlayerState) {\n                this._initializePlayer(player, this._pendingPlayerState);\n            }\n            this._pendingPlayerState = undefined;\n        });\n        bindSizeToPlayer(playerObs, this._width, this._height);\n        bindSuggestedQualityToPlayer(playerObs, this._suggestedQuality);\n        bindCueVideoCall(playerObs, this._videoId, this._startSeconds, this._endSeconds, this._suggestedQuality, this._destroyed);\n        // After all of the subscriptions are set up, connect the observable.\n        playerObs.connect();\n    }\n    /**\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 11.0.0\n     */\n    createEventsBoundInZone() {\n        return {};\n    }\n    ngAfterViewInit() {\n        this._youtubeContainer.next(this.youtubeContainer.nativeElement);\n    }\n    ngOnDestroy() {\n        if (this._player) {\n            this._player.destroy();\n            window.onYouTubeIframeAPIReady = this._existingApiReadyCallback;\n        }\n        this._playerChanges.complete();\n        this._videoId.complete();\n        this._height.complete();\n        this._width.complete();\n        this._startSeconds.complete();\n        this._endSeconds.complete();\n        this._suggestedQuality.complete();\n        this._youtubeContainer.complete();\n        this._playerVars.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#playVideo */\n    playVideo() {\n        if (this._player) {\n            this._player.playVideo();\n        }\n        else {\n            this._getPendingState().playbackState = YT.PlayerState.PLAYING;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#pauseVideo */\n    pauseVideo() {\n        if (this._player) {\n            this._player.pauseVideo();\n        }\n        else {\n            this._getPendingState().playbackState = YT.PlayerState.PAUSED;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#stopVideo */\n    stopVideo() {\n        if (this._player) {\n            this._player.stopVideo();\n        }\n        else {\n            // It seems like YouTube sets the player to CUED when it's stopped.\n            this._getPendingState().playbackState = YT.PlayerState.CUED;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#seekTo */\n    seekTo(seconds, allowSeekAhead) {\n        if (this._player) {\n            this._player.seekTo(seconds, allowSeekAhead);\n        }\n        else {\n            this._getPendingState().seek = { seconds, allowSeekAhead };\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#mute */\n    mute() {\n        if (this._player) {\n            this._player.mute();\n        }\n        else {\n            this._getPendingState().muted = true;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#unMute */\n    unMute() {\n        if (this._player) {\n            this._player.unMute();\n        }\n        else {\n            this._getPendingState().muted = false;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#isMuted */\n    isMuted() {\n        if (this._player) {\n            return this._player.isMuted();\n        }\n        if (this._pendingPlayerState) {\n            return !!this._pendingPlayerState.muted;\n        }\n        return false;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#setVolume */\n    setVolume(volume) {\n        if (this._player) {\n            this._player.setVolume(volume);\n        }\n        else {\n            this._getPendingState().volume = volume;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getVolume */\n    getVolume() {\n        if (this._player) {\n            return this._player.getVolume();\n        }\n        if (this._pendingPlayerState && this._pendingPlayerState.volume != null) {\n            return this._pendingPlayerState.volume;\n        }\n        return 0;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#setPlaybackRate */\n    setPlaybackRate(playbackRate) {\n        if (this._player) {\n            return this._player.setPlaybackRate(playbackRate);\n        }\n        else {\n            this._getPendingState().playbackRate = playbackRate;\n        }\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getPlaybackRate */\n    getPlaybackRate() {\n        if (this._player) {\n            return this._player.getPlaybackRate();\n        }\n        if (this._pendingPlayerState && this._pendingPlayerState.playbackRate != null) {\n            return this._pendingPlayerState.playbackRate;\n        }\n        return 0;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getAvailablePlaybackRates */\n    getAvailablePlaybackRates() {\n        return this._player ? this._player.getAvailablePlaybackRates() : [];\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getVideoLoadedFraction */\n    getVideoLoadedFraction() {\n        return this._player ? this._player.getVideoLoadedFraction() : 0;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getPlayerState */\n    getPlayerState() {\n        if (!this._isBrowser || !window.YT) {\n            return undefined;\n        }\n        if (this._player) {\n            return this._player.getPlayerState();\n        }\n        if (this._pendingPlayerState && this._pendingPlayerState.playbackState != null) {\n            return this._pendingPlayerState.playbackState;\n        }\n        return YT.PlayerState.UNSTARTED;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getCurrentTime */\n    getCurrentTime() {\n        if (this._player) {\n            return this._player.getCurrentTime();\n        }\n        if (this._pendingPlayerState && this._pendingPlayerState.seek) {\n            return this._pendingPlayerState.seek.seconds;\n        }\n        return 0;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getPlaybackQuality */\n    getPlaybackQuality() {\n        return this._player ? this._player.getPlaybackQuality() : 'default';\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getAvailableQualityLevels */\n    getAvailableQualityLevels() {\n        return this._player ? this._player.getAvailableQualityLevels() : [];\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getDuration */\n    getDuration() {\n        return this._player ? this._player.getDuration() : 0;\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getVideoUrl */\n    getVideoUrl() {\n        return this._player ? this._player.getVideoUrl() : '';\n    }\n    /** See https://developers.google.com/youtube/iframe_api_reference#getVideoEmbedCode */\n    getVideoEmbedCode() {\n        return this._player ? this._player.getVideoEmbedCode() : '';\n    }\n    /** Gets an object that should be used to store the temporary API state. */\n    _getPendingState() {\n        if (!this._pendingPlayerState) {\n            this._pendingPlayerState = {};\n        }\n        return this._pendingPlayerState;\n    }\n    /** Initializes a player from a temporary state. */\n    _initializePlayer(player, state) {\n        const { playbackState, playbackRate, volume, muted, seek } = state;\n        switch (playbackState) {\n            case YT.PlayerState.PLAYING:\n                player.playVideo();\n                break;\n            case YT.PlayerState.PAUSED:\n                player.pauseVideo();\n                break;\n            case YT.PlayerState.CUED:\n                player.stopVideo();\n                break;\n        }\n        if (playbackRate != null) {\n            player.setPlaybackRate(playbackRate);\n        }\n        if (volume != null) {\n            player.setVolume(volume);\n        }\n        if (muted != null) {\n            muted ? player.mute() : player.unMute();\n        }\n        if (seek != null) {\n            player.seekTo(seek.seconds, seek.allowSeekAhead);\n        }\n    }\n    /** Gets an observable that adds an event listener to the player when a user subscribes to it. */\n    _getLazyEmitter(name) {\n        // Start with the stream of players. This way the events will be transferred\n        // over to the new player if it gets swapped out under-the-hood.\n        return this._playerChanges.pipe(\n        // Switch to the bound event. `switchMap` ensures that the old event is removed when the\n        // player is changed. If there's no player, return an observable that never emits.\n        switchMap(player => {\n            return player ? fromEventPattern((listener) => {\n                player.addEventListener(name, listener);\n            }, (listener) => {\n                // The API seems to throw when we try to unbind from a destroyed player and it doesn't\n                // expose whether the player has been destroyed so we have to wrap it in a try/catch to\n                // prevent the entire stream from erroring out.\n                try {\n                    if (player.removeEventListener) {\n                        player.removeEventListener(name, listener);\n                    }\n                }\n                catch (_a) { }\n            }) : of();\n        }), \n        // By default we run all the API interactions outside the zone\n        // so we have to bring the events back in manually when they emit.\n        (source) => new Observable(observer => source.subscribe({\n            next: value => this._ngZone.run(() => observer.next(value)),\n            error: error => observer.error(error),\n            complete: () => observer.complete()\n        })), \n        // Ensures that everything is cleared out on destroy.\n        takeUntil(this._destroyed));\n    }\n}\nYouTubePlayer.ɵfac = function YouTubePlayer_Factory(t) { return new (t || YouTubePlayer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };\nYouTubePlayer.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: YouTubePlayer, selectors: [[\"youtube-player\"]], viewQuery: function YouTubePlayer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.youtubeContainer = _t.first);\n    } }, inputs: { videoId: \"videoId\", height: \"height\", width: \"width\", startSeconds: \"startSeconds\", endSeconds: \"endSeconds\", suggestedQuality: \"suggestedQuality\", playerVars: \"playerVars\", showBeforeIframeApiLoads: \"showBeforeIframeApiLoads\" }, outputs: { ready: \"ready\", stateChange: \"stateChange\", error: \"error\", apiChange: \"apiChange\", playbackQualityChange: \"playbackQualityChange\", playbackRateChange: \"playbackRateChange\" }, decls: 2, vars: 0, consts: [[\"youtubeContainer\", \"\"]], template: function YouTubePlayer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"div\", null, 0);\n    } }, encapsulation: 2, changeDetection: 0 });\nYouTubePlayer.ctorParameters = () => [\n    { type: NgZone },\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\n];\nYouTubePlayer.propDecorators = {\n    videoId: [{ type: Input }],\n    height: [{ type: Input }],\n    width: [{ type: Input }],\n    startSeconds: [{ type: Input }],\n    endSeconds: [{ type: Input }],\n    suggestedQuality: [{ type: Input }],\n    playerVars: [{ type: Input }],\n    showBeforeIframeApiLoads: [{ type: Input }],\n    ready: [{ type: Output }],\n    stateChange: [{ type: Output }],\n    error: [{ type: Output }],\n    apiChange: [{ type: Output }],\n    playbackQualityChange: [{ type: Output }],\n    playbackRateChange: [{ type: Output }],\n    youtubeContainer: [{ type: ViewChild, args: ['youtubeContainer',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(YouTubePlayer, [{\n        type: Component,\n        args: [{\n                selector: 'youtube-player',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                // This div is *replaced* by the YouTube player embed.\n                template: '<div #youtubeContainer></div>'\n            }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: Object, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }]; }, { ready: [{\n            type: Output\n        }], stateChange: [{\n            type: Output\n        }], error: [{\n            type: Output\n        }], apiChange: [{\n            type: Output\n        }], playbackQualityChange: [{\n            type: Output\n        }], playbackRateChange: [{\n            type: Output\n        }], videoId: [{\n            type: Input\n        }], height: [{\n            type: Input\n        }], width: [{\n            type: Input\n        }], startSeconds: [{\n            type: Input\n        }], endSeconds: [{\n            type: Input\n        }], suggestedQuality: [{\n            type: Input\n        }], playerVars: [{\n            type: Input\n        }], showBeforeIframeApiLoads: [{\n            type: Input\n        }], youtubeContainer: [{\n            type: ViewChild,\n            args: ['youtubeContainer']\n        }] }); })();\n/** Listens to changes to the given width and height and sets it on the player. */\nfunction bindSizeToPlayer(playerObs, widthObs, heightObs) {\n    return combineLatest([playerObs, widthObs, heightObs])\n        .subscribe(([player, width, height]) => player && player.setSize(width, height));\n}\n/** Listens to changes from the suggested quality and sets it on the given player. */\nfunction bindSuggestedQualityToPlayer(playerObs, suggestedQualityObs) {\n    return combineLatest([\n        playerObs,\n        suggestedQualityObs\n    ]).subscribe(([player, suggestedQuality]) => player && suggestedQuality && player.setPlaybackQuality(suggestedQuality));\n}\n/**\n * Returns an observable that emits the loaded player once it's ready. Certain properties/methods\n * won't be available until the iframe finishes loading.\n * @param onAbort Callback function that will be invoked if the player loading was aborted before\n * it was able to complete. Can be used to clean up any loose references.\n */\nfunction waitUntilReady(onAbort) {\n    return mergeMap(player => {\n        if (!player) {\n            return of(undefined);\n        }\n        if (playerIsReady(player)) {\n            return of(player);\n        }\n        // Since removeEventListener is not on Player when it's initialized, we can't use fromEvent.\n        // The player is not initialized fully until the ready is called.\n        return new Observable(emitter => {\n            let aborted = false;\n            let resolved = false;\n            const onReady = (event) => {\n                resolved = true;\n                if (!aborted) {\n                    event.target.removeEventListener('onReady', onReady);\n                    emitter.next(event.target);\n                }\n            };\n            player.addEventListener('onReady', onReady);\n            return () => {\n                aborted = true;\n                if (!resolved) {\n                    onAbort(player);\n                }\n            };\n        }).pipe(take(1), startWith(undefined));\n    });\n}\n/** Create an observable for the player based on the given options. */\nfunction createPlayerObservable(youtubeContainer, videoIdObs, iframeApiAvailableObs, widthObs, heightObs, playerVarsObs, ngZone) {\n    const playerOptions = combineLatest([videoIdObs, playerVarsObs]).pipe(withLatestFrom(combineLatest([widthObs, heightObs])), map(([constructorOptions, sizeOptions]) => {\n        const [videoId, playerVars] = constructorOptions;\n        const [width, height] = sizeOptions;\n        return videoId ? ({ videoId, playerVars, width, height }) : undefined;\n    }));\n    return combineLatest([youtubeContainer, playerOptions, of(ngZone)])\n        .pipe(skipUntilRememberLatest(iframeApiAvailableObs), scan(syncPlayerState, undefined), distinctUntilChanged());\n}\n/** Skips the given observable until the other observable emits true, then emit the latest. */\nfunction skipUntilRememberLatest(notifier) {\n    return pipe(combineLatest$1(notifier), skipWhile(([_, doneSkipping]) => !doneSkipping), map(([value]) => value));\n}\n/** Destroy the player if there are no options, or create the player if there are options. */\nfunction syncPlayerState(player, [container, videoOptions, ngZone]) {\n    if (player && videoOptions && player.playerVars !== videoOptions.playerVars) {\n        // The player needs to be recreated if the playerVars are different.\n        player.destroy();\n    }\n    else if (!videoOptions) {\n        if (player) {\n            // Destroy the player if the videoId was removed.\n            player.destroy();\n        }\n        return;\n    }\n    else if (player) {\n        return player;\n    }\n    // Important! We need to create the Player object outside of the `NgZone`, because it kicks\n    // off a 250ms setInterval which will continually trigger change detection if we don't.\n    const newPlayer = ngZone.runOutsideAngular(() => new YT.Player(container, videoOptions));\n    newPlayer.videoId = videoOptions.videoId;\n    newPlayer.playerVars = videoOptions.playerVars;\n    return newPlayer;\n}\n/**\n * Call cueVideoById if the videoId changes, or when start or end seconds change. cueVideoById will\n * change the loaded video id to the given videoId, and set the start and end times to the given\n * start/end seconds.\n */\nfunction bindCueVideoCall(playerObs, videoIdObs, startSecondsObs, endSecondsObs, suggestedQualityObs, destroyed) {\n    const cueOptionsObs = combineLatest([startSecondsObs, endSecondsObs])\n        .pipe(map(([startSeconds, endSeconds]) => ({ startSeconds, endSeconds })));\n    // Only respond to changes in cue options if the player is not running.\n    const filteredCueOptions = cueOptionsObs\n        .pipe(filterOnOther(playerObs, player => !!player && !hasPlayerStarted(player)));\n    // If the video id changed, there's no reason to run 'cue' unless the player\n    // was initialized with a different video id.\n    const changedVideoId = videoIdObs\n        .pipe(filterOnOther(playerObs, (player, videoId) => !!player && player.videoId !== videoId));\n    // If the player changed, there's no reason to run 'cue' unless there are cue options.\n    const changedPlayer = playerObs.pipe(filterOnOther(combineLatest([videoIdObs, cueOptionsObs]), ([videoId, cueOptions], player) => !!player &&\n        (videoId != player.videoId || !!cueOptions.startSeconds || !!cueOptions.endSeconds)));\n    merge(changedPlayer, changedVideoId, filteredCueOptions)\n        .pipe(withLatestFrom(combineLatest([playerObs, videoIdObs, cueOptionsObs, suggestedQualityObs])), map(([_, values]) => values), takeUntil(destroyed))\n        .subscribe(([player, videoId, cueOptions, suggestedQuality]) => {\n        if (!videoId || !player) {\n            return;\n        }\n        player.videoId = videoId;\n        player.cueVideoById(Object.assign({ videoId,\n            suggestedQuality }, cueOptions));\n    });\n}\nfunction hasPlayerStarted(player) {\n    const state = player.getPlayerState();\n    return state !== YT.PlayerState.UNSTARTED && state !== YT.PlayerState.CUED;\n}\nfunction playerIsReady(player) {\n    return 'getPlayerStatus' in player;\n}\n/** Combines the two observables temporarily for the filter function. */\nfunction filterOnOther(otherObs, filterFn) {\n    return pipe(withLatestFrom(otherObs), filter(([value, other]) => filterFn(other, value)), map(([value]) => value));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst COMPONENTS = [YouTubePlayer];\nclass YouTubePlayerModule {\n}\nYouTubePlayerModule.ɵfac = function YouTubePlayerModule_Factory(t) { return new (t || YouTubePlayerModule)(); };\nYouTubePlayerModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: YouTubePlayerModule });\nYouTubePlayerModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(YouTubePlayerModule, [{\n        type: NgModule,\n        args: [{\n                declarations: COMPONENTS,\n                exports: COMPONENTS\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(YouTubePlayerModule, { declarations: [YouTubePlayer], exports: [YouTubePlayer] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { YouTubePlayer, YouTubePlayerModule };\n\n","import { isArray } from '../util/isArray';\nimport { CombineLatestOperator } from '../observable/combineLatest';\nimport { from } from '../observable/from';\nconst none = {};\nexport function combineLatest(...observables) {\n    let project = null;\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0].slice();\n    }\n    return (source) => source.lift.call(from([source, ...observables]), new CombineLatestOperator(project));\n}\n","import { Subject } from '../Subject';\nimport { multicast } from './multicast';\nexport function publish(selector) {\n    return selector ?\n        multicast(() => new Subject(), selector) :\n        multicast(new Subject());\n}\n","<ng-container [ngSwitch]=\"type\">\n  <img\n    *ngSwitchCase=\"'image'\"\n    [src]=\"image.sizes.large\"\n    [alt]=\"image.alt || image.title || image.name || ''\"\n    [width]=\"image.sizes['large-width']\"\n    [height]=\"image.sizes['large-height']\"\n  />\n\n  <div *ngSwitchCase=\"'video'\" class=\"showcase__iframe-container\">\n    <youtube-player [videoId]=\"videoId\" data-testid=\"yt-player\"></youtube-player>\n  </div>\n</ng-container>\n","import { Component, Input, OnInit, Inject } from '@angular/core'\n\nimport { getYoutubeId } from 'src/app/shared/util'\n\nimport { Image, ShowcaseType, VideoURL } from '../../models/post.model'\nimport { DOCUMENT } from '@angular/common'\n\n@Component({\n  selector: 'app-showcase',\n  templateUrl: './showcase.component.html',\n  styleUrls: ['./showcase.component.css'],\n})\nexport class ShowcaseComponent implements OnInit {\n  @Input() type: ShowcaseType\n  @Input() image: Image\n  @Input() video: VideoURL\n\n  public videoId: string\n\n  constructor(@Inject(DOCUMENT) private document: Document) {}\n\n  ngOnInit() {\n    if (this.type === 'video') {\n      this.videoId = getYoutubeId(this.video)\n\n      if (typeof YT === 'undefined') this.loadYouTubeAPI()\n    }\n  }\n\n  private loadYouTubeAPI() {\n    const tag = document.createElement('script')\n    tag.src = 'https://www.youtube.com/iframe_api'\n    this.document.body.appendChild(tag)\n  }\n}\n","<table>\n  <tbody>\n    <tr>\n      <th scope=\"row\">Kategorie:</th>\n      <td [innerHTML]=\"data.topic.name\"></td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Semester:</th>\n      <td>\n        <span *ngFor=\"let s of data.semester\" [innerHTML]=\"s.name + '<br>'\"></span>\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Erstellunsjahr:</th>\n      <td [innerHTML]=\"data.year\"></td>\n    </tr>\n    <tr>\n      <th scope=\"row\">{{ data.students.length > 1 ? 'Studierende' : 'Student*in' }}:</th>\n      <td>\n        <span *ngFor=\"let s of data.students\" [innerHTML]=\"s.name + '<br>'\"></span>\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">{{ data.lecturers.length > 1 ? 'Dozierende' : 'Dozent*in' }}:</th>\n      <td>\n        <span *ngFor=\"let d of data.lecturers\" [innerHTML]=\"d.name + '<br>'\"></span>\n      </td>\n    </tr>\n  </tbody>\n</table>\n","import { Component, Input, OnInit } from '@angular/core'\n\nimport { Post } from '../../models/post.model'\n\n@Component({\n  selector: 'app-briefing',\n  templateUrl: './briefing.component.html',\n  styleUrls: ['./briefing.component.css'],\n})\nexport class BriefingComponent implements OnInit {\n  @Input() data: Post['acf']\n\n  ngOnInit() {}\n}\n","import { Component, OnInit } from '@angular/core'\n\n@Component({\n  selector: 'app-loading-spinner',\n  templateUrl: './loading-spinner.component.html',\n  styleUrls: ['./loading-spinner.component.css'],\n})\nexport class LoadingSpinnerComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n","<span class=\"post-detail__spinner\" style=\"font-style: normal;\" role=\"img\" aria-hidden=\"true\"\n  >⏳</span\n>\n","<ng-container *ngIf=\"(isFetching$ | async) === false; else loadingSpinner\">\n  <section *ngIf=\"post$ | async as post; else notFound\">\n    <h2 [innerHTML]=\"post.title.rendered\"></h2>\n    <p class=\"post-detail__category\">\n      {{ post.categoryName }}\n      <span *ngIf=\"post.acf.tags.length\" class=\"post-detail__category__tags\">\n        – <span *ngFor=\"let tag of post.acf.tags\">{{ tag.name }}</span>\n      </span>\n    </p>\n\n    <app-showcase\n      [type]=\"post.acf.showcaseType\"\n      [image]=\"post.acf.showcaseImage\"\n      [video]=\"post.acf.showcaseVideo\"\n    ></app-showcase>\n    <div [innerHTML]=\"post.acf.description\"></div>\n\n    <h3>Steckbrief</h3>\n    <app-briefing [data]=\"post.acf\"></app-briefing>\n\n    <h3 *ngIf=\"post.acf.gallery.length\">Galerie</h3>\n    <img\n      *ngFor=\"let image of post.acf.gallery\"\n      [src]=\"image.sizes.medium\"\n      [alt]=\"image.alt || image.title || image.name || ''\"\n      [width]=\"image.sizes['medium-width']\"\n      [height]=\"image.sizes['medium-height']\"\n    />\n\n    <footer class=\"post-detail__footer\">\n      <button type=\"button\" (click)=\"toTop()\">Nach oben</button>\n    </footer>\n  </section>\n</ng-container>\n\n<ng-template #notFound>\n  <p class=\"post-detail__status-msg\">\n    Projekt mit ID »{{ rawId }}« nicht gefunden.\n    <span style=\"font-style: normal\" role=\"img\" aria-label=\"Sad cat\">😿</span>\n  </p>\n</ng-template>\n\n<ng-template #loadingSpinner>\n  <p class=\"post-detail__status-msg\">Wird geladen... <app-loading-spinner></app-loading-spinner></p>\n</ng-template>\n","import { Component, OnInit } from '@angular/core'\nimport { ActivatedRoute } from '@angular/router'\n\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nimport { Select, Store } from '@ngxs/store'\nimport { GetPost } from '../../store/portfolio.actions'\nimport { PortfolioSelectors } from '../../store/portfolio.selectors'\n\ntype PostEntityByIdFn = ReturnType<typeof PortfolioSelectors.postEntityByIdFn>\n\n@Component({\n  selector: 'app-post-detail',\n  templateUrl: './post-detail.component.html',\n  styleUrls: ['./post-detail.component.css'],\n})\nexport class PostDetailComponent implements OnInit {\n  @Select(PortfolioSelectors.postEntityByIdFn) postEntityByIdFn$: Observable<PostEntityByIdFn>\n  rawId: string\n  id: number\n\n  postEntity$: Observable<ReturnType<PostEntityByIdFn>>\n  post$: Observable<ReturnType<PostEntityByIdFn>['entity']>\n  isFetching$: Observable<boolean>\n\n  constructor(route: ActivatedRoute, private store: Store) {\n    this.rawId = route.snapshot.paramMap.get('id')\n    this.id = Number(this.rawId)\n\n    this.postEntity$ = this.postEntityByIdFn$.pipe(map((postEntityById) => postEntityById(this.id)))\n    this.post$ = this.postEntity$.pipe(map((post) => post.entity))\n    this.isFetching$ = this.postEntity$.pipe(map((post) => post.isFetching))\n  }\n\n  ngOnInit() {\n    this.store.dispatch(new GetPost(this.id)).subscribe()\n  }\n\n  toTop() {\n    document.body.scrollIntoView({ block: 'start', behavior: 'smooth' })\n  }\n}\n","<h2>DMP Portfolio</h2>\n<ng-container *ngIf=\"(posts$ | async).length; else noPosts\">\n  <section *ngFor=\"let post of posts$ | async; first as isFirst\">\n    <hr *ngIf=\"!isFirst\" />\n    <h3 [innerHTML]=\"post.title.rendered\"></h3>\n    <div>\n      <div [innerHTML]=\"getTeaser(post.acf.description)\"></div>\n      <a routerLink=\"{{ post.id }}\">Projekt ansehen →</a>\n    </div>\n  </section>\n\n  <footer class=\"post-master__footer\">\n    <button\n      *ngIf=\"(query$ | async).totalPages > pagination.page && (isFetching$ | async) === false\"\n      (click)=\"requestNextPage()\"\n      type=\"button\"\n    >\n      Mehr laden...\n    </button>\n  </footer>\n</ng-container>\n\n<ng-template #noPosts>\n  <p *ngIf=\"(isFetching$ | async) === false\" class=\"post-master__status-msg\">\n    Keine Projekte vorhanden. <span aria-hidden=\"true\" style=\"font-style: normal\">🚫</span>\n  </p>\n</ng-template>\n\n<p *ngIf=\"isFetching$ | async\" class=\"post-master__status-msg\">\n  Projekte werden geladen... <app-loading-spinner></app-loading-spinner>\n</p>\n","import { Component, OnInit } from '@angular/core'\n\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nimport { Select, Store } from '@ngxs/store'\nimport { Post } from '../../models/post.model'\nimport { PostRequestOptions } from '../../posts.service'\nimport { GetPostPage } from '../../store/portfolio.actions'\nimport { PortfolioSelectors } from '../../store/portfolio.selectors'\n\nconst linebreakRegex = /<br\\s?\\/?>(<\\/br>)?/g\n\ntype PostQueryFn = ReturnType<typeof PortfolioSelectors.postQueryFn>\ntype EntitiesByQueryFn$ = Observable<ReturnType<typeof PortfolioSelectors.postEntitiesByQueryFn>>\n\n@Component({\n  selector: 'app-post-master',\n  templateUrl: './post-master.component.html',\n  styleUrls: ['./post-master.component.css'],\n})\nexport class PostMasterComponent implements OnInit {\n  @Select(PortfolioSelectors.postQueryFn) postQueryFn$: Observable<PostQueryFn>\n  @Select(PortfolioSelectors.postEntitiesByQueryFn) postEntitiesByQueryFn$: EntitiesByQueryFn$\n  pagination: PostRequestOptions = { page: 1, perPage: 8 }\n\n  posts$: Observable<Post[]>\n  query$: Observable<ReturnType<PostQueryFn>>\n  isFetching$: Observable<boolean>\n\n  constructor(private store: Store) {\n    this.posts$ = this.postEntitiesByQueryFn$.pipe(\n      map((postsForQuery) => postsForQuery(this.pagination)),\n      map((postEntities) => postEntities.map((p) => p.entity)),\n    )\n    this.query$ = this.postQueryFn$.pipe(map((getPostQuery) => getPostQuery(this.pagination)))\n    this.isFetching$ = this.query$.pipe(\n      map((q) => Object.values(q.pages).some((p) => p.isFetching)),\n    )\n  }\n\n  ngOnInit() {\n    this.loadPage()\n  }\n  loadPage() {\n    this.store.dispatch(new GetPostPage(this.pagination))\n  }\n  requestNextPage() {\n    this.pagination.page++\n    this.loadPage()\n  }\n\n  getTeaser(text: string) {\n    text = text.replace(linebreakRegex, '')\n\n    return text.length < 160 ? text : `${text.slice(0, 160)}...`\n  }\n}\n","import { RouterModule, Routes } from '@angular/router'\n\nimport { PostDetailComponent } from './views/post-detail/post-detail.component'\nimport { PostMasterComponent } from './views/post-master/post-master.component'\n\nconst routes: Routes = [\n  { path: '', component: PostMasterComponent },\n  { path: ':id', component: PostDetailComponent },\n]\n\nexport const PortfolioRoutes = RouterModule.forChild(routes)\n","import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\n\nimport { LoadingSpinnerComponent } from './loading-spinner.component'\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [LoadingSpinnerComponent],\n  exports: [LoadingSpinnerComponent],\n})\nexport class LoadingSpinnerModule {}\n","import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { YouTubePlayerModule } from '@angular/youtube-player'\n\nimport { LoadingSpinnerModule } from 'src/app/shared/components/loading-spinner/loading-spinner.module'\n\nimport { BriefingComponent } from '../../components/briefing/briefing.component'\nimport { ShowcaseComponent } from '../../components/showcase/showcase.component'\n\nimport { PostDetailComponent } from './post-detail.component'\n\n@NgModule({\n  imports: [CommonModule, YouTubePlayerModule, LoadingSpinnerModule],\n  declarations: [PostDetailComponent, ShowcaseComponent, BriefingComponent],\n})\nexport class PostDetailModule {}\n","import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { RouterModule } from '@angular/router'\n\nimport { LoadingSpinnerModule } from 'src/app/shared/components/loading-spinner/loading-spinner.module'\n\nimport { PostMasterComponent } from './post-master.component'\n\n@NgModule({\n  imports: [CommonModule, RouterModule, LoadingSpinnerModule],\n  providers: [],\n  declarations: [PostMasterComponent],\n})\nexport class PostMasterModule {}\n","import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\n\nimport { NgxsModule } from '@ngxs/store'\n\nimport { PortfolioRoutes } from './portfolio.module.routing'\nimport { PortfolioState } from './store/portfolio.state'\nimport { PostDetailModule } from './views/post-detail/post-detail.module'\nimport { PostMasterModule } from './views/post-master/post-master.module'\n\n@NgModule({\n  imports: [\n    CommonModule,\n    PortfolioRoutes,\n    PostMasterModule,\n    PostDetailModule,\n    NgxsModule.forFeature([PortfolioState]),\n  ],\n  declarations: [],\n})\nexport class PortfolioModule {}\n"]}